# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

#uncomment the desired multiobjective algorithm
#parent.0 = ../../../../ec/app/moosuite/spea2.params
parent.0 = ../../../ec/app/moosuite/nsga2.params

stat = com.zodiackillerciphers.ciphers.generator.Stats
eval.problem = com.zodiackillerciphers.cutouts.EvolveCutouts

pop.subpop.0.species.genome-size=18
pop.subpop.0.species.min-gene=0.0
pop.subpop.0.species.max-gene=1.0
pop.subpop.0.species.mutation-prob=0.1
generations = 300000

#
# optionally your type could be: zdt1, zdt2, zdt3, zdt4, zdt6, sphere
#
# Different problems has different default settings, so we suggest 
# using the appropriate params file for each benchmark.

pop.subpop.0.species = ec.vector.FloatVectorSpecies
pop.subpop.0.species.ind = ec.vector.FloatVectorIndividual
pop.subpop.0.species.fitness.num-objectives = 4
pop.subpop.0.species.fitness.maximize = true
seed.0 = time


# Uncomment this if you'd like to force reevaluation of all archive
# members each generation.
#
# breed.reevaluate-elites.0 = true


# The multiobjective optimization routines here can use any crossover
# and mutation pipeline you like, but the literature tends to stick with
# SBX for crossover and Polynomial Mutation.  And with good reason: our
# tests indicate that Polynomial Mutation is much better than Gaussian of
# any setting for these problems.  And for SPEA2 at least, SBX seems to
# outperform most other crossover operators.  Note that we're using the
# "bounded" Polynomial Mutation variant, which seems to do a bit better.

pop.subpop.0.species.crossover-type = sbx
pop.subpop.0.species.crossover-distribution-index = 20

pop.subpop.0.species.mutation-type = polynomial
pop.subpop.0.species.mutation-distribution-index = 20
pop.subpop.0.species.mutation-bounded = true

