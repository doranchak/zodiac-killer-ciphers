package com.zodiackillerciphers.annealing.pollux;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import com.zodiackillerciphers.annealing.Solution;
import com.zodiackillerciphers.ciphers.Ciphers;
import com.zodiackillerciphers.ciphers.HomophonicGenerator;
import com.zodiackillerciphers.dictionary.WordFrequencies;
import com.zodiackillerciphers.keyreconstruction.KeyReconstruction;
import com.zodiackillerciphers.lucene.NGramsCSRA;
import com.zodiackillerciphers.lucene.Stats;
import com.zodiackillerciphers.lucene.ZKDecrypto;
import com.zodiackillerciphers.morse.Morse;
import com.zodiackillerciphers.ngrams.NGramsBean;
import com.zodiackillerciphers.tests.ChaoticCaesar;
import com.zodiackillerciphers.tests.LetterFrequencies;

public class PolluxSolution extends Solution {

	/** test case:  plaintext: I LIKE KILLING PEOPLE BECAUSE IT IS SO MUCH FUN IT IS MORE FUN THAN KILLING WILD GAME IN THE FOREST BECAUSE MAN IS THE MOST DANGEROUS ANIMAL OF ALL TO KILL SOMETHING IS THE MOST THRILLING EXPERIENCE IT IS EVEN BETTER THAN GETTING YOUR ROCKS OFF WITH A GIRL THE BEST PART OF IT IS THAT WHEN I DIE I WILL BE REBORN IN PARADISE AND ALL THAT I HAVE KILLED WILL BECOME MY SLAVES I WILL NOT GIVE YOU MY NAME BECAUSE YOU WILL TRY TO SLOW DOWN OR STOP MY COLLECTING OF SLAVES FOR MY AFTERLIFE
	 * dashes: 986
	 * dots: 5732
	 * spaces: 104
	 * ciphertext: 3705857153485805195942512823458371254850983129970716990368243953170657342163670594276072312057490271273475506884981238192954723205797125646242248457023506619880367131736512581970613522158185085847715973458330330971985478843245853487246624760864747319349175250515285198802854747370649375051626213613280753024684764620251557490733545489189847734819771794834893031292496643560532026085122099128428550969133924784362513922061688092813212972038730335186946917161275502706209624250537094553217099186947531618473770292072458534297507208519950306239429820545921254509746265054221907347350502378030631972547094647158206435721280620665071646053495188749286486805581762036748881958209581235066905567177971369122091757207848820234782136270907777070652305423309476970264563061996135621520915707771945722478494586125224346543309374531512307981751792207875497754242850716235166903630824274821389347917834781632133452515458063467742812627136231602773076064274275507905229154628125178571762243462543991720787317625192750508387469619645198482661532479754760223907432505313680234592243872162096946096313502256070656808860529496095684674361694306775454878242945264523150656609991559129617505672059371812651626916189842231762248981788487206994286083089603924357164699456630681928908285096643922029350348293481271834992066642765152543927138422394215224328548894562189083860590529318030283439724374558247
	 */
	
	// z408 plaintext
	public static String ciphertextZ408 = "3705857153485805195942512823458371254850983129970716990368243953170657342163670594276072312057490271273475506884981238192954723205797125646242248457023506619880367131736512581970613522158185085847715973458330330971985478843245853487246624760864747319349175250515285198802854747370649375051626213613280753024684764620251557490733545489189847734819771794834893031292496643560532026085122099128428550969133924784362513922061688092813212972038730335186946917161275502706209624250537094553217099186947531618473770292072458534297507208519950306239429820545921254509746265054221907347350502378030631972547094647158206435721280620665071646053495188749286486805581762036748881958209581235066905567177971369122091757207848820234782136270907777070652305423309476970264563061996135621520915707771945722478494586125224346543309374531512307981751792207875497754242850716235166903630824274821389347917834781632133452515458063467742812627136231602773076064274275507905229154628125178571762243462543991720787317625192750508387469619645198482661532479754760223907432505313680234592243872162096946096313502256070656808860529496095684674361694306775454878242945264523150656609991559129617505672059371812651626916189842231762248981788487206994286083089603924357164699456630681928908285096643922029350348293481271834992066642765152543927138422394215224328548894562189083860590529318030283439724374558247";
	// highland shooter cipher (full first page)
	public static String ciphertextCrimo = "2390382085723830435612394023863284239834847382810234865746501012348765101847564378010101347568347502453764303287416273465671637647207164013857634762783400451732616173456834848393827263737848022081726378208376073865476187645287620101713822038376457168202010834567048365020101084765287649526784627643764782013829287364583914756370101704782659346104267834652038475634702983746502028762018010482746572634720108713465627382838945764774847249020108430130283028115902483576294875601745623773738293940287613790784380767801087140871342657474738297146501010410876571674637010827631802083746576382021375603808376457126602415876450183745602072641235324210874650834830392764503465747435545431349056762404042688957847447014587841656664329927653234523491027364018451170145308813745932098517341150410384512084586784504185714087478485010192928383288058457827475820284751645729781603875601337130158974238097540328957028934750838475574839202348571014501472560347561108475673204375601834709243764676458761475808437502983464384030274563810486610108734564567474247204347564730423772299243745674500170132756471385674571020182347675076865798345107861375651434454325468974257435637898766565651928746577647611104375104876598301002923374084731567465010485767460101876450250630450724057263978537865605038745675988977612345231351345356576512308633423409081567942578674567789867943423564883584328571047056716714386472193475408716309654323232797087756543432346774518704187502349875435602896108465738062378955321277989766758736589042543468434538906780637814639284689736540336016048736570868761084576135415782650184568735630185748685467465347012342347860832517346570846195735746587246508165084365804206075648756234562034875638765706153215434012375495025648634589191397435671401523451230345123685264352834192984625406215491652364657382829163542663547674671005174567348956928459526087515017435640317678654107482356738838103746063031365894327650361983476574631576195760567182463846120356173021283746014576459920381798347543556567896371028637817345762786804650178265743008176745467518464501876458700761745617974565365517191267541925013451345838726634780419541395478563546354239194375106473584830143875640640658763048723045761616780452678610047167846781727834014576402357383891178601437654310030392348734658714387676545435925767987789075667401108146501078743029878635463521788237459348592767167321912032104387569435364723601785671238746050435263984561525346234821635493249593148756904520467846778415623467865456326745762648919619120320354678236534765626623521934578278364526020462404365128374010348756178203746710487561071636458347620647562715516547812436589676671265412981873765761757191536456534691924566754017614752767600263476345344475638187625451129385674567342027451435327672767191374583203338299345875466452510878345727573134059287654130160164786178645763425766742893972360208762137647543153434217647569345785007645233945761437680014735623339226258738143846253459167456451205934256652695464887477475154651961678489576287476774654780612990194385783292347239929291045623353465263924735673426156026574865278613861516415636456745656020010017465761456128154765218181645263632721865786537286532176571901010290192392019209283947857560817230538408742083726652467372647166450138012398402734490560871655432156";
	// first 1381 of highland shooter cipher
	public static String ciphertextCrimo1381 = "2390382085723830435612394023863284239834847382810234865746501012348765101847564378010101347568347502453764303287416273465671637647207164013857634762783400451732616173456834848393827263737848022081726378208376073865476187645287620101713822038376457168202010834567048365020101084765287649526784627643764782013829287364583914756370101704782659346104267834652038475634702983746502028762018010482746572634720108713465627382838945764774847249020108430130283028115902483576294875601745623773738293940287613790784380767801087140871342657474738297146501010410876571674637010827631802083746576382021375603808376457126602415876450183745602072641235324210874650834830392764503465747435545431349056762404042688957847447014587841656664329927653234523491027364018451170145308813745932098517341150410384512084586784504185714087478485010192928383288058457827475820284751645729781603875601337130158974238097540328957028934750838475574839202348571014501472560347561108475673204375601834709243764676458761475808437502983464384030274563810486610108734564567474247204347564730423772299243745674500170132756471385674571020182347675076865798345107861375651434454325468974257435637898766565651928746577647611104375104876598301002923374084731567465010485767460101876450250630450724057263978537865605038745675988977612345231351345356576512308633423409081567942578674567789867943423564883584328571047056716714";
	// first 1381 of highland shooter cipher, reversed
	public static String ciphertextCrimo1381Reversed = "4176176507401758234853884653243497689877654768752497651809043243368032156756535431531325432167798895765478305065687358793627504270540360520546781010647675840105647651374804733292001038956784015734011167467756478291565656678987365347524798645234544341565731687015438975686705767432810201754765831746572310710054765473429922773240374657434027424747654654378010166840183654720304834643892057348085741678546764673429074381065734023765748011657430652741054101758432029384755748380574398207598230457908324798510317331065783061879275461574820285747287548508823838292910105848747804175814054876854802154830140511437158902395473188035410711548104637201943254323567299234666561487854107447487598862404042676509431345455347475643054672930384380564780124235321462702065473810546785142066217546738083065731202836756473802081367280107364761756780140101056417928374747562431780417801087670834870973167820493928373773265471065784926753842095118203820310348010209427484774675498382837265643178010274362756472840108102678202056473892074365748302564387624016439562874071010736574193854637829283102874673467264876259467825674801010205638407654380102028617546738302283171010267825467816745683706738028736271802208487373627283938484386543716162371540043872674367583104617027467361765643726147823034673542057438657431010108734657481015678432101056475684320182837484389324823683204932165340383275802830932";
	// toebes example from https://toebes.com/codebusters/Samples/Solving_Pollux.htm
	public static String ciphertextToebes = "120598110122784733744918059466981433939350262961983130455866718756946591628223037761517666963203";

	
	public static String ciphertext = ciphertextCrimo1381;
	
	public static String alphabet = "0123456789"; // characters to draw from

	// character assignments for dot, dash, and space
	public StringBuffer[] dotDashSpace;
	public StringBuffer[] dotDashSpaceReverse;
	
	public Random random = new Random();
	
	public double energyCached;
	
	@Override
	public void mutateReverse() {
		for (int i=0; i<dotDashSpace.length; i++) 
			dotDashSpace[i] = new StringBuffer(dotDashSpaceReverse[i]);
		mutateReverseClear();
	}
	@Override
	public void mutateReverseClear() {
		for (int i=0; i<dotDashSpace.length; i++) 
			dotDashSpaceReverse[i] = null;
	}

	@Override
	public String representation() {
		String morse = toMorse();
		String pt = toPlainText(morse);
		return energyCached + "	dot(" + dotDashSpace[0] + ") dash (" + dotDashSpace[1] + ") space (" + dotDashSpace[2] + ") morse (" + morse
				+ ") plaintext (" + pt + ")";
	}
	
	public String toMorse() {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < ciphertext.length(); i++) {
			String ch = ciphertext.substring(i, i + 1);
			
			for (int j=0; j<3; j++) {
				if (dotDashSpace[j].indexOf(ch) > -1) { 
					sb.append(convert(j));
					break;
				}
			}
		}
		return sb.toString();
	}
	
	public String convert(int which) {
		if (which == 0) return "0";
		if (which == 1) return "1";
		return " ";
	}
	
	public String toPlainText(String morse) {
		StringBuffer pt = new StringBuffer();
		String[] split = morse.split(" ");
		for (String s : split) {
			Character p = Morse.morseDecodeTable.get(s);
			if (p != null)
				pt.append(p);
//			else 
//				pt.append("X");
		}
		return pt.toString();
	}

	@Override
	public double energyCached() {
		// TODO Auto-generated method stub
		return energyCached;
	}

	@Override
	public void initialize() {
		dotDashSpace = new StringBuffer[] {
				new StringBuffer(), new StringBuffer(), new StringBuffer()
		};
		dotDashSpaceReverse = new StringBuffer[3];
		for (int i=0; i<alphabet.length(); i++) {
			int which = random.nextInt(3);
			char ch = alphabet.charAt(i);
			dotDashSpace[which].append(ch);
		}
	}
	public PolluxSolution() {
	}
	
	@Override
	public boolean mutate() {
		
		int sourceGroup = random.nextInt(3);
		int targetGroup = random.nextInt(3);
		while (sourceGroup == targetGroup) targetGroup = random.nextInt(3); 
		
		StringBuffer group = dotDashSpace[sourceGroup];
		if (group.length() == 0) return true;
		int i = random.nextInt(group.length());
		char c = group.charAt(i);
		
		preserveGroups();
		
		dotDashSpace[targetGroup].append(c);
		dotDashSpace[sourceGroup].deleteCharAt(i);
		
		return true;
	}
	
	void preserveGroups() {
		for (int i=0; i<3; i++) {
			dotDashSpaceReverse[i] = new StringBuffer(dotDashSpace[i]);
		}
	}
	
	
	@Override
	public double energy() {
		energyCached = 0;
		String pt = toPlainText(toMorse());
		energyCached = -NGramsCSRA.zkscore(new StringBuffer(pt), "EN", false);
		return energyCached;
	}
	@Override
	public Solution clone() {
		PolluxSolution newSol = new PolluxSolution();
		newSol.dotDashSpace = new StringBuffer[3];
		newSol.dotDashSpaceReverse = new StringBuffer[3];
		for (int i=0; i<3; i++) {
			newSol.dotDashSpace[i] = new StringBuffer(dotDashSpace[i]);
			newSol.dotDashSpaceReverse[i] = new StringBuffer(dotDashSpaceReverse[i]);
		}

		return newSol;
	}
	
	public static void test() {
		PolluxSolution p = new PolluxSolution();
		p.initialize();
		p.dotDashSpace = new StringBuffer[] {
				new StringBuffer("5732"),
				new StringBuffer("986"),
				new StringBuffer("104")
		};
		System.out.println(p.toMorse());
		System.out.println(p.toPlainText(p.toMorse()));
		System.out.println(p.energy());
		System.out.println(p.representation());
		
	}
	
	
	public static void main(String[] args) {
		test();
	}

}
