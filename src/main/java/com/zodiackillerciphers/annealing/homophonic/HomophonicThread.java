package com.zodiackillerciphers.annealing.homophonic;

import java.util.Random;

import com.zodiackillerciphers.annealing.SimulatedAnnealing;
import com.zodiackillerciphers.ciphers.Ciphers;
import com.zodiackillerciphers.lucene.NGrams;
import com.zodiackillerciphers.lucene.Stats;
import com.zodiackillerciphers.lucene.ZKDecrypto;

public class HomophonicThread extends Thread {
	protected static Random random = new Random();
	protected String cipher;
	protected String plaintext; 
	protected double startingTemperature = 10000;
	public boolean result;
	public int threadNum;
	public int targetIterations;
	
	public HomophonicThread(String cipher, String plaintext, double startingTemperature,
			int targetIterations, int threadNum) {
		super();
		this.cipher = cipher;
		this.plaintext = plaintext;
		this.startingTemperature = startingTemperature;
		this.threadNum = threadNum;
		this.targetIterations = targetIterations;
	}
	public void say(String msg) {
		System.out.println(threadNum + "	" + msg);
	}
	public void run() {
		HomophonicSolution hom = new HomophonicSolution(cipher, plaintext);
		hom.initialize();
		boolean go = true;
		double bestScore = Double.MAX_VALUE;
		//double temperature = random.nextDouble()*28+2;  //[2,30)
		//double coolingRate = random.nextDouble()*0.199+0.001;  // [0.001,0.2)
		double temperature = startingTemperature;
		SimulatedAnnealing.extendIterations = true;
		hom = (HomophonicSolution) SimulatedAnnealing.run(temperature, targetIterations, hom, threadNum);
//		if (hom.percentMatchesZ408Solution() >= 80) {
//			say("SUCCESS!  Reached at least 80% accuracy of Z408 solution.");
//			result = true;
//			finish();
//			return;
//		}
		result = false;
		finish();
	}
	
	public void finish() {
		Solver.threads[threadNum] = new HomophonicThread(cipher, plaintext, startingTemperature, targetIterations, threadNum);
		Solver.threads[threadNum].start();
	}
	
	public static void testNgrams() {
		String[] plaintexts = new String[] { Ciphers.Z408_SOLUTION.toUpperCase(),
				"LSSETEETSOILNRENTCTIENTELLESRENATENPTIEUONAESSRTDANSDELATSILIESMLAAROIINTPREUREETCETTRIANDLEUNLAETAISDLSSUTRAITANTERSATIRESATREARENEILLOOTEARUNCANTAINELATSDLIGNLUSDEREEOETORITCUAISINAILLEULDLLETEUREEREPRISANTLESSINSTREENNEUNPOALTINASINTDSIEROILATTCUITESISINSEAMEELNDINSSUNSONSORELSSTMISATTREEACALEATOIRLILTSIEALEOILRTALISACTTENTERLETILSAISLENETELIEIDRUNINNALERAALEASILERESNOTRPESALTPUIETSRCLTREELCULARENNNEUO",
				"USEDUDURSQDAALPARIONNESECUMEOIMLSNFGSVUEQLLIRIHSSTTREDUTREDACUSSABLNQVAFUGEARLEMOINESONLESUIETCLPETTREAIRESNBDELERIHRTRAEDETROPLNMFUVAAQOUILLETILMETAFAUTRESANSACRIENNUMQEUOLDOIETNRATBVACMEUSADISARENDOPGHCETFEAURSATIONIMAEAEMGQTUEAFBICTUEETULQCUTROIRNOIRDEVARABSUNCLSTESSEFIQTRONDUSSUSCETROLNPLILDETEONOUCURSDITAUONDESLDVRLIOUNESINDISCUSTARDMMERPUTPCSERLAMALDNETTCNTEDAPHESEOUOGIRLDEGENAREHICONPAUIECLNMFTAUEQ",
				"ESETETETSENTSEESTETESETEEENEREETTSTNTSETENTESETTTSSENTENTENTSESSTETEESETENETREENTESETRETETEETSETEESLENTESTTEENETETETENTEETENTRETENTESTTETEETETSETEESETTENTETTESSERENSEENEEETENTETSESESESTENTETTEETTRESTRENTSESTETESSESETEENSETTENESEEETEESSENELEEESENTTERETESNESSETESESENTLESSTTEESETETESSESSENTTESETETEENETERESETSNESTETEEETTESETETESETEEEETSESNESENEETEELESTERNEESTESENNESSENTETESETERNESTEENTETTETEETEETEETETENTSSETE" };
		for (String plaintext : plaintexts) {
			System.out.println(plaintext);
			float zk = NGrams.zkscore(new StringBuffer(plaintext), false, true);
			System.out.println("zkscore: " + zk);
		}
	}

	public static void testStats() {
		String[] plaintexts = new String[] { Ciphers.Z408_SOLUTION.toUpperCase(),
				"LSSETEETSOILNRENTCTIENTELLESRENATENPTIEUONAESSRTDANSDELATSILIESMLAAROIINTPREUREETCETTRIANDLEUNLAETAISDLSSUTRAITANTERSATIRESATREARENEILLOOTEARUNCANTAINELATSDLIGNLUSDEREEOETORITCUAISINAILLEULDLLETEUREEREPRISANTLESSINSTREENNEUNPOALTINASINTDSIEROILATTCUITESISINSEAMEELNDINSSUNSONSORELSSTMISATTREEACALEATOIRLILTSIEALEOILRTALISACTTENTERLETILSAISLENETELIEIDRUNINNALERAALEASILERESNOTRPESALTPUIETSRCLTREELCULARENNNEUO",
				"USEDUDURSQDAALPARIONNESECUMEOIMLSNFGSVUEQLLIRIHSSTTREDUTREDACUSSABLNQVAFUGEARLEMOINESONLESUIETCLPETTREAIRESNBDELERIHRTRAEDETROPLNMFUVAAQOUILLETILMETAFAUTRESANSACRIENNUMQEUOLDOIETNRATBVACMEUSADISARENDOPGHCETFEAURSATIONIMAEAEMGQTUEAFBICTUEETULQCUTROIRNOIRDEVARABSUNCLSTESSEFIQTRONDUSSUSCETROLNPLILDETEONOUCURSDITAUONDESLDVRLIOUNESINDISCUSTARDMMERPUTPCSERLAMALDNETTCNTEDAPHESEOUOGIRLDEGENAREHICONPAUIECLNMFTAUEQ",
				"ESETETETSENTSEESTETESETEEENEREETTSTNTSETENTESETTTSSENTENTENTSESSTETEESETENETREENTESETRETETEETSETEESLENTESTTEENETETETENTEETENTRETENTESTTETEETETSETEESETTENTETTESSERENSEENEEETENTETSESESESTENTETTEETTRESTRENTSESTETESSESETEENSETTENESEEETEESSENELEEESENTTERETESNESSETESESENTLESSTTEESETETESSESSENTTESETETEENETERESETSNESTETEEETTESETETESETEEEETSESNESENEETEELESTERNEESTESENNESSENTETESETERNESTEENTETTETEETEETEETETENTSSETE" };
		for (String plaintext : plaintexts) HomophonicSolution.dumpStats(plaintext);
	}
}
