package com.zodiackillerciphers.annealing.homophonic;

import com.zodiackillerciphers.ciphers.Cipher;
import com.zodiackillerciphers.ciphers.Ciphers;
import com.zodiackillerciphers.lucene.ZKDecrypto;

public class Solver {
	public static Thread[] threads;
	public static void solve(String ciphertext, String plaintext, int numThreads) {
		threads = new HomophonicThread[numThreads];
		for (int i=0; i<numThreads; i++) {
			threads[i] = new HomophonicThread(ciphertext, plaintext, 10000, 100000, i);
			threads[i].start();
			System.out.println("Kicked off thread #" + i);
		}
	}
	public static void main(String[] main) {
		String plaintext = null;
		//String plaintext = "OLADEDATLINDHEOHTEHOREASIOTASROMARHPANATIEMERERANSHANDONTANDWALSDIMEINTHEPURSESTHERFASOMENORTHIMOFSCANDERTAEINFMETERANTTUDANTSOMETHANDDIVERMETHEMOFSTHRONTANDOFHISENREATISEVENHETSORTHINDITTONDYEARSURDSOPRWASHFDARLTHEHERTHERTOPISOFTHIEWHENACAEIWONTHESOHERNANHARISARIENCELLTHEIHAVEDOLLESWANTHEROMEMYSNFVOSOWOTLNESDAVOYUAMYNAMEHEREAREYEAWOLNTRYTOSTOOCOWNUSETOHMYRUNNIRSANDORSLEVESPERMYFPTORTAREIHEOROETIMETHHHATI";
		//String cipher = Ciphers.Z408;
		
		// multiplicity: 0.061
		//String cipher = Ciphers.fromNumeric("12 14 15 13 20 20 23 10 24 12 26 04 17 17 11 02 12 24 15 06 05 01 06 14 17 10 06 16 26 11 16 16 06 17 23 26 04 10 23 11 17 12 20 23 17 21 12 10 07 25 11 06 00 07 10 07 13 14 23 25 18 06 25 23 17 00 15 07 13 18 14 19 23 17 12 10 13 14 18 11 03 09 06 12 15 04 15 17 23 00 07 15 05 11 15 13 17 10 23 14 20 20 19 07 24 20 05 23 17 00 14 17 23 00 07 06 17 07 04 26 21 14 08 20 13 12 05 14 26 24 08 14 12 24 18 01 06 14 17 10 06 16 23 17 15 13 25 17 24 15 10 11 11 05 13 25 04 10 13 15 02 24 17 10 19 03 11 06 25 12 24 27 24 17 04 17 13 02 12 15 06 18 19 03 25 11 16 26 07 23 17 13 12 13 12 26 23 13 17 10 23 12 10 12 03 23 17 18 12 01 06 14 17 15 06 16 26 25 19 05 15 11 00 25 14 05 07 19 13 22 05 20 11 23 10 12 10 07 24 01 06 14 17 15 06 16 05 25 11 05 24 25 15 23 24 12 11 03 05 14 25 15 23 26 20 24 12 12 06 26 07 04 12 05 07 11 10 11 17 12 15 11 07 13 20 05 13 17 26 25 19 05 15 04 17 18 18 13 26 25 19 05 10 16 24 12 12 14 00 13 12 23 17 04 10 07 24 11 25 24 15 23 26 04 20 20 19 06 17 07 04 26 21 04 08 20 13 02 14 19 12 26 23 24 17 15 23 12 10 12 02 11 25 20 18 02 23 18 13 14 25 24 17 11 02 24 17 18 24 14 27 11 25 23 17 00 15 11 18 24 27 24 20 11 05 12 14 15 13 20 20 23 10 24 08 04 12 24 18 01 06 04 17 15 06 16 26 11 16 16 06 17 23 26 14 10 23 11 17 12 17 13 15 02 11 25 21 12 03 11 25 14 00 20 11 08 04 20 25 24 14 20 10 23 16 24 01 06 14 17 15 06 16 23 17 10 24 25 17 13 15", false);
		// multiplicity: 0.082
		//String cipher = Ciphers.fromNumeric("36 14 31 32 10 10 30 31 24 18 16 29 06 26 09 02 36 32 07 23 19 15 23 14 06 07 23 05 16 04 05 05 23 26 27 16 14 07 30 04 26 18 10 30 06 01 36 07 35 03 04 23 00 21 12 35 28 14 27 33 25 23 03 27 06 00 31 21 32 25 20 34 30 26 18 12 24 29 25 04 13 08 23 18 07 29 12 06 30 00 35 07 19 04 31 11 06 31 30 20 10 10 34 21 24 10 19 30 06 00 20 26 30 00 35 23 06 21 14 16 01 14 22 10 28 18 19 20 16 11 22 14 36 24 25 15 23 20 26 12 23 05 27 06 12 24 03 06 11 12 12 09 04 19 11 33 14 07 24 07 02 28 26 07 34 13 04 23 33 18 11 17 24 06 20 26 28 02 18 07 23 25 34 13 03 04 05 16 21 27 06 24 36 24 18 16 27 24 26 31 27 18 31 18 13 27 06 25 36 15 23 29 26 31 23 05 16 33 34 19 07 04 00 33 20 19 35 34 28 37 19 10 09 30 12 18 31 35 11 15 23 14 26 31 23 05 19 03 09 19 11 33 07 27 11 18 04 13 19 29 03 07 30 16 10 11 36 18 23 16 21 14 36 19 21 09 12 04 26 36 07 04 21 11 10 19 11 06 16 33 34 19 31 20 26 25 25 28 16 03 34 19 07 05 32 18 18 14 00 28 18 27 26 20 31 21 24 09 33 28 12 27 16 29 10 10 34 23 26 35 29 16 01 14 22 10 32 02 20 34 18 16 27 32 26 12 30 36 12 18 02 09 33 10 25 02 27 25 24 29 03 28 06 04 02 28 26 25 32 14 17 09 03 30 06 00 12 09 25 24 17 32 10 09 19 36 29 12 32 10 10 27 12 28 22 20 18 11 25 15 23 29 06 31 23 05 16 04 05 05 23 06 30 16 29 12 27 04 06 36 06 24 12 02 09 03 01 36 13 09 33 20 00 10 04 22 20 10 33 32 29 10 12 27 05 32 15 23 29 06 31 23 05 30 06 12 28 03 06 32 31", false);
		// multiplicity: 0.095
		//String cipher = Ciphers.fromNumeric("01 02 03 04 05 06 07 08 09 10 11 12 11 13 14 01 08 03 15 16 17 18 10 01 19 20 21 07 23 01 11 24 14 12 25 20 26 27 28 12 16 06 29 10 09 30 11 31 03 09 32 06 01 09 20 33 23 04 12 34 14 18 35 14 03 36 01 13 12 06 27 29 37 03 21 16 18 30 38 14 12 23 08 39 26 10 09 31 03 29 16 09 26 03 09 13 01 11 23 17 40 01 03 09 22 11 10 26 14 34 33 41 37 18 26 30 32 24 42 28 43 18 30 38 44 06 08 07 12 10 30 09 39 03 45 29 10 28 01 46 10 44 35 09 25 14 23 27 15 13 42 07 16 03 11 47 04 31 06 21 04 11 03 44 10 28 48 32 07 03 15 16 01 10 11 02 13 09 41 18 10 38 31 30 14 11 21 23 27 01 06 09 49 28 04 05 03 01 02 14 20 12 50 24 26 11 27 09 29 32 06 49 09 03 11 18 17 34 09 18 30 31 51 10 28 14 52 30 44 30 21 41 24 14 12 11 14 24 27 11 28 12 08 06 15 20 01 14 13 04 02 27 09 29 24 53 50 24 26 11 28 12 11 30 27 26 11 26 03 54 06 08 03 36 20 55 11 02 20 18 13 14 24 39 10 21 22 24 01 11 03 09 49 01 46 27 11 44 20 11 10 30 02 13 54 20 31 34 37 03 08 06 23 04 34 09 29 07 47 54 16 12 10 38 01 12 03 55 20 11 02 23 04 16 05 27 08 07 04 06 10 31 01 23 09 44 30 09 29 24 14 03 31 18 10 28 14 26 30 07 08 23 49 35 20 12 39 16 60 07 27 09 18 14 23 04 50 10 09 12 03 25 06 07 03 01 18 39 10 21 11 02 20 03 14 02 27 14 12 46 34 26 01 03 10 09 04 11 30 44 13 14 26 04 26 23 14 11 27 06 09 03 09 17 13 01 23 12 35 18 22 38 16 04 12 03 04 56 21 10 25 34 42 08 18 09 10 11 06 39 18 10 28 57 58 27 03 09 13 18 01 02 03 09 49 31 14 10 35 18 30 38 21 11 03 37 16 19 23 14 20 03 02 10 50 24 06 01 46 27 12 04 30 17 20 01 02 03 09 49 11 30 29 10 05 06 11 46 34 26 61 58 10 38 09 01 13 99 03 08 06 01 18 42 16 26 27 28 04 24 28 07 01 03 35 27 01 08 16 18 61 55 58 30 28 27 14 24 21 20 04 40 10 09 12 03 25 07 16 31 10 14 28 12 44 60 27 07 08 48 16 13 54 23 02 23 14 24 28 46 34 09 49 16 32 03 09 04 10 17 20 05 13 12 10 37 24 25 16 01 11 20 14 13 09 29 12 30 35 23 44 10 21 04 16 25 38 01 54 20 09 01 28 27 07 08 18 05 99 48 08 22 24 11 30 28 11 27 17 28 12 20 36 ", false);
		
		//Test cipher by ccactus (no E's, with encoding errors)
		 
		//String cipher = "K)IM3$Um8lnJ#X5-*-MTCgN(96AcPgna$HaRY6cWb0*dN4LCAORc4_RejkHFDE3#KpnAPIH!M(TUS7*50*mHaMbQd*RK4iXHVAL$AGRQXCSa#k-&LK02aiIW1TK7!QJpUmMbH9nH!T*_(OfRH@7lQbHBkSC4K67HSR-gQ3Rc561-ZN(RDd9A%X_VSUhJaRg7&XW4Mn5hRT_m*3D$IHgo!X54b*8T6cpYEHml%Cabk*I@0U9oA#$4G0QX$SW_9E3A(FUCjYnhHdKS0H4m6*CBn-IQMkg-A6(*nH!aLm4GX5JU01CPDZMb4AXH8k*n%d_Vb*F_)mX9#$B6*&%D$TF)";
		//String cipher = "(;+Hc^BE&pPN5FB*UcYW+T2b4FD<OK+RyT+I+JjR8I1C3#LBHlB*F/^2W.zGO7LBV4>KO<X+;y31(d)MFzW/M_Sj+lpfUC)l.DF+TIzOJ*zHVI6zP.2A+U*GZ>+(&1#cJkNpvB2VBFOORIw+Z>Bz68@Y9pTB2C+#lcq5M*RZMIp<b+EUckC+l.zFC5Ik#cG25dp_-^Rct+z7J8M2(#Gc^pMpFHOR-+D2K94bBI)L^5tLpdWpAFpYlOk+NRyKYBR9k4N.^(D+%dOZ<;*-K6<(t+z7S+GFcOL5.SV_Lqly%G:y)f2+T-(f+I-4XBKd5<9:)t+S8fN+>WI4MEPcUV/K";
		//String cipher = Ciphers.Z340;
		// multiobj evolution cipher 6 
		//String cipher = "BT;+cqtp/+2F4bk*|5FBcK<O#y)HER6SW89+JlFM(2|H45R.zZ)d9|k2C5pWK&+zc9+LG;+tLf>W^zjBd>-<c4N#OVDA+zSYCU1NB.F^pNY+OT+K%pk69+_*L(MdVc.bUXR@l2#BO+5Rlc7t8B4|MpD5T-NBJ+.2^+|ylCp1<-O+UpMbdSY2#j<Ff)zVZ2TEUFW)>(&zN+:cB+kCyl3MO(@W*|JRHzLq7pl+4GlCX|%.*-OM#>7cp/GD6BJ4^|T5(HtKP+)GGOdR(^8BAKWVL.;+FBcSPFDy62B/pKP|MZY1f+UcF+<+8p:-*fL/Ez+_3^|5F2O<(V_+yOG*KzRk";
		String cipher = ">J&9*+%F8$WT13+!#4*J{;.RTX*5XC;E1&<9=5^<9*;=UC]HM[,6[M3=DE}.6K#3]CQDL]X-HK-_Q*8B524T-Z&<4(7)&MKADKV<K-@KMG4@#IW0:N+=L32PJ1.Z;@6G#8I;&=5^67*-4.;KT$9!ML46C;M3V!P+H-Z#7@93SK#PBP,W:*Q*1Y,}O%]L;,;X:@A#&<GZI6ABW4V3OVU17!DZJT7IQKCJH<%$G,P\\WVF<{*{=8^G#A*=AH{S3|5+'%O!MN':OQAV$UECFZOR5FCO(5J8&\"{Q4BGSNP_Z_RTW..NVACR<@UM{C+M*N4\\PMEWZ#8_!,<[]4,(WI;XS9"; 


		System.out.println("Cipher: " + cipher);
		solve(cipher, plaintext, 8);
		
		//System.out.println(ZKDecrypto.calcscore("thisparagraphisunusualfogitsblatantomissionofthatmostcommonglyphthatbindsourconsonantsidonotthinkthatzodiacthoughtofthisbutoddphrasinganduncommonfordinvocattioncouldpossibuyfoologtrickcryptologistsasyoucanplainlydistinguishmynarrationiforgythatzodiacscgyptogrammaynotcontainavauidsolutionandthatzisprobablysittingonarockingchaighavingrlaugh".toUpperCase()));
	}
}
