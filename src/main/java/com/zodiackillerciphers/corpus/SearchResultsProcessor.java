package com.zodiackillerciphers.corpus;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.zodiackillerciphers.io.FileUtil;

/** refine the raw results generated by Search. */
public class SearchResultsProcessor {
	
	public static void process(String resultsFile, String gutenbergPrefix, int minLength, String dirTmp, String dirZodiac) {
		Search.makeUnzipDir(dirTmp+"/unzipped");
		
		List<File> files = Reader.list(dirZodiac);
		Map<String, String> zodiacCorpus = new HashMap<String, String>(); 
		for (File file : files) {
			StringBuffer sb = FileUtil.loadSBFrom(file);
			zodiacCorpus.put(file.getName(), sb.toString());
		}
		
		Map<String, IndexEntry> index = Index.makeIndex("docs/corpus/gutenberg-index.txt");
		
		Map<String, InfoCount> map = new HashMap<String, InfoCount>();
		
		List<String> lines = FileUtil.loadFrom(resultsFile);
		
		int count = 0;
		for (String line : lines) {
			//System.out.println("line: " + line);
			if (line.contains("Substring match: ")) {
				int length = Integer.valueOf(line.split(":")[1].split(",")[0].substring(1));
				if (length < minLength) continue;
				
				String[] split = line.split(",");
				String fileName = split[1].substring(1);
				if (fileName.contains("/Gutenberg SF")) continue;
				String substring = split[2].substring(1);
				
				//System.out.println("filename " + fileName + " substring " + substring);
				
				InfoCount val = map.get(substring);
				if (val == null) val = new InfoCount();
				val.substring = substring;
				val.fileNames.add(fileName);
				val.count++;
				map.put(substring, val);
			}
			count++;
			if (count % 1000 == 0) System.out.println("Processed " + count + " lines of " + lines.size());
		}
		System.out.println("Map size: " + map.size());

		/*
		for (String key : map.keySet()) {
			InfoCount val = map.get(key);
			if (val.substring.length() >= 20) {
				System.out.println(val);
				for (String file : val.fileNames) System.out.println(" - " + file);
			}
		}*/
		
		System.out.println("Post-processing...");
		List<InfoCount> list = new ArrayList<InfoCount>(map.values());
		List<InfoCount> processed = Processor.postProcess(list); 
		
		Processor.dump2(processed, dirTmp, zodiacCorpus, index, gutenbergPrefix, true); 
		
		
	}
	
	public static void checkIndex(String resultsFile, String gutenbergPrefix) {
		
		Map<String, IndexEntry> index = Index.makeIndex("docs/corpus/gutenberg-index.txt");
	
		List<String> lines = FileUtil.loadFrom(resultsFile);
		
		int count = 0;
		for (String line : lines) {
			//System.out.println("line: " + line);
			if (line.contains("Substring match: ")) {
				int length = Integer.valueOf(line.split(":")[1].split(",")[0].substring(1));
				
				String[] split = line.split(",");
				String fileName = split[1].substring(1);
				String substring = split[2].substring(1);
				String[] bib = Processor.infoFrom(fileName, index, gutenbergPrefix);
				System.out.println(fileName + ", " + bib[0] + ", " + bib[1]);
			}
			count++;
			if (count % 1000 == 0) System.out.println("Processed " + count + " lines of " + lines.size());
		}

		
		
	}

	
	public static void main(String[] args) {
		process(args[0], args[1], Integer.valueOf(args[2]), args[3], args[4]);
		//checkIndex(args[0], args[1]);
	}
	
}
