package com.zodiackillerciphers.ciphers.w168.stenciltest;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import com.zodiackillerciphers.ciphers.w168.W168;

/** try to see if the top scoring stencils tend to have high scoring ngrams in certain
 * areas of the cipher grid.  
 */
public class HotSpots {
	
	/** result:
	  
		Raw hotspots
		[1.08928667125E8, 1.098926855625E8, 1.127829999375E8, 1.18141071875E8, 1.09552754375E8, 7.07091539375E7, 1.051983863125E8, 1.21922722125E8, 1.089603075E8, 1.015262526875E8, 1.057158798125E8, 1.254758925E8, 1.344616245E8, 1.35826398E8, 1.2967612E8, 1.4335282975E8, 1.466144895E8, 1.452893493125E8, 1.3887323575E8, 1.343244619375E8, 1.3710703225E8, 1.245861231875E8, 1.204289931875E8, 1.11726559125E8, 1.070093349375E8, 9.38800550625E7, 1.063975031875E8, 1.15011484875E8]
		[1.35129960375E8, 1.28232874E8, 1.201478173125E8, 1.14540049875E8, 1.354128470625E8, 1.310266206875E8, 1.332147685625E8, 1.3294600925E8, 1.250317100625E8, 1.373962150625E8, 1.321175385625E8, 1.344141978125E8, 1.2856964875E8, 1.429701434375E8, 1.21514439875E8, 1.292433865E8, 1.3187217225E8, 1.328170329375E8, 1.378308744375E8, 1.270424645625E8, 1.21041228875E8, 1.268948813125E8, 1.29976335625E8, 1.201824865E8, 1.347859204375E8, 1.4089754375E8, 1.447847826875E8, 1.362251815625E8]
		[1.220377124375E8, 1.223538925E8, 1.32099983125E8, 1.334440314375E8, 1.2228312425E8, 1.201365018125E8, 1.1962403125E8, 1.260704764375E8, 1.317469101875E8, 1.178206146875E8, 9.90703376875E7, 9.49254881875E7, 9.6976015875E7, 1.02354624E8, 1.020738643125E8, 1.001131971875E8, 1.09118182E8, 1.04823153E8, 1.053988461875E8, 1.043399149375E8, 1.043887455E8, 8.65699289375E7, 1.035747639375E8, 1.00449472125E8, 1.076682524375E8, 1.1142279575E8, 1.10137719875E8, 1.140105078125E8]
		[9.7366577125E7, 9.82170708125E7, 1.060700991875E8, 1.194562156875E8, 1.156579695E8, 1.092039314375E8, 1.129961284375E8, 9.4563004875E7, 6.4828007375E7, 7.05940870625E7, 7.11245521875E7, 8.08299951875E7, 7.79103996875E7, 6.8003925625E7, 8.46962703125E7, 1.040968965625E8, 1.11133731125E8, 9.64976180625E7, 9.84021371875E7, 9.31380225625E7, 9.240216225E7, 8.10738705E7, 7.69597351875E7, 7.7858735625E7, 6.9480696875E7, 5.6806946E7, 7.8859806E7, 9.16457353125E7]
		[9.885911725E7, 1.02116184875E8, 9.55051455625E7, 9.84000099375E7, 9.10450469375E7, 9.66634119375E7, 9.5618413375E7, 8.85704338125E7, 9.1053133375E7, 9.94763791875E7, 1.076902548125E8, 1.00618876375E8, 1.0089101575E8, 1.22307355E8, 1.185041096875E8, 1.236076369375E8, 1.23312095375E8, 1.2958278725E8, 1.178885149375E8, 1.108706461875E8, 9.1860636625E7, 9.27775580625E7, 9.44866251875E7, 9.0636418E7, 9.26921586875E7, 9.765477475E7, 9.025550425E7, 1.043618576875E8]
		[6.00308250625E7, 8.7738237125E7, 1.015726501875E8, 8.9129988375E7, 9.49068139375E7, 1.022334565625E8, 1.130675271875E8, 1.20225336125E8, 1.24811713375E8, 1.18867787875E8, 1.185609901875E8, 1.32960418875E8, 1.300397318125E8, 1.4725724325E8, 1.4196923625E8, 1.21307924375E8, 1.166851946875E8, 1.21941844625E8, 1.131034783125E8, 1.021917511875E8, 6.74274794375E7, 1.03339415125E8, 1.01879140875E8, 8.5342105875E7, 8.36980763125E7, 9.74841576875E7, 8.9653422625E7, 8.81635455E7]
		Normalized hotspots
		[0.576247096025989, 0.5869050868431502, 0.6188598118454497, 0.6780975600939775, 0.5831468771099035, 0.15369996959849683, 0.5350058737645552, 0.7199067123574323, 0.5765969055452718, 0.49440751492389373, 0.540727176134294, 0.7591898378200189, 0.8585342542917956, 0.8736229111729094, 0.8056266946098952, 0.9568336023351212, 0.9928938459071786, 0.9782433668287365, 0.9073081266186773, 0.8570178130343292, 0.8877813417025558, 0.7493527301536868, 0.703392350515465, 0.6071800181397414, 0.5550273516375868, 0.409872716725649, 0.5482630648568709, 0.6434974858526515]
		[0.8659232391300958, 0.7896704618071335, 0.7002837275087009, 0.6382853968453929, 0.8690507765302009, 0.8205575541931124, 0.8447492698814763, 0.8417779218519926, 0.754279047573832, 0.8909784877738476, 0.8326185192553361, 0.8580099145279481, 0.7933937746124986, 0.9526027006782446, 0.7153928272469, 0.8008424814767539, 0.8299057994527487, 0.8403519861014055, 0.8957839929873752, 0.776509538364176, 0.7101611031466234, 0.7748778881155086, 0.8089458172012807, 0.7006670229599494, 0.862119603896603, 0.9296884621349324, 0.9726649813469795, 0.8780317807358007]
		[0.7211780217505034, 0.7246736439000481, 0.8324244299263484, 0.8472839533703136, 0.7238912445917915, 0.7001586256533834, 0.6944928558540475, 0.7657634363108741, 0.8285209276910365, 0.6745546509245993, 0.46725542062826114, 0.4214308116881285, 0.44410102671055623, 0.5035658188508607, 0.5004617971280354, 0.4787850621187428, 0.5783423337505947, 0.530857370952421, 0.537222117172202, 0.5255147896984937, 0.5260546504174147, 0.32905345634450084, 0.5170554366254446, 0.48250284909926044, 0.5623122088468316, 0.6038216723494516, 0.5896141361215924, 0.6324308880311612]
		[0.44841899206693875, 0.4578218764504945, 0.5446433531482949, 0.6926375212934969, 0.65064488773695, 0.579290362005969, 0.6212161169818599, 0.41742327027012616, 0.08867921520291079, 0.15242781374607367, 0.15829252775064817, 0.2655939219425838, 0.23331547080681375, 0.12379151827497173, 0.308338669528253, 0.5228280282130305, 0.6006258329350045, 0.4388119582713699, 0.4598679324682927, 0.40166895706359884, 0.3935334358450657, 0.26829015755390456, 0.22280511839335054, 0.23274428349100865, 0.140118399389782, 0.0, 0.24381191295642757, 0.3851705342239768]
		[0.4649202106408777, 0.500929684617482, 0.42783938515470166, 0.4598444140270639, 0.37852944631975766, 0.4406449414681166, 0.42909165093982043, 0.3511706293756818, 0.3786188483200369, 0.471744532464762, 0.5625554626079463, 0.4843757478641122, 0.48738446517377254, 0.7241591348114669, 0.6821112319506502, 0.7385347861584833, 0.7352673390468045, 0.8045948268014121, 0.675305342211023, 0.5977172196357818, 0.3875464392130563, 0.39768373522398787, 0.4165788320557454, 0.37401172830308194, 0.39673957718806724, 0.4516052461065848, 0.3698004237349259, 0.5257573842577947]
		[0.03564254801274299, 0.34197003288455197, 0.4949204762010884, 0.3573569502559042, 0.42122435299680566, 0.5022262164262815, 0.6220054869692537, 0.7011407596562652, 0.7518468091601546, 0.6861319836624418, 0.6827400911333102, 0.8419372317209273, 0.8096467124932527, 1.0, 0.9415368753804731, 0.7131096340869129, 0.6620016794638007, 0.720118126809141, 0.6224029552594975, 0.5017651303241019, 0.1174184470410903, 0.5144534682554622, 0.4983089746009652, 0.31547889551020797, 0.29730284067695534, 0.44971893873460983, 0.3631439323434617, 0.34667215535325396]
	   
	 **/
	public static double[][] HOTSPOTS = new double[][] {
			{ 0.576247096025989, 0.5869050868431502, 0.6188598118454497, 0.6780975600939775, 0.5831468771099035,
					0.15369996959849683, 0.5350058737645552, 0.7199067123574323, 0.5765969055452718,
					0.49440751492389373, 0.540727176134294, 0.7591898378200189, 0.8585342542917956, 0.8736229111729094,
					0.8056266946098952, 0.9568336023351212, 0.9928938459071786, 0.9782433668287365, 0.9073081266186773,
					0.8570178130343292, 0.8877813417025558, 0.7493527301536868, 0.703392350515465, 0.6071800181397414,
					0.5550273516375868, 0.409872716725649, 0.5482630648568709, 0.6434974858526515 },
			{ 0.8659232391300958, 0.7896704618071335, 0.7002837275087009, 0.6382853968453929, 0.8690507765302009,
					0.8205575541931124, 0.8447492698814763, 0.8417779218519926, 0.754279047573832, 0.8909784877738476,
					0.8326185192553361, 0.8580099145279481, 0.7933937746124986, 0.9526027006782446, 0.7153928272469,
					0.8008424814767539, 0.8299057994527487, 0.8403519861014055, 0.8957839929873752, 0.776509538364176,
					0.7101611031466234, 0.7748778881155086, 0.8089458172012807, 0.7006670229599494, 0.862119603896603,
					0.9296884621349324, 0.9726649813469795, 0.8780317807358007 },
			{ 0.7211780217505034, 0.7246736439000481, 0.8324244299263484, 0.8472839533703136, 0.7238912445917915,
					0.7001586256533834, 0.6944928558540475, 0.7657634363108741, 0.8285209276910365, 0.6745546509245993,
					0.46725542062826114, 0.4214308116881285, 0.44410102671055623, 0.5035658188508607,
					0.5004617971280354, 0.4787850621187428, 0.5783423337505947, 0.530857370952421, 0.537222117172202,
					0.5255147896984937, 0.5260546504174147, 0.32905345634450084, 0.5170554366254446,
					0.48250284909926044, 0.5623122088468316, 0.6038216723494516, 0.5896141361215924,
					0.6324308880311612 },
			{ 0.44841899206693875, 0.4578218764504945, 0.5446433531482949, 0.6926375212934969, 0.65064488773695,
					0.579290362005969, 0.6212161169818599, 0.41742327027012616, 0.08867921520291079,
					0.15242781374607367, 0.15829252775064817, 0.2655939219425838, 0.23331547080681375,
					0.12379151827497173, 0.308338669528253, 0.5228280282130305, 0.6006258329350045, 0.4388119582713699,
					0.4598679324682927, 0.40166895706359884, 0.3935334358450657, 0.26829015755390456,
					0.22280511839335054, 0.23274428349100865, 0.140118399389782, 0.0, 0.24381191295642757,
					0.3851705342239768 },
			{ 0.4649202106408777, 0.500929684617482, 0.42783938515470166, 0.4598444140270639, 0.37852944631975766,
					0.4406449414681166, 0.42909165093982043, 0.3511706293756818, 0.3786188483200369, 0.471744532464762,
					0.5625554626079463, 0.4843757478641122, 0.48738446517377254, 0.7241591348114669, 0.6821112319506502,
					0.7385347861584833, 0.7352673390468045, 0.8045948268014121, 0.675305342211023, 0.5977172196357818,
					0.3875464392130563, 0.39768373522398787, 0.4165788320557454, 0.37401172830308194,
					0.39673957718806724, 0.4516052461065848, 0.3698004237349259, 0.5257573842577947 },
			{ 0.03564254801274299, 0.34197003288455197, 0.4949204762010884, 0.3573569502559042, 0.42122435299680566,
					0.5022262164262815, 0.6220054869692537, 0.7011407596562652, 0.7518468091601546, 0.6861319836624418,
					0.6827400911333102, 0.8419372317209273, 0.8096467124932527, 1.0, 0.9415368753804731,
					0.7131096340869129, 0.6620016794638007, 0.720118126809141, 0.6224029552594975, 0.5017651303241019,
					0.1174184470410903, 0.5144534682554622, 0.4983089746009652, 0.31547889551020797,
					0.29730284067695534, 0.44971893873460983, 0.3631439323434617, 0.34667215535325396 }, };
	
	public static void search(String path) {
		Set<String> seen = new HashSet<String>(); // track unique hole patterns
		BufferedReader input = null;
		
		double[][] hotspots = new double[6][28];
		for (int row=0; row<6; row++) hotspots[row] = new double[28];
		
		try {
			input = new BufferedReader(
			           new InputStreamReader(new FileInputStream(path), "UTF-8"));
			
			String line = null; // not declared within while loop
			int count = 0;
			while ((line = input.readLine()) != null) {
				if (line.contains("BEST")) {
					count++;
					if (count % 10000 == 0)
						System.out.println(count+"...");
					String pattern = pattern(line);
					int[] holes = holes(line);
					float zkscore = zkscore(line);
					if (seen.contains(pattern)) continue;
					seen.add(pattern);
					
					Stencil st = new Stencil(7, W168.cipherBuilder, 2, 7);
					st.holes = holes;
					
					// need to scan and generate all the ngrams.
					// for each ngram, determine its positions {p1, p2, ...}
					// compute zkscore for the ngram
					// add that score to the corresponding (row,col) in the hotspots grid
					//st.successAction(false);
					//dump(st.hotspots);
					for (int row=0; row<st.hotspots.length; row++) {
						for (int col=0; col<st.hotspots[0].length; col++) {
							hotspots[row][col] += st.hotspots[row][col];
						}
					}
					
					//System.out.println(pattern + ", " + Arrays.toString(holes) + ", " + zkscore);
				}
			}
			//System.out.println("read " + counter + " lines.");
		} catch (FileNotFoundException ex) {
			ex.printStackTrace();
		} catch (IOException ex) {
			ex.printStackTrace();
		} 
		
		try {
			input.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		// output the grid
		System.out.println("Raw hotspots");
		dump(hotspots);		
		// normalize the grid based on min/max values and output the grid
		double max = Double.MIN_VALUE;
		double min = Double.MAX_VALUE;
		for (double[] row : hotspots) {
			for (double val : row) {
				max = Math.max(max, val);
				min = Math.min(min, val);
			}
		}
		System.out.println("Normalized hotspots");
		for (int row=0; row<hotspots.length; row++) {
			for (int col=0; col<hotspots[0].length; col++) {
				hotspots[row][col] = (hotspots[row][col] - min) / (max - min);
			}
		}
		dump(hotspots);		
			
		
	}
	public static void dump(double[][] arr) {
		for (double[] row : arr) {
			System.out.println(Arrays.toString(row));
		}
	}
	
	public static String pattern(String line) {
		int pos = line.indexOf("Pattern:  ");
		pos = pos + 10;
		return line.substring(pos).replaceAll(" ", "");
	}
	
	public static int[] holes(String line) {
		int pos1 = line.indexOf("HOLES: ");
		int pos2 = line.indexOf(" Pattern:");
		pos1 += 7; 
		String holesStr = line.substring(pos1, pos2);
		String[] split = holesStr.split(" ");
		int[] holes = new int[split.length/2];
		for (int i=0; i<split.length; i+=2) {
			holes[i/2] = Integer.valueOf(split[i]);
		}
		return holes;
	}
	public static float zkscore(String line) {
		return Float.valueOf(line.substring(0, line.indexOf(" ")));
	}
	
	public static void html() {
		String html = "<table>";
		for (var row=0; row<HOTSPOTS.length; row++) {
			html += "<tr>";
			for (var col=0; col<HOTSPOTS[0].length; col++) {
				html += "<td style=\"background-color:" + rgb(0, 1, HOTSPOTS[row][col]) + "\"></td>";
			}
			html += "</tr>";
		}
		html += "</table>";
		System.out.println(html);
	}

	public static String rgb(double minimum, double maximum, double value) {
		double ratio = 2 * (value - minimum) / (maximum - minimum);
		double b = Math.max(0, 255 * (1 - ratio));
		double r = Math.max(0, 255 * (ratio - 1));
		double g = 255 - b - r;
		return "rgb(" + (int) r + "," + (int) g + "," + (int) b + ")";
	}
	
	public static void main(String[] args) {
//		Stencil.init();
//		search("/Users/doranchak/projects/ciphers/W168/more_enumerations/stencil-test-7gram-(2,7)-results.txt");
		html();
	}
}
