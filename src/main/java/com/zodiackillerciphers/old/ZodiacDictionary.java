package com.zodiackillerciphers.old;
import java.util.*;
import java.io.*;

import gnu.trove.*;
import java.text.*;

import com.zodiackillerciphers.old.decrypto.*;

public class ZodiacDictionary {

	/* root dir of the zodiac project */
	public static final String ZODIAC_ROOT = "/Users/doranchak/projects/work/java/zodiac";
	
	/* frequency counts from bigass book collection; top 90% only (used to count bad ngrams) */
	public static THashSet[] frequencies;
	
	/* from decrypto.EnglishLanguage */
	static final double unknownLetterPenalty = -10;
	/* static copy of EnglishLanguage instance, b/c we don't need to keep re-initiazing it */
	static final EnglishLanguage englishLanguage = new EnglishLanguage(); 
	
	/* database of words indexed by constraints */
	public static THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> wordConstraintDatabase;
	/* database of words indexed by constraints, for prefixes (using min length) */
	public static THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> wordConstraintPrefixDatabase;
	/* database of words indexed by constraints, for suffixes (using min length) */
	public static THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> wordConstraintSuffixDatabase;
	/* max word length found in the database */
	public static int wordConstraintDatabaseMaxLength;
	/* copy of the word pool we used for our dictionary, indexed by word length */
	public static THashMap<Integer, THashSet<String>> wordLengthDatabase;
	/* isWord lookups for smaller searches, to speed up the isWord recursion for larger chunks.*/ 
	//public static THashMap<Integer, THashMap<String, Boolean>> isWordHash;
	public static Object[] isWordHash; // an array of variable-length boolean arrays indexed by character
	/* if false, then do not use the isWordHash */
	public static boolean USE_ISWORDHASH = true;
	/* max len of words to generate hashes for (so far, we are only hard-coded up to a max len of 5) */
	public static final int ISWORDHASH_MAX_LEN = 5;
	
	/* english dictionary file */
	private static String dictFile = "/Users/doranchak/projects/work/java/zodiac/spellcheckers/jazzy/dict/english.0";
	private static String dict3LetterFile = "/Users/doranchak/projects/work/java/zodiac/letters/english-3-letter-words.txt";
	private static String dict4LetterFile = "/Users/doranchak/projects/work/java/zodiac/letters/english-4-letter-words.txt";
	
	/*
	public  static THashSet<String> dictionary = null;
	public  static THashSet<String> dictionaryZodiac = null;
	public  static THashSet<String> dictionaryInteresting = null;
	
	public  static THashSet<String> dictionaryTop100 = null;
	public  static THashSet<String> dictionaryCommon1000 = null;
	public  static THashSet<String> dictionaryCommon5000 = null;
	public	static THashSet<String> dictionaryZodiacTopWordsSMEG = null;
	public  static THashSet<String> dictionaryZodiacWordsPaired = null;
	*/
	
	/** All dictionaries */
	public static THashMap<String, THashSet<String>> dictionaries = null;
	/** simple keys to index each dictionary */
	public static final String D_BIG = "big";
	public static final String D_ZODIAC = "zod";
	public static final String D_INTERESTING = "int";
	public static final String D_TOP_100 = "100";
	public static final String D_COMMON_1000 = "1000";
	public static final String D_COMMON_5000 = "5000";
	public static final String D_TOP_WORDS_SMEG = "smeg";
	public static final String D_PAIRED = "pair";
	public static final String D_ONE_LETTER = "one";
	public static final String D_TWO_LETTER = "two";
	public static final String D_THREE_LETTER = "three";
	public static final String D_FOUR_LETTER = "four";
	
	
	/* the top 1000 common words */
	public static final String[] commonWords1000 = {
		"the", "name", "of", "very", "to", "through", "and", "just", "a", "form", "in", "sentence", "is", "great", "it", 
		"think", "you", "say", "that", "help", "he", "low", "was", "line", "for", "differ", "on", "turn", "are", "cause", 
		"with", "much", "as", "mean", "I", "before", "his", "move", "they", "right", "be", "boy", "at", "old", "one", 
		"too", "have", "same", "this", "tell", "from", "does", "or", "set", "had", "three", "by", "want", "hot", "air", 
		"word", "well", "but", "also", "what", "play", "some", "small", "we", "end", "can", "put", "out", "home", "other", 
		"read", "were", "hand", "all", "port", "there", "large", "when", "spell", "up", "add", "use", "even", "your", 
		"land", "how", "here", "said", "must", "an", "big", "each", "high", "she", "such", "which", "follow", "do", "act", 
		"their", "why", "time", "ask", "if", "men", "will", "change", "way", "went", "about", "light", "many", "kind", 
		"then", "off", "them", "need", "write", "house", "would", "picture", "like", "try", "so", "us", "these", "again", 
		"her", "animal", "long", "point", "make", "mother", "thing", "world", "see", "near", "him", "build", "two", "self", 
		"has", "earth", "look", "father", "more", "head", "day", "stand", "could", "own", "go", "page", "come", "should", 
		"did", "country", "number", "found", "sound", "answer", "no", "school", "most", "grow", "people", "study", "my", 
		"still", "over", "learn", "know", "plant", "water", "cover", "than", "food", "call", "sun", "first", "four", "who", 
		"between", "may", "state", "down", "keep", "side", "eye", "been", "never", "now", "last", "find", "let", "any",
		"thought", "new", "city", "work", "tree", "part", "cross", "take", "farm", "get", "hard", "place", "start", "made", 
		"might", "live", "story", "where", "saw", "after", "far", "back", "sea", "little", "draw", "only", "left", "round",
		"late", "man", "run", "year", "don't", "came", "while", "show", "press", "every", "close", "good", "night", "me", 
		"real", "give", "life", "our", "few", "under", "north", "open", "ten", "seem", "simple", "together", "several", 
		"next", "vowel", "white", "toward", "children", "war", "begin", "lay", "got", "against", "walk", "pattern", 
		"example", "slow", "ease", "center", "paper", "love", "group", "person", "always", "money", "music", "serve", 
		"those", "appear", "both", "road", "mark", "map", "often", "rain", "letter", "rule", "until", "govern", "mile", 
		"pull", "river", "cold", "car", "notice", "feet", "voice", "care", "unit", "second", "power", "book", "town", 
		"carry", "fine", "took", "certain", "science", "fly", "eat", "fall", "room", "lead", "friend", "cry", "began", 
		"dark", "idea", "machine", "fish", "note", "mountain", "wait", "stop", "plan", "once", "figure", "base", "star", 
		"hear", "box", "horse", "noun", "cut", "field", "sure", "rest", "watch", "correct", "color", "able", "face", 
		"pound", "wood", "done", "main", "beauty", "enough", "drive", "plain", "stood", "girl", "contain", "usual", 
		"front", "young", "teach", "ready", "week", "above", "final", "ever", "gave", "red", "green", "list", "oh", 
		"though", "quick", "feel", "develop", "talk", "ocean", "bird", "warm", "soon", "free", "body", "minute", 
		"dog", "strong", "family", "special", "direct", "mind", "pose", "behind", "leave", "clear", "song", "tail", 
		"measure", "produce", "door", "fact", "product", "street", "black", "inch", "short", "multiply", "numeral", 
		"nothing", "class", "course", "wind", "stay", "question", "wheel", "happen", "full", "complete", "force", 
		"ship", "blue", "area", "object", "half", "decide", "rock", "surface", "order", "deep", "fire", "moon", 
		"south", "island", "problem", "foot", "piece", "system", "told", "busy", "knew", "test", "pass", "record", 
		"since", "boat", "top", "common", "whole", "gold", "king", "possible", "space", "plane", "heard", "stead", 
		"best", "dry", "hour", "wonder", "better", "laugh", "true", "thousand", "during", "ago", "hundred", "ran", 
		"five", "check", "remember", "game", "step", "shape", "early", "equate", "hold", "hot", "west", "miss", "ground", 
		"brought", "interest", "heat", "reach", "snow", "fast", "tire", "verb", "bring", "sing", "yes", "listen", 
		"distant", "six", "fill", "table", "east", "travel", "paint", "less", "language", "morning", "among", "grand", 
		"cat", "ball", "century", "yet", "consider", "wave", "type", "drop", "law", "heart", "bit", "am", "coast", 
		"present", "copy", "heavy", "phrase", "dance", "silent", "engine", "tall", "position", "sand", "arm", "soil", 
		"wide", "roll", "sail", "temperature", "material", "finger", "size", "industry", "vary", "value", "settle", 
		"fight", "speak", "lie", "weight", "beat", "general", "excite", "ice", "natural", "matter", "view", "circle",
		"sense", "pair", "ear", "include", "else", "divide", "quite", "syllable", "broke", "felt", "case", "perhaps", 
		"middle", "pick", "kill", "sudden", "son", "count", "lake", "square", "moment", "reason", "scale", "length",
		"loud", "represent", "spring", "art", "observe", "subject", "child", "region", "straight", "energy", "consonant",
		"hunt", "nation", "probable", "dictionary", "bed", "milk", "brother", "speed", "egg", "method", "ride", "organ", 
		"cell", "pay", "believe", "age", "fraction", "section", "forest", "dress", "sit", "cloud", "race", "surprise", 
		"window", "quiet", "store", "stone", "summer", "tiny", "train", "climb", "sleep", "cool", "prove", "design", 
		"lone", "poor", "leg", "lot", "exercise", "experiment", "wall", "bottom", "catch", "key", "mount", "iron", "wish", 
		"single", "sky", "stick", "board", "flat", "joy", "twenty", "winter", "skin", "sat", "smile", "written", 
		"crease", "wild", "hole", "instrument", "trade", "kept", "melody", "glass", "trip", "grass", "office", "cow", 
		"receive", "job", "row", "edge", "mouth", "sign", "exact", "visit", "symbol", "past", "die", "soft", "least", 
		"fun", "trouble", "bright", "shout", "gas", "except", "weather", "wrote", "month", "seed", "million", "tone", 
		"bear", "join", "finish", "suggest", "happy", "clean", "hope", "break", "flower", "lady", "clothe", "yard", 
		"strange", "rise", "gone", "bad", "jump", "blow", "baby", "oil", "eight", "blood", "village", "touch", "meet",
		"grew", "root", "cent", "buy", "mix", "raise", "team", "solve", "wire", "metal", "cost", "whether", "lost", 
		"push", "brown", "seven", "wear", "paragraph", "garden", "third", "equal", "shall", "sent", "held", "choose", 
		"hair", "fell", "describe", "fit", "cook", "flow", "floor", "fair", "either", "bank", "result", "collect", 
		"burn", "save", "hill", "control", "safe", "decimal", "gentle", "truck", "woman", "noise", "captain", "level", 
		"practice", "chance", "separate", "gather", "difficult", "shop", "doctor", "stretch", "please", "throw", 
		"protect", "shine", "noon", "property", "whose", "column", "locate", "molecule", "ring", "select", "character", 
		"wrong", "insect", "gray", "caught", "repeat", "period", "require", "indicate", "broad", "radio", "prepare", 
		"spoke", "salt", "atom", "nose", "human", "plural", "history", "anger", "effect", "claim", "electric", 
		"continent", "expect", "oxygen", "crop", "sugar", "modern", "death", "element", "pretty", "hit", "skill", 
		"student", "women", "corner", "season", "party", "solution", "supply", "magnet", "bone", "silver", "rail", 
		"thank", "imagine", "branch", "provide", "match", "agree", "suffix", "thus", "especially", "capital", "fig",
		"won't", "afraid", "chair", "huge", "danger", "sister", "fruit", "steel", "rich", "discuss", "thick", "forward", 
		"soldier", "similar", "process", "guide", "operate", "experience", "guess", "score", "necessary", "apple", 
		"sharp", "bought", "wing", "led", "create", "pitch", "neighbor", "coat", "wash", "mass", "bat", "card", "rather",
		"band", "crowd", "rope", "corn", "slip", "compare", "win", "poem", "dream", "string", "evening", "bell", 
		"condition", "depend", "feed", "meat", "tool", "rub", "total", "tube", "basic", "famous", "smell", "dollar", 
		"valley", "stream", "nor", "fear", "double", "sight", "seat", "thin", "arrive", "triangle", "master", "planet", 
		"track", "hurry", "parent", "chief", "shore", "colony", "division", "clock", "sheet", "mine", "substance", 
		"tie", "favor", "enter", "connect", "major", "post", "fresh", "spend", "search", "chord", "send", "fat", 
		"yellow", "glad", "gun", "original", "allow", "share", "print", "station", "dead", "dad", "spot", "bread", 
		"desert", "charge", "suit", "proper", "current", "bar", "lift", "offer", "rose", "segment", "continue", 
		"slave", "block", "duck", "chart", "instant", "hat", "market", "sell", "degree", "success", "populate", 
		"company", "chick", "subtract", "dear", "event", "enemy", "particular", "reply", "deal", "drink", "swim", 
		"occur", "term", "support", "opposite", "speech", "wife", "nature", "shoe", "range", "shoulder", "steam", 
		"spread", "motion", "arrange", "path", "camp", "liquid", "invent", "log", "cotton", "meant", "born", 
		"quotient", "determine", "teeth", "quart", "shell", "nine", "neck" 
	};
	
	/* top 5000 common words (from the "Brown Corpus") */
	public static final String[] commonWords5000 = {
		"a"/*,
		"abandoned",
		"abel",
		"ability",
		"able",
		"aboard",
		"about",
		"above",
		"abroad",
		"absence",
		"absent",
		"absolute",
		"absolutely",
		"absorbed",
		"abstract",
		"academic",
		"academy",
		"accept",
		"acceptable",
		"acceptance",
		"accepted",
		"accepting",
		"access",
		"accident",
		"accompanied",
		"accomplish",
		"accomplished",
		"accordance",
		"according",
		"accordingly",
		"account",
		"accounts",
		"accuracy",
		"accurate",
		"accurately",
		"accused",
		"achieve",
		"achieved",
		"achievement",
		"achievements",
		"acquire",
		"acquired",
		"acres",
		"across",
		"act",
		"acting",
		"action",
		"actions",
		"active",
		"activities",
		"activity",
		"actor",
		"acts",
		"actual",
		"actually",
		"ad",
		"adam",
		"adams",
		"add",
		"added",
		"adding",
		"addition",
		"additional",
		"address",
		"addressed",
		"addresses",
		"adequate",
		"adjusted",
		"adjustment",
		"adjustments",
		"administration",
		"administrative",
		"admission",
		"admit",
		"admitted",
		"adopted",
		"adult",
		"adults",
		"advance",
		"advanced",
		"advantage",
		"advantages",
		"advertising",
		"advice",
		"advised",
		"advisory",
		"aesthetic",
		"affair",
		"affairs",
		"affect",
		"affected",
		"affects",
		"afford",
		"afraid",
		"africa",
		"african",
		"after",
		"afternoon",
		"again",
		"against",
		"age",
		"agencies",
		"agency",
		"agent",
		"agents",
		"ages",
		"ago",
		"agree",
		"agreed",
		"agreement",
		"agricultural",
		"agriculture",
		"ah",
		"ahead",
		"aid",
		"aids",
		"aim",
		"aimed",
		"aint",
		"air",
		"aircraft",
		"airport",
		"al",
		"alabama",
		"alaska",
		"albert",
		"alec",
		"alert",
		"alex",
		"alexander",
		"alfred",
		"alienation",
		"alike",
		"alive",
		"all",
		"allen",
		"alliance",
		"allied",
		"allies",
		"allotment",
		"allow",
		"allowances",
		"allowed",
		"allowing",
		"allows",
		"almost",
		"alone",
		"along",
		"already",
		"also",
		"altered",
		"alternative",
		"although",
		"altogether",
		"always",
		"am",
		"amateur",
		"amazing",
		"ambassador",
		"ambiguous",
		"amendment",
		"america",
		"american",
		"americans",
		"americas",
		"among",
		"amount",
		"amounts",
		"an",
		"analysis",
		"ancient",
		"and",
		"andy",
		"angeles",
		"angels",
		"anger",
		"angle",
		"anglosaxon",
		"angry",
		"animal",
		"animals",
		"ann",
		"anne",
		"anniversary",
		"announced",
		"announcement",
		"annual",
		"anode",
		"another",
		"answer",
		"answered",
		"answers",
		"anticipated",
		"anticipation",
		"antisemitism",
		"antitrust",
		"anxiety",
		"anxious",
		"any",
		"anybody",
		"anyhow",
		"anyone",
		"anything",
		"anyway",
		"anywhere",
		"apart",
		"apartment",
		"apparatus",
		"apparent",
		"apparently",
		"appeal",
		"appeals",
		"appear",
		"appearance",
		"appeared",
		"appears",
		"application",
		"applications",
		"applied",
		"apply",
		"applying",
		"appointed",
		"appointment",
		"appreciate",
		"appreciation",
		"approach",
		"approached",
		"approaches",
		"approaching",
		"appropriate",
		"approval",
		"approved",
		"approximately",
		"april",
		"arbitrary",
		"arc",
		"architect",
		"are",
		"area",
		"areas",
		"arent",
		"argue",
		"argued",
		"argument",
		"arise",
		"aristotle",
		"arkansas",
		"arlene",
		"arm",
		"armed",
		"arms",
		"army",
		"arnold",
		"around",
		"aroused",
		"arranged",
		"arrangement",
		"arrangements",
		"arrest",
		"arrested",
		"arrival",
		"arrive",
		"arrived",
		"art",
		"artery",
		"arthur",
		"article",
		"articles",
		"artist",
		"artistic",
		"artists",
		"arts",
		"as",
		"asia",
		"aside",
		"ask",
		"asked",
		"asking",
		"asleep",
		"aspect",
		"aspects",
		"assembled",
		"assembly",
		"assessment",
		"assessors",
		"assigned",
		"assignment",
		"assist",
		"assistance",
		"assistant",
		"associate",
		"associated",
		"association",
		"associations",
		"assume",
		"assumed",
		"assumption",
		"assumptions",
		"assure",
		"assured",
		"astronomy",
		"at",
		"atlanta",
		"atlantic",
		"atmosphere",
		"atom",
		"atomic",
		"atoms",
		"attached",
		"attack",
		"attacked",
		"attacks",
		"attain",
		"attempt",
		"attempted",
		"attempting",
		"attempts",
		"attend",
		"attended",
		"attending",
		"attention",
		"attitude",
		"attitudes",
		"attorney",
		"attract",
		"attracted",
		"attractive",
		"audience",
		"aug",
		"august",
		"aunt",
		"authentic",
		"author",
		"authorities",
		"authority",
		"authorized",
		"authors",
		"auto",
		"automatic",
		"automatically",
		"automobile",
		"automobiles",
		"autumn",
		"availability",
		"available",
		"avenue",
		"average",
		"avoid",
		"avoided",
		"awake",
		"award",
		"aware",
		"awareness",
		"away",
		"axis",
		"baby",
		"back",
		"backed",
		"background",
		"backward",
		"bad",
		"badly",
		"bag",
		"baker",
		"balance",
		"balanced",
		"ball",
		"ballet",
		"baltimore",
		"band",
		"bangjensen",
		"bank",
		"banks",
		"bar",
		"bare",
		"barely",
		"barn",
		"barrel",
		"bars",
		"barton",
		"base",
		"baseball",
		"based",
		"basement",
		"bases",
		"basic",
		"basically",
		"basis",
		"bath",
		"battle",
		"bay",
		"bc",
		"bdikkat",
		"be",
		"beach",
		"beam",
		"bear",
		"beard",
		"bearing",
		"bears",
		"beat",
		"beautiful",
		"beauty",
		"became",
		"because",
		"become",
		"becomes",
		"becoming",
		"bed",
		"bedroom",
		"beef",
		"been",
		"beer",
		"before",
		"began",
		"begin",
		"beginning",
		"begins",
		"begun",
		"behalf",
		"behavior",
		"behind",
		"being",
		"beings",
		"belgians",
		"belief",
		"beliefs",
		"believe",
		"believed",
		"believes",
		"belly",
		"belong",
		"belongs",
		"below",
		"belt",
		"ben",
		"bench",
		"bend",
		"beneath",
		"benefit",
		"benefits",
		"bent",
		"berlin",
		"beside",
		"besides",
		"best",
		"bet",
		"better",
		"between",
		"beyond",
		"bible",
		"bid",
		"big",
		"bigger",
		"biggest",
		"bill",
		"billion",
		"bills",
		"billy",
		"binding",
		"binomial",
		"biological",
		"bird",
		"birds",
		"birth",
		"bit",
		"bitter",
		"black",
		"blame",
		"blanche",
		"blanket",
		"blind",
		"block",
		"blocks",
		"blonde",
		"blood",
		"blow",
		"blue",
		"blues",
		"board",
		"boards",
		"boat",
		"boating",
		"boats",
		"bob",
		"bobbie",
		"bobby",
		"bod",
		"bodies",
		"body",
		"bold",
		"bomb",
		"bombers",
		"bombs",
		"bond",
		"bonds",
		"bone",
		"bones",
		"book",
		"books",
		"boots",
		"borden",
		"border",
		"bore",
		"born",
		"boss",
		"boston",
		"both",
		"bother",
		"bottle",
		"bottom",
		"bought",
		"bound",
		"bowl",
		"box",
		"boy",
		"boys",
		"brain",
		"branch",
		"branches",
		"brannon",
		"brave",
		"bread",
		"break",
		"breakfast",
		"breaking",
		"breath",
		"breathing",
		"brick",
		"bride",
		"bridge",
		"bridges",
		"bridget",
		"brief",
		"briefly",
		"bright",
		"brilliant",
		"bring",
		"bringing",
		"brings",
		"britain",
		"british",
		"broad",
		"broadway",
		"broke",
		"broken",
		"bronchial",
		"brooklyn",
		"brother",
		"brothers",
		"brought",
		"brown",
		"browns",
		"brush",
		"brushed",
		"buck",
		"budget",
		"build",
		"builder",
		"builders",
		"building",
		"buildings",
		"built",
		"bullet",
		"bullets",
		"bundle",
		"burden",
		"bureau",
		"burned",
		"burning",
		"burns",
		"burst",
		"bus",
		"business",
		"businesses",
		"busy",
		"but",
		"butter",
		"buy",
		"buying",
		"by",
		"cabin",
		"cady",
		"cafe",
		"calculated",
		"calendar",
		"calif",
		"california",
		"call",
		"called",
		"calling",
		"calls",
		"calm",
		"came",
		"camera",
		"camp",
		"campaign",
		"campus",
		"can",
		"canada",
		"cancer",
		"candidate",
		"candidates",
		"cannot",
		"cant",
		"cap",
		"capabilities",
		"capable",
		"capacity",
		"cape",
		"capital",
		"capitol",
		"captain",
		"car",
		"carbon",
		"card",
		"cards",
		"care",
		"career",
		"careful",
		"carefully",
		"carl",
		"carleton",
		"carolina",
		"carried",
		"carries",
		"carry",
		"carrying",
		"cars",
		"case",
		"cases",
		"casey",
		"cash",
		"cast",
		"castro",
		"casual",
		"cat",
		"catch",
		"categories",
		"category",
		"catholic",
		"catholics",
		"cathy",
		"cattle",
		"caught",
		"cause",
		"caused",
		"causes",
		"cavalry",
		"ceiling",
		"cell",
		"cellar",
		"cells",
		"cent",
		"center",
		"centers",
		"central",
		"cents",
		"centuries",
		"century",
		"certain",
		"certainly",
		"certainty",
		"chain",
		"chair",
		"chairman",
		"chairs",
		"challenge",
		"chamber",
		"champion",
		"chance",
		"chances",
		"chandler",
		"change",
		"changed",
		"changes",
		"changing",
		"channels",
		"chapel",
		"chapter",
		"character",
		"characteristic",
		"characteristics",
		"characterized",
		"characters",
		"charge",
		"charged",
		"charges",
		"charles",
		"charlie",
		"charm",
		"charming",
		"chart",
		"charter",
		"cheap",
		"check",
		"checked",
		"cheek",
		"chemical",
		"chest",
		"chicago",
		"chicken",
		"chief",
		"chiefly",
		"child",
		"childhood",
		"children",
		"childrens",
		"childs",
		"chin",
		"china",
		"chinese",
		"chlorine",
		"choice",
		"cholesterol",
		"choose",
		"chose",
		"chosen",
		"christ",
		"christian",
		"christianity",
		"christmas",
		"christs",
		"church",
		"churches",
		"cigarette",
		"circle",
		"circles",
		"circuit",
		"circular",
		"circumstances",
		"cited",
		"cities",
		"citizen",
		"citizens",
		"city",
		"citys",
		"civic",
		"civil",
		"civilian",
		"civilization",
		"claim",
		"claimed",
		"claims",
		"clarity",
		"clark",
		"class",
		"classes",
		"classic",
		"classical",
		"classification",
		"clay",
		"clayton",
		"clean",
		"cleaning",
		"clear",
		"cleared",
		"clearly",
		"clerk",
		"climate",
		"climbed",
		"clinical",
		"clock",
		"close",
		"closed",
		"closely",
		"closer",
		"closing",
		"cloth",
		"clothes",
		"clothing",
		"cloud",
		"clouds",
		"club",
		"clubs",
		"co",
		"coach",
		"coal",
		"coast",
		"coat",
		"coating",
		"cocktail",
		"code",
		"coffee",
		"cold",
		"colleagues",
		"collected",
		"collection",
		"collective",
		"college",
		"colleges",
		"colonel",
		"colonial",
		"colony",
		"color",
		"colored",
		"colorful",
		"colors",
		"column",
		"columns",
		"combat",
		"combination",
		"combined",
		"come",
		"comedy",
		"comes",
		"comfort",
		"comfortable",
		"coming",
		"command",
		"commander",
		"comment",
		"comments",
		"commerce",
		"commercial",
		"commission",
		"commissioner",
		"committed",
		"committee",
		"commodities",
		"common",
		"commonly",
		"communication",
		"communications",
		"communism",
		"communist",
		"communists",
		"communities",
		"community",
		"companies",
		"companion",
		"company",
		"companys",
		"comparable",
		"compare",
		"compared",
		"comparison",
		"compete",
		"competent",
		"competition",
		"competitive",
		"complained",
		"complement",
		"complete",
		"completed",
		"completely",
		"completion",
		"complex",
		"complicated",
		"component",
		"components",
		"composed",
		"composer",
		"composition",
		"compromise",
		"computed",
		"conceived",
		"concentrated",
		"concentration",
		"concept",
		"conception",
		"concepts",
		"concern",
		"concerned",
		"concerning",
		"concerns",
		"concert",
		"concerts",
		"concluded",
		"conclusion",
		"conclusions",
		"concrete",
		"condemned",
		"condition",
		"conditioned",
		"conditions",
		"conduct",
		"conducted",
		"conductor",
		"conference",
		"conferences",
		"confidence",
		"confirmed",
		"conflict",
		"confronted",
		"confused",
		"confusion",
		"congo",
		"congregation",
		"congress",
		"congressional",
		"congressman",
		"connected",
		"connection",
		"conscience",
		"conscious",
		"consciousness",
		"consequence",
		"consequences",
		"consequently",
		"conservative",
		"consider",
		"considerable",
		"considerably",
		"consideration",
		"considerations",
		"considered",
		"considering",
		"consisted",
		"consistent",
		"consistently",
		"consisting",
		"consists",
		"conspiracy",
		"constant",
		"constantly",
		"constitute",
		"constitution",
		"constitutional",
		"constructed",
		"construction",
		"consumer",
		"contact",
		"contacts",
		"contain",
		"contained",
		"containing",
		"contains",
		"contemporary",
		"content",
		"contest",
		"context",
		"continental",
		"continually",
		"continue",
		"continued",
		"continues",
		"continuing",
		"continuity",
		"continuous",
		"continuously",
		"contract",
		"contracts",
		"contrary",
		"contrast",
		"contribute",
		"contributed",
		"contribution",
		"contributions",
		"control",
		"controlled",
		"controlling",
		"controls",
		"controversy",
		"convenience",
		"convenient",
		"convention",
		"conventional",
		"conversation",
		"conversion",
		"converted",
		"conviction",
		"convictions",
		"convinced",
		"cook",
		"cooking",
		"cool",
		"coolidge",
		"cooling",
		"cooperation",
		"cooperative",
		"cope",
		"copy",
		"core",
		"corn",
		"corner",
		"corporate",
		"corporation",
		"corporations",
		"corps",
		"correct",
		"correspondence",
		"corresponding",
		"cost",
		"costs",
		"cottage",
		"cotton",
		"could",
		"couldnt",
		"council",
		"count",
		"counter",
		"counties",
		"countries",
		"country",
		"county",
		"couple",
		"courage",
		"course",
		"courses",
		"court",
		"courts",
		"cousin",
		"cover",
		"coverage",
		"covered",
		"covering",
		"covers",
		"cow",
		"crack",
		"craft",
		"crash",
		"crawled",
		"crazy",
		"cream",
		"create",
		"created",
		"creating",
		"creation",
		"creative",
		"creatures",
		"credit",
		"crew",
		"cried",
		"crime",
		"criminal",
		"crises",
		"crisis",
		"critic",
		"critical",
		"criticism",
		"critics",
		"cromwell",
		"crop",
		"cross",
		"crossed",
		"crossing",
		"crowd",
		"crowded",
		"crown",
		"crucial",
		"cry",
		"crystal",
		"cuba",
		"cuban",
		"cultural",
		"culture",
		"cup",
		"cure",
		"curiosity",
		"curious",
		"current",
		"currently",
		"curt",
		"curve",
		"customer",
		"customers",
		"cut",
		"cuts",
		"cutting",
		"cycle",
		"daily",
		"dallas",
		"damage",
		"damn",
		"dan",
		"dance",
		"dancer",
		"dancers",
		"dances",
		"dancing",
		"danger",
		"dangerous",
		"dare",
		"dark",
		"darkness",
		"dartmouth",
		"data",
		"date",
		"dates",
		"daughter",
		"dave",
		"david",
		"davis",
		"dawn",
		"day",
		"days",
		"dc",
		"dead",
		"deal",
		"dealer",
		"dealers",
		"dealing",
		"dealt",
		"dean",
		"dear",
		"death",
		"debate",
		"decade",
		"decades",
		"december",
		"decent",
		"decide",
		"decided",
		"decision",
		"decisions",
		"deck",
		"declaration",
		"declared",
		"decline",
		"dedicated",
		"dedication",
		"deegan",
		"deep",
		"deeper",
		"deeply",
		"defeat",
		"defend",
		"defense",
		"define",
		"defined",
		"definite",
		"definitely",
		"definition",
		"degree",
		"degrees",
		"delaware",
		"delay",
		"delayed",
		"deliberately",
		"delicate",
		"delight",
		"delightful",
		"delivered",
		"delivery",
		"demand",
		"demanded",
		"demanding",
		"demands",
		"democracy",
		"democratic",
		"democrats",
		"demonstrate",
		"demonstrated",
		"demonstration",
		"denied",
		"density",
		"deny",
		"department",
		"departments",
		"depend",
		"dependent",
		"depending",
		"depends",
		"depression",
		"depth",
		"derived",
		"describe",
		"described",
		"describes",
		"description",
		"desegregation",
		"desert",
		"design",
		"designed",
		"designs",
		"desirable",
		"desire",
		"desired",
		"desires",
		"desk",
		"despair",
		"desperate",
		"desperately",
		"despite",
		"destiny",
		"destroy",
		"destroyed",
		"destruction",
		"destructive",
		"detail",
		"detailed",
		"details",
		"detective",
		"detergent",
		"determination",
		"determine",
		"determined",
		"determining",
		"detroit",
		"develop",
		"developed",
		"developing",
		"development",
		"developments",
		"device",
		"devices",
		"devil",
		"devoted",
		"di",
		"diameter",
		"dictionary",
		"did",
		"didnt",
		"die",
		"died",
		"diet",
		"difference",
		"differences",
		"different",
		"difficult",
		"difficulties",
		"difficulty",
		"diffusion",
		"dignity",
		"dilemma",
		"dimensions",
		"dining",
		"dinner",
		"diplomatic",
		"direct",
		"directed",
		"direction",
		"directions",
		"directly",
		"director",
		"directors",
		"dirt",
		"dirty",
		"disappeared",
		"disaster",
		"discharge",
		"discipline",
		"discover",
		"discovered",
		"discovery",
		"discrimination",
		"discuss",
		"discussed",
		"discussion",
		"discussions",
		"disease",
		"dishes",
		"disk",
		"displacement",
		"display",
		"displayed",
		"displays",
		"disposal",
		"dispute",
		"distance",
		"distant",
		"distinct",
		"distinction",
		"distinctive",
		"distinguished",
		"distributed",
		"distribution",
		"district",
		"districts",
		"disturbed",
		"dive",
		"divided",
		"divine",
		"division",
		"divorce",
		"do",
		"doc",
		"doctor",
		"doctors",
		"doctrine",
		"documents",
		"does",
		"doesnt",
		"dog",
		"dogs",
		"doing",
		"dollar",
		"dollars",
		"dolores",
		"domestic",
		"dominant",
		"dominated",
		"don",
		"donald",
		"done",
		"dont",
		"door",
		"doors",
		"double",
		"doubt",
		"doubtful",
		"douglas",
		"down",
		"downtown",
		"dozen",
		"dr",
		"draft",
		"drama",
		"dramatic",
		"drank",
		"draw",
		"drawing",
		"drawings",
		"drawn",
		"dream",
		"dreamed",
		"dreams",
		"dress",
		"dressed",
		"dressing",
		"drew",
		"dried",
		"drill",
		"drink",
		"drinking",
		"drinks",
		"drive",
		"driven",
		"driver",
		"drivers",
		"driving",
		"drop",
		"dropped",
		"drove",
		"drug",
		"drugs",
		"drunk",
		"dry",
		"drying",
		"due",
		"dull",
		"during",
		"dust",
		"duties",
		"duty",
		"dying",
		"dynamic",
		"e",
		"each",
		"eager",
		"ear",
		"earlier",
		"earliest",
		"early",
		"earnings",
		"ears",
		"earth",
		"ease",
		"easier",
		"easily",
		"east",
		"eastern",
		"easy",
		"eat",
		"eating",
		"economic",
		"economical",
		"economy",
		"ecumenical",
		"eddie",
		"edge",
		"edges",
		"edition",
		"editor",
		"editorial",
		"educated",
		"education",
		"educational",
		"edward",
		"effect",
		"effective",
		"effectively",
		"effectiveness",
		"effects",
		"efficiency",
		"efficient",
		"effort",
		"efforts",
		"eg",
		"eggs",
		"eight",
		"eighteenth",
		"eighth",
		"eileen",
		"eisenhower",
		"either",
		"ekstrohm",
		"el",
		"elaborate",
		"elaine",
		"elected",
		"election",
		"elections",
		"electric",
		"electrical",
		"electricity",
		"electron",
		"electronic",
		"electronics",
		"element",
		"elementary",
		"elements",
		"eleven",
		"eliminate",
		"eliminated",
		"else",
		"elsewhere",
		"em",
		"emerged",
		"emergency",
		"emission",
		"emotion",
		"emotional",
		"emotions",
		"emphasis",
		"emphasize",
		"empire",
		"empirical",
		"employed",
		"employee",
		"employees",
		"employment",
		"empty",
		"enable",
		"encounter",
		"encountered",
		"encourage",
		"encouraged",
		"encouraging",
		"end",
		"ended",
		"ending",
		"endless",
		"ends",
		"enemies",
		"enemy",
		"energy",
		"enforced",
		"enforcement",
		"engaged",
		"engagement",
		"engine",
		"engineer",
		"engineering",
		"engineers",
		"england",
		"english",
		"enjoy",
		"enjoyed",
		"enjoyment",
		"enormous",
		"enough",
		"enter",
		"entered",
		"entering",
		"enterprise",
		"entertainment",
		"enthusiasm",
		"enthusiastic",
		"entire",
		"entirely",
		"entitled",
		"entrance",
		"entries",
		"entry",
		"envelope",
		"environment",
		"equal",
		"equally",
		"equation",
		"equipment",
		"equipped",
		"equivalent",
		"era",
		"error",
		"errors",
		"escape",
		"especially",
		"essential",
		"essentially",
		"establish",
		"established",
		"establishing",
		"establishment",
		"estate",
		"estimate",
		"estimated",
		"estimates",
		"et",
		"etc",
		"eternal",
		"ethical",
		"ethics",
		"eugene",
		"europe",
		"european",
		"evaluation",
		"eve",
		"even",
		"evening",
		"event",
		"events",
		"eventually",
		"ever",
		"every",
		"everybody",
		"everyone",
		"everything",
		"everywhere",
		"evidence",
		"evident",
		"evidently",
		"evil",
		"exact",
		"exactly",
		"examination",
		"examine",
		"examined",
		"example",
		"examples",
		"excellent",
		"except",
		"exception",
		"exceptions",
		"excess",
		"excessive",
		"exchange",
		"excited",
		"excitement",
		"exciting",
		"exclusive",
		"exclusively",
		"excuse",
		"executive",
		"exercise",
		"exercises",
		"exhibit",
		"exhibition",
		"exist",
		"existed",
		"existence",
		"existing",
		"exists",
		"expanded",
		"expanding",
		"expansion",
		"expect",
		"expectations",
		"expected",
		"expects",
		"expenditures",
		"expense",
		"expenses",
		"expensive",
		"experience",
		"experienced",
		"experiences",
		"experiment",
		"experimental",
		"experiments",
		"expert",
		"experts",
		"explain",
		"explained",
		"explains",
		"explanation",
		"explicit",
		"exploration",
		"exposed",
		"exposure",
		"express",
		"expressed",
		"expressing",
		"expression",
		"extend",
		"extended",
		"extending",
		"extension",
		"extensive",
		"extent",
		"external",
		"extra",
		"extraordinary",
		"extreme",
		"extremely",
		"eye",
		"eyes",
		"fabrics",
		"face",
		"faced",
		"faces",
		"facilities",
		"facing",
		"fact",
		"factor",
		"factories",
		"factors",
		"factory",
		"facts",
		"faculty",
		"fail",
		"failed",
		"failure",
		"faint",
		"fair",
		"fairly",
		"faith",
		"fall",
		"fallen",
		"falling",
		"fallout",
		"falls",
		"false",
		"familiar",
		"families",
		"family",
		"famous",
		"fans",
		"fantastic",
		"far",
		"farm",
		"farmer",
		"farmers",
		"farther",
		"fascinating",
		"fashion",
		"fast",
		"fat",
		"fate",
		"father",
		"fathers",
		"faulkner",
		"fault",
		"favor",
		"favorable",
		"favorite",
		"fear",
		"fears",
		"feature",
		"features",
		"feb",
		"february",
		"fed",
		"federal",
		"feed",
		"feeding",
		"feel",
		"feeling",
		"feelings",
		"feels",
		"fees",
		"feet",
		"felix",
		"fell",
		"fellow",
		"fellowship",
		"felt",
		"female",
		"fence",
		"festival",
		"few",
		"fewer",
		"fiber",
		"fibers",
		"fiction",
		"field",
		"fields",
		"fifteen",
		"fifth",
		"fifty",
		"fig",
		"fight",
		"fighting",
		"figure",
		"figured",
		"figures",
		"file",
		"filed",
		"filing",
		"fill",
		"filled",
		"filling",
		"film",
		"films",
		"final",
		"finally",
		"finance",
		"financial",
		"financing",
		"find",
		"finding",
		"findings",
		"finds",
		"fine",
		"finger",
		"fingers",
		"finish",
		"finished",
		"fire",
		"fired",
		"firing",
		"firm",
		"firmly",
		"firms",
		"first",
		"fiscal",
		"fish",
		"fishing",
		"fist",
		"fit",
		"fitted",
		"five",
		"fixed",
		"flash",
		"flat",
		"fled",
		"flesh",
		"flew",
		"flexible",
		"flight",
		"floor",
		"florida",
		"flow",
		"flower",
		"flowers",
		"fluid",
		"flux",
		"fly",
		"flying",
		"foam",
		"foams",
		"focus",
		"fog",
		"fogg",
		"foil",
		"folk",
		"folklore",
		"folks",
		"follow",
		"followed",
		"following",
		"follows",
		"food",
		"foods",
		"fool",
		"foot",
		"football",
		"for",
		"force",
		"forced",
		"forces",
		"ford",
		"foreign",
		"forest",
		"forests",
		"forever",
		"forget",
		"forgive",
		"forgotten",
		"form",
		"formal",
		"formation",
		"formed",
		"former",
		"formerly",
		"forming",
		"forms",
		"formula",
		"formulas",
		"fort",
		"forth",
		"fortunate",
		"fortunately",
		"fortune",
		"forty",
		"forward",
		"fought",
		"found",
		"foundation",
		"founded",
		"four",
		"fourteen",
		"fourth",
		"fraction",
		"fractions",
		"frame",
		"frames",
		"france",
		"francis",
		"francisco",
		"frank",
		"franklin",
		"fred",
		"freddy",
		"frederick",
		"free",
		"freedom",
		"freely",
		"freight",
		"french",
		"frequencies",
		"frequency",
		"frequent",
		"frequently",
		"fresh",
		"friday",
		"friend",
		"friendly",
		"friends",
		"friendship",
		"frightened",
		"from",
		"front",
		"frontier",
		"frozen",
		"fruit",
		"ft",
		"full",
		"fulltime",
		"fully",
		"fun",
		"function",
		"functional",
		"functions",
		"fund",
		"fundamental",
		"funds",
		"funeral",
		"funny",
		"furnish",
		"furnished",
		"furniture",
		"further",
		"furthermore",
		"future",
		"gain",
		"gained",
		"gains",
		"gallery",
		"game",
		"games",
		"gang",
		"garage",
		"garden",
		"gardens",
		"gas",
		"gate",
		"gather",
		"gathered",
		"gathering",
		"gave",
		"gay",
		"gear",
		"gen",
		"general",
		"generally",
		"generation",
		"generations",
		"generous",
		"genius",
		"gentle",
		"gentleman",
		"gentlemen",
		"gently",
		"genuine",
		"george",
		"georgia",
		"german",
		"germans",
		"germany",
		"gesture",
		"get",
		"gets",
		"getting",
		"giant",
		"giants",
		"gift",
		"gin",
		"girl",
		"girls",
		"give",
		"given",
		"gives",
		"giving",
		"glad",
		"glance",
		"glanced",
		"glass",
		"glasses",
		"glory",
		"go",
		"goal",
		"goals",
		"god",
		"gods",
		"goes",
		"going",
		"gold",
		"golden",
		"golf",
		"gone",
		"good",
		"goods",
		"gorton",
		"got",
		"gov",
		"governing",
		"government",
		"governmental",
		"governments",
		"governor",
		"grabbed",
		"grace",
		"grade",
		"grades",
		"gradually",
		"graduate",
		"grain",
		"grains",
		"grand",
		"grant",
		"granted",
		"grants",
		"grass",
		"grateful",
		"grave",
		"gray",
		"great",
		"greater",
		"greatest",
		"greatly",
		"greek",
		"green",
		"greenwich",
		"greeted",
		"greg",
		"grew",
		"grinned",
		"grip",
		"gross",
		"ground",
		"grounds",
		"group",
		"groups",
		"grow",
		"growing",
		"grown",
		"grows",
		"growth",
		"guard",
		"guards",
		"guess",
		"guest",
		"guests",
		"guidance",
		"guide",
		"guided",
		"guilt",
		"guilty",
		"gulf",
		"gun",
		"guns",
		"guy",
		"guys",
		"gyro",
		"habit",
		"habits",
		"had",
		"hadnt",
		"hair",
		"hal",
		"half",
		"hall",
		"ham",
		"hand",
		"handed",
		"handle",
		"handled",
		"handling",
		"hands",
		"handsome",
		"hang",
		"hanging",
		"hanover",
		"hans",
		"happen",
		"happened",
		"happening",
		"happens",
		"happily",
		"happiness",
		"happy",
		"harbor",
		"hard",
		"harder",
		"hardly",
		"hardy",
		"harm",
		"harmony",
		"harold",
		"harris",
		"harry",
		"harvard",
		"has",
		"hasnt",
		"hat",
		"hate",
		"hated",
		"hatred",
		"have",
		"havent",
		"having",
		"he",
		"head",
		"headed",
		"heading",
		"headquarters",
		"heads",
		"health",
		"healthy",
		"hear",
		"heard",
		"hearing",
		"hearst",
		"heart",
		"hearts",
		"heat",
		"heating",
		"heaven",
		"heavily",
		"heavy",
		"hed",
		"heels",
		"height",
		"heights",
		"held",
		"hell",
		"help",
		"helped",
		"helpful",
		"helping",
		"helpless",
		"helps",
		"helva",
		"hen",
		"hence",
		"henrietta",
		"henry",
		"her",
		"herd",
		"here",
		"heritage",
		"hero",
		"heroic",
		"herself",
		"hes",
		"hesitated",
		"hidden",
		"hide",
		"high",
		"higher",
		"highest",
		"highly",
		"highway",
		"hill",
		"hills",
		"him",
		"himself",
		"hired",
		"his",
		"historian",
		"historians",
		"historic",
		"historical",
		"history",
		"hit",
		"hits",
		"hoag",
		"hold",
		"holder",
		"holding",
		"holds",
		"hole",
		"holes",
		"hollywood",
		"holmes",
		"holy",
		"home",
		"homes",
		"honest",
		"honey",
		"honor",
		"honored",
		"hope",
		"hoped",
		"hopes",
		"hoping",
		"horizon",
		"horn",
		"horse",
		"horses",
		"hospital",
		"hospitals",
		"host",
		"hot",
		"hotel",
		"hotels",
		"hour",
		"hours",
		"house",
		"household",
		"houses",
		"housing",
		"houston",
		"how",
		"howard",
		"however",
		"hr",
		"hudson",
		"huge",
		"hughes",
		"human",
		"humanity",
		"humor",
		"hundred",
		"hundreds",
		"hung",
		"hungry",
		"hunting",
		"hurried",
		"hurry",
		"hurt",
		"husband",
		"hydrogen",
		"hypothalamic",
		"i",
		"ice",
		"id",
		"idea",
		"ideal",
		"ideas",
		"identical",
		"identification",
		"identified",
		"identify",
		"identity",
		"ideological",
		"ie",
		"if",
		"ignored",
		"ill",
		"illinois",
		"illness",
		"illusion",
		"illustrated",
		"illustration",
		"im",
		"image",
		"images",
		"imagination",
		"imagine",
		"imagined",
		"imitation",
		"immediate",
		"immediately",
		"impact",
		"implications",
		"importance",
		"important",
		"imposed",
		"impossible",
		"impressed",
		"impression",
		"impressions",
		"impressive",
		"improve",
		"improved",
		"improvement",
		"improvements",
		"impulse",
		"in",
		"inadequate",
		"inc",
		"inch",
		"inches",
		"incident",
		"inclined",
		"include",
		"included",
		"includes",
		"including",
		"income",
		"increase",
		"increased",
		"increases",
		"increasing",
		"increasingly",
		"incredible",
		"indeed",
		"independence",
		"independent",
		"index",
		"india",
		"indian",
		"indians",
		"indicate",
		"indicated",
		"indicates",
		"indication",
		"indirect",
		"individual",
		"individuals",
		"industrial",
		"industries",
		"industry",
		"inevitable",
		"inevitably",
		"influence",
		"information",
		"informed",
		"inherent",
		"initial",
		"initiative",
		"injured",
		"injury",
		"inner",
		"innocence",
		"innocent",
		"input",
		"insects",
		"inside",
		"insight",
		"insist",
		"insisted",
		"inspection",
		"inspired",
		"installed",
		"instance",
		"instances",
		"instant",
		"instead",
		"institute",
		"institution",
		"institutions",
		"instruction",
		"instructions",
		"instrument",
		"instruments",
		"insurance",
		"insure",
		"integration",
		"intellectual",
		"intelligence",
		"intelligent",
		"intended",
		"intense",
		"intensity",
		"intention",
		"intentions",
		"interest",
		"interested",
		"interesting",
		"interests",
		"interference",
		"interior",
		"intermediate",
		"internal",
		"international",
		"interpretation",
		"interpreted",
		"intervals",
		"intervention",
		"interview",
		"interviews",
		"intimate",
		"into",
		"introduced",
		"introduction",
		"invariably",
		"invention",
		"inventory",
		"investigation",
		"investigations",
		"investment",
		"invitation",
		"invited",
		"involve",
		"involved",
		"involves",
		"involving",
		"irish",
		"iron",
		"is",
		"island",
		"islands",
		"isnt",
		"isolated",
		"issue",
		"issued",
		"issues",
		"it",
		"italian",
		"italy",
		"item",
		"items",
		"its",
		"itself",
		"ive",
		"jack",
		"jacket",
		"jackson",
		"jail",
		"james",
		"jan",
		"jane",
		"january",
		"japan",
		"japanese",
		"jazz",
		"jean",
		"jefferson",
		"jersey",
		"jess",
		"jesus",
		"jet",
		"jew",
		"jewish",
		"jews",
		"jim",
		"job",
		"jobs",
		"joe",
		"john",
		"johnnie",
		"johnny",
		"johns",
		"johnson",
		"johnston",
		"join",
		"joined",
		"joint",
		"joke",
		"jones",
		"joseph",
		"journal",
		"journey",
		"joy",
		"joyce",
		"jr",
		"judge",
		"judges",
		"judgment",
		"judgments",
		"julia",
		"july",
		"jump",
		"jumped",
		"june",
		"jungle",
		"junior",
		"juniors",
		"jurisdiction",
		"jury",
		"just",
		"justice",
		"justified",
		"justify",
		"kansas",
		"katanga",
		"kate",
		"kay",
		"keep",
		"keeping",
		"keeps",
		"keith",
		"kennedy",
		"kennedys",
		"kept",
		"key",
		"keys",
		"khrushchev",
		"kid",
		"kids",
		"kill",
		"killed",
		"killer",
		"killing",
		"kind",
		"kinds",
		"king",
		"kingdom",
		"kitchen",
		"knee",
		"knees",
		"knew",
		"knife",
		"knocked",
		"know",
		"knowing",
		"knowledge",
		"known",
		"knows",
		"la",
		"label",
		"labor",
		"laboratory",
		"lack",
		"lacked",
		"lacking",
		"ladder",
		"ladies",
		"lady",
		"laid",
		"lake",
		"land",
		"landing",
		"lands",
		"landscape",
		"lane",
		"language",
		"languages",
		"laos",
		"large",
		"largely",
		"larger",
		"largest",
		"last",
		"late",
		"later",
		"latest",
		"latin",
		"latter",
		"laugh",
		"laughed",
		"laughing",
		"laughter",
		"launched",
		"laura",
		"law",
		"lawrence",
		"laws",
		"lawyer",
		"lawyers",
		"lay",
		"lb",
		"lead",
		"leader",
		"leaders",
		"leadership",
		"leading",
		"leads",
		"league",
		"lean",
		"leaned",
		"leaped",
		"learn",
		"learned",
		"learning",
		"least",
		"leather",
		"leave",
		"leaves",
		"leaving",
		"led",
		"lee",
		"left",
		"leg",
		"legal",
		"legend",
		"legislation",
		"legislative",
		"legislators",
		"legislature",
		"legs",
		"length",
		"lengths",
		"less",
		"lesson",
		"let",
		"lets",
		"letter",
		"letters",
		"letting",
		"level",
		"levels",
		"lewis",
		"liberal",
		"liberals",
		"liberty",
		"libraries",
		"library",
		"license",
		"lid",
		"lie",
		"lies",
		"lieutenant",
		"life",
		"lift",
		"lifted",
		"light",
		"lighted",
		"lighting",
		"lightly",
		"lights",
		"like",
		"liked",
		"likely",
		"likes",
		"limit",
		"limitations",
		"limited",
		"limits",
		"lincoln",
		"linda",
		"line",
		"linear",
		"lines",
		"lips",
		"liquid",
		"liquor",
		"list",
		"listed",
		"listen",
		"listened",
		"listeners",
		"listening",
		"lists",
		"literally",
		"literary",
		"literature",
		"little",
		"live",
		"lived",
		"lively",
		"lives",
		"livestock",
		"living",
		"lo",
		"load",
		"loaded",
		"loan",
		"loans",
		"lobby",
		"local",
		"located",
		"location",
		"lock",
		"locked",
		"locking",
		"lodge",
		"logical",
		"london",
		"lonely",
		"long",
		"longer",
		"longrange",
		"longterm",
		"look",
		"looked",
		"looking",
		"looks",
		"loop",
		"loose",
		"lord",
		"los",
		"lose",
		"losing",
		"loss",
		"losses",
		"lost",
		"lot",
		"lots",
		"loud",
		"louis",
		"louisiana",
		"love",
		"loved",
		"lovely",
		"lover",
		"loves",
		"low",
		"lower",
		"lowered",
		"loyalty",
		"luck",
		"lucky",
		"lucy",
		"lumber",
		"lunch",
		"luncheon",
		"lungs",
		"luxury",
		"lying",
		"ma",
		"machine",
		"machinery",
		"machines",
		"mad",
		"made",
		"madison",
		"magazine",
		"magazines",
		"maggie",
		"magic",
		"magnetic",
		"magnificent",
		"magnitude",
		"maid",
		"mail",
		"main",
		"mainly",
		"maintain",
		"maintained",
		"maintaining",
		"maintenance",
		"major",
		"majority",
		"make",
		"makers",
		"makes",
		"making",
		"male",
		"males",
		"mama",
		"man",
		"manage",
		"managed",
		"management",
		"manager",
		"managers",
		"manchester",
		"manhattan",
		"mankind",
		"manner",
		"mans",
		"mantle",
		"manufacturer",
		"manufacturers",
		"manufacturing",
		"many",
		"marble",
		"march",
		"marginal",
		"marine",
		"maris",
		"mark",
		"marked",
		"market",
		"marketing",
		"markets",
		"marks",
		"marriage",
		"marriages",
		"married",
		"mars",
		"marshal",
		"marshall",
		"martin",
		"mary",
		"maryland",
		"mason",
		"mass",
		"massachusetts",
		"masses",
		"massive",
		"master",
		"masters",
		"match",
		"matching",
		"mate",
		"material",
		"materials",
		"mathematical",
		"mathematics",
		"matsuo",
		"matter",
		"matters",
		"mature",
		"maturity",
		"maude",
		"maximum",
		"may",
		"maybe",
		"mayor",
		"me",
		"meal",
		"meals",
		"mean",
		"meaning",
		"meaningful",
		"meanings",
		"means",
		"meant",
		"meanwhile",
		"measure",
		"measured",
		"measurement",
		"measurements",
		"measures",
		"measuring",
		"meat",
		"mechanical",
		"mechanism",
		"medical",
		"medicine",
		"medium",
		"meet",
		"meeting",
		"meetings",
		"meets",
		"melody",
		"melting",
		"member",
		"members",
		"membership",
		"memorial",
		"memory",
		"men",
		"mens",
		"mental",
		"mention",
		"mentioned",
		"mercer",
		"merchant",
		"merchants",
		"mercy",
		"mere",
		"merely",
		"merger",
		"merit",
		"mess",
		"message",
		"met",
		"metal",
		"method",
		"methods",
		"metropolitan",
		"mexican",
		"mexico",
		"mg",
		"miami",
		"michelangelo",
		"michigan",
		"mickey",
		"middle",
		"middleclass",
		"midnight",
		"might",
		"mighty",
		"mike",
		"mile",
		"miles",
		"military",
		"milk",
		"miller",
		"milligrams",
		"million",
		"millions",
		"mills",
		"mind",
		"minds",
		"mine",
		"mines",
		"minimal",
		"minimum",
		"minister",
		"minor",
		"minority",
		"minute",
		"minutes",
		"miriam",
		"mirror",
		"miss",
		"missed",
		"missile",
		"missiles",
		"missing",
		"mission",
		"mississippi",
		"missouri",
		"mistake",
		"mitchell",
		"mixed",
		"mixture",
		"mm",
		"mobile",
		"mode",
		"model",
		"models",
		"moderate",
		"modern",
		"modest",
		"mold",
		"moment",
		"moments",
		"monday",
		"money",
		"month",
		"monthly",
		"months",
		"monument",
		"mood",
		"moon",
		"moore",
		"moral",
		"morality",
		"more",
		"moreover",
		"morgan",
		"morning",
		"morris",
		"morse",
		"moscow",
		"most",
		"mostly",
		"motel",
		"mother",
		"mothers",
		"motion",
		"motive",
		"motives",
		"motor",
		"motors",
		"mount",
		"mountain",
		"mountains",
		"mounted",
		"mouth",
		"move",
		"moved",
		"movement",
		"movements",
		"moves",
		"movie",
		"movies",
		"moving",
		"mr",
		"mrs",
		"much",
		"mud",
		"multiple",
		"municipal",
		"murder",
		"muscle",
		"muscles",
		"museum",
		"music",
		"musical",
		"musician",
		"musicians",
		"must",
		"mustard",
		"mutual",
		"my",
		"myra",
		"myself",
		"mysterious",
		"mystery",
		"myth",
		"naked",
		"name",
		"named",
		"namely",
		"names",
		"narrative",
		"narrow",
		"nation",
		"national",
		"nationalism",
		"nations",
		"native",
		"nato",
		"natural",
		"naturally",
		"nature",
		"naval",
		"navy",
		"near",
		"nearby",
		"nearest",
		"nearly",
		"neat",
		"necessarily",
		"necessary",
		"necessity",
		"neck",
		"need",
		"needed",
		"needs",
		"negative",
		"negotiations",
		"negro",
		"negroes",
		"neighborhood",
		"neighboring",
		"neighbors",
		"neither",
		"nerves",
		"nervous",
		"nest",
		"net",
		"network",
		"neutral",
		"never",
		"nevertheless",
		"new",
		"newer",
		"newly",
		"newport",
		"news",
		"newspaper",
		"newspapers",
		"next",
		"nice",
		"nick",
		"night",
		"nights",
		"nine",
		"nineteenth",
		"ninth",
		"nixon",
		"no",
		"noble",
		"nobody",
		"nodded",
		"noise",
		"none",
		"noon",
		"nor",
		"normal",
		"normally",
		"norms",
		"north",
		"northern",
		"northwest",
		"nose",
		"not",
		"notable",
		"note",
		"noted",
		"notes",
		"nothing",
		"notice",
		"noticed",
		"notion",
		"notte",
		"nov",
		"novel",
		"novels",
		"november",
		"now",
		"nowhere",
		"nuclear",
		"nude",
		"number",
		"numbers",
		"numerous",
		"nuts",
		"obanion",
		"object",
		"objective",
		"objectives",
		"objects",
		"obligations",
		"obliged",
		"observation",
		"observations",
		"observe",
		"observed",
		"observers",
		"obtain",
		"obtained",
		"obvious",
		"obviously",
		"occasion",
		"occasional",
		"occasionally",
		"occasions",
		"occupation",
		"occupied",
		"occur",
		"occurred",
		"occurrence",
		"occurring",
		"occurs",
		"ocean",
		"oclock",
		"oct",
		"october",
		"odd",
		"oedipus",
		"of",
		"off",
		"offer",
		"offered",
		"offering",
		"offers",
		"office",
		"officer",
		"officers",
		"offices",
		"official",
		"officials",
		"often",
		"oh",
		"ohio",
		"oil",
		"okay",
		"old",
		"older",
		"on",
		"once",
		"one",
		"ones",
		"only",
		"onset",
		"onto",
		"open",
		"opened",
		"opening",
		"openly",
		"opera",
		"operate",
		"operated",
		"operating",
		"operation",
		"operational",
		"operations",
		"operator",
		"opinion",
		"opinions",
		"opportunities",
		"opportunity",
		"opposed",
		"opposite",
		"opposition",
		"optimal",
		"or",
		"oral",
		"orange",
		"orchestra",
		"order",
		"ordered",
		"orderly",
		"orders",
		"ordinary",
		"organic",
		"organization",
		"organizations",
		"organized",
		"origin",
		"original",
		"originally",
		"orleans",
		"other",
		"others",
		"otherwise",
		"ought",
		"our",
		"ours",
		"ourselves",
		"out",
		"outcome",
		"outdoor",
		"outer",
		"outlook",
		"output",
		"outside",
		"outstanding",
		"over",
		"overall",
		"overcome",
		"overseas",
		"overwhelming",
		"owen",
		"own",
		"owned",
		"owner",
		"owners",
		"ownership",
		"oxidation",
		"oxygen",
		"pa",
		"pace",
		"pacific",
		"pack",
		"package",
		"packed",
		"page",
		"pages",
		"paid",
		"pain",
		"painful",
		"paint",
		"painted",
		"painter",
		"painting",
		"paintings",
		"pair",
		"palace",
		"pale",
		"palfrey",
		"palm",
		"palmer",
		"panel",
		"panels",
		"panic",
		"papa",
		"paper",
		"papers",
		"parade",
		"parallel",
		"parents",
		"paris",
		"park",
		"parked",
		"parker",
		"parking",
		"parks",
		"part",
		"partially",
		"participate",
		"participation",
		"particle",
		"particles",
		"particular",
		"particularly",
		"parties",
		"partisan",
		"partly",
		"partner",
		"parts",
		"parttime",
		"party",
		"pass",
		"passage",
		"passages",
		"passed",
		"passenger",
		"passengers",
		"passes",
		"passing",
		"passion",
		"past",
		"pat",
		"patchen",
		"patent",
		"path",
		"pathology",
		"patience",
		"patient",
		"patients",
		"patrol",
		"pattern",
		"patterns",
		"paul",
		"pause",
		"paused",
		"pay",
		"paying",
		"payment",
		"payments",
		"peace",
		"peaceful",
		"peas",
		"peculiar",
		"peered",
		"pencil",
		"pennsylvania",
		"penny",
		"people",
		"peoples",
		"per",
		"percent",
		"percentage",
		"perception",
		"perfect",
		"perfectly",
		"perform",
		"performance",
		"performances",
		"performed",
		"perhaps",
		"period",
		"periods",
		"permanent",
		"permission",
		"permit",
		"permits",
		"permitted",
		"person",
		"personal",
		"personality",
		"personally",
		"personnel",
		"persons",
		"perspective",
		"persuaded",
		"pertinent",
		"pete",
		"peter",
		"petitioner",
		"phase",
		"phases",
		"phenomena",
		"phenomenon",
		"phil",
		"philadelphia",
		"philip",
		"philosophical",
		"philosophy",
		"phone",
		"phrase",
		"physical",
		"physically",
		"physics",
		"physiological",
		"piano",
		"pick",
		"picked",
		"picture",
		"pictures",
		"piece",
		"pieces",
		"pike",
		"pile",
		"pilot",
		"pink",
		"pioneer",
		"pip",
		"pipe",
		"pistol",
		"pitch",
		"pitcher",
		"pittsburgh",
		"place",
		"placed",
		"places",
		"placing",
		"plain",
		"plan",
		"plane",
		"planes",
		"planet",
		"planetary",
		"planets",
		"planned",
		"planning",
		"plans",
		"plant",
		"plants",
		"plaster",
		"plastic",
		"plastics",
		"plate",
		"plates",
		"platform",
		"plato",
		"play",
		"played",
		"player",
		"players",
		"playing",
		"plays",
		"pleasant",
		"please",
		"pleased",
		"pleasure",
		"plenty",
		"plot",
		"plug",
		"plus",
		"pm",
		"pocket",
		"podger",
		"poem",
		"poems",
		"poet",
		"poetic",
		"poetry",
		"poets",
		"point",
		"pointed",
		"pointing",
		"points",
		"poland",
		"police",
		"policeman",
		"policies",
		"policy",
		"political",
		"politicians",
		"politics",
		"polynomial",
		"pond",
		"pont",
		"pool",
		"poor",
		"pope",
		"popular",
		"population",
		"porch",
		"port",
		"portion",
		"portland",
		"position",
		"positions",
		"positive",
		"possessed",
		"possession",
		"possibilities",
		"possibility",
		"possible",
		"possibly",
		"post",
		"posts",
		"pot",
		"potential",
		"pound",
		"pounds",
		"poured",
		"poverty",
		"powder",
		"power",
		"powerful",
		"powers",
		"practical",
		"practically",
		"practice",
		"practices",
		"prairie",
		"prayer",
		"preceding",
		"precious",
		"precise",
		"precisely",
		"precision",
		"prefer",
		"preferred",
		"preliminary",
		"premier",
		"preparation",
		"prepare",
		"prepared",
		"preparing",
		"presence",
		"present",
		"presentation",
		"presented",
		"presently",
		"presents",
		"preserve",
		"president",
		"presidential",
		"presidents",
		"press",
		"pressed",
		"pressing",
		"pressure",
		"pressures",
		"prestige",
		"presumably",
		"pretty",
		"prevent",
		"prevented",
		"prevention",
		"previous",
		"previously",
		"price",
		"prices",
		"pride",
		"primarily",
		"primary",
		"prime",
		"primitive",
		"prince",
		"principal",
		"principle",
		"principles",
		"printed",
		"prior",
		"prison",
		"prisoners",
		"private",
		"prize",
		"probabilities",
		"probability",
		"probable",
		"probably",
		"problem",
		"problems",
		"procedure",
		"procedures",
		"proceeded",
		"process",
		"processes",
		"processing",
		"procurement",
		"produce",
		"produced",
		"producing",
		"product",
		"production",
		"productive",
		"products",
		"profession",
		"professional",
		"professor",
		"profit",
		"profits",
		"profound",
		"program",
		"programs",
		"progress",
		"project",
		"projects",
		"prokofieff",
		"prominent",
		"promise",
		"promised",
		"promises",
		"promising",
		"promote",
		"promotion",
		"promptly",
		"proof",
		"propaganda",
		"proper",
		"properly",
		"properties",
		"property",
		"proportion",
		"proposal",
		"proposals",
		"proposed",
		"prospect",
		"prospective",
		"prospects",
		"protect",
		"protected",
		"protection",
		"protein",
		"protest",
		"protestant",
		"proud",
		"prove",
		"proved",
		"provide",
		"provided",
		"providence",
		"provides",
		"providing",
		"provision",
		"provisions",
		"psychological",
		"public",
		"publication",
		"publications",
		"publicity",
		"publicly",
		"published",
		"puerto",
		"pull",
		"pulled",
		"pulling",
		"pulmonary",
		"punishment",
		"pupil",
		"pupils",
		"purchase",
		"purchased",
		"pure",
		"purely",
		"purpose",
		"purposes",
		"pursuant",
		"pursue",
		"push",
		"pushed",
		"put",
		"puts",
		"putting",
		"qualified",
		"qualities",
		"quality",
		"quantity",
		"quarrel",
		"quarter",
		"quarters",
		"queen",
		"question",
		"questioned",
		"questioning",
		"questionnaire",
		"questions",
		"quick",
		"quickly",
		"quiet",
		"quietly",
		"quiney",
		"quite",
		"quoted",
		"race",
		"races",
		"rachel",
		"racial",
		"racing",
		"radar",
		"radiation",
		"radical",
		"radio",
		"railroad",
		"rain",
		"raise",
		"raised",
		"raising",
		"ralph",
		"ramey",
		"ran",
		"ranch",
		"random",
		"rang",
		"range",
		"ranging",
		"rank",
		"ranks",
		"rapid",
		"rapidly",
		"rare",
		"rarely",
		"rate",
		"rates",
		"rather",
		"ratio",
		"rational",
		"raw",
		"ray",
		"rayburn",
		"reach",
		"reached",
		"reaches",
		"reaching",
		"reaction",
		"reactionary",
		"reactions",
		"read",
		"reader",
		"readers",
		"readily",
		"reading",
		"ready",
		"real",
		"realism",
		"realistic",
		"reality",
		"realization",
		"realize",
		"realized",
		"really",
		"rear",
		"reason",
		"reasonable",
		"reasonably",
		"reasons",
		"recall",
		"recalled",
		"receive",
		"received",
		"receives",
		"receiving",
		"recent",
		"recently",
		"reception",
		"recognition",
		"recognize",
		"recognized",
		"recommend",
		"recommendation",
		"recommendations",
		"recommended",
		"record",
		"recorded",
		"recording",
		"records",
		"recovery",
		"recreation",
		"rector",
		"red",
		"reduce",
		"reduced",
		"reducing",
		"reduction",
		"refer",
		"reference",
		"referred",
		"reflect",
		"reflected",
		"reflection",
		"reflects",
		"reform",
		"refrigerator",
		"refund",
		"refused",
		"regard",
		"regarded",
		"regarding",
		"regardless",
		"regime",
		"regiment",
		"region",
		"regional",
		"regions",
		"register",
		"registered",
		"registration",
		"regular",
		"regularly",
		"regulations",
		"rehabilitation",
		"rejected",
		"related",
		"relating",
		"relation",
		"relations",
		"relationship",
		"relationships",
		"relative",
		"relatively",
		"relatives",
		"release",
		"released",
		"relevant",
		"reliable",
		"relief",
		"relieved",
		"religion",
		"religious",
		"remain",
		"remainder",
		"remained",
		"remaining",
		"remains",
		"remark",
		"remarkable",
		"remarked",
		"remarks",
		"remember",
		"remembered",
		"reminded",
		"remote",
		"removal",
		"remove",
		"removed",
		"renaissance",
		"rendered",
		"rent",
		"reorganization",
		"repair",
		"repeat",
		"repeated",
		"replace",
		"replaced",
		"replacement",
		"replied",
		"reply",
		"report",
		"reported",
		"reporter",
		"reporters",
		"reports",
		"represent",
		"representative",
		"representatives",
		"represented",
		"representing",
		"represents",
		"republic",
		"republican",
		"republicans",
		"reputation",
		"request",
		"require",
		"required",
		"requirement",
		"requirements",
		"requires",
		"research",
		"reserve",
		"reserved",
		"residence",
		"residential",
		"residents",
		"resist",
		"resistance",
		"resolution",
		"resolved",
		"resources",
		"respect",
		"respectable",
		"respective",
		"respectively",
		"respects",
		"respond",
		"responded",
		"response",
		"responses",
		"responsibilities",
		"responsibility",
		"responsible",
		"rest",
		"restaurant",
		"restrictions",
		"result",
		"resulted",
		"resulting",
		"results",
		"resumed",
		"retail",
		"retained",
		"retired",
		"retirement",
		"return",
		"returned",
		"returning",
		"returns",
		"rev",
		"reveal",
		"revealed",
		"reveals",
		"revenue",
		"revenues",
		"reverend",
		"review",
		"revolution",
		"revolutionary",
		"rhode",
		"rhythm",
		"rice",
		"rich",
		"richard",
		"rico",
		"rid",
		"ride",
		"riding",
		"rifle",
		"rifles",
		"right",
		"rights",
		"rigid",
		"ring",
		"rise",
		"rises",
		"rising",
		"risk",
		"ritual",
		"river",
		"road",
		"roads",
		"rob",
		"robert",
		"roberts",
		"robinson",
		"rock",
		"rocks",
		"rode",
		"role",
		"roles",
		"roll",
		"rolled",
		"roman",
		"romantic",
		"rome",
		"roof",
		"room",
		"rooms",
		"roosevelt",
		"root",
		"roots",
		"rose",
		"rough",
		"roughly",
		"round",
		"route",
		"routine",
		"row",
		"roy",
		"royal",
		"rule",
		"ruled",
		"rules",
		"ruling",
		"run",
		"running",
		"runs",
		"rural",
		"rush",
		"rushed",
		"russ",
		"russia",
		"russian",
		"russians",
		"ruth",
		"sacred",
		"sacrifice",
		"sad",
		"saddle",
		"safe",
		"safety",
		"said",
		"sailing",
		"sake",
		"salary",
		"sale",
		"salem",
		"sales",
		"saline",
		"salt",
		"salvation",
		"sam",
		"same",
		"sample",
		"samples",
		"sampling",
		"samuel",
		"san",
		"sand",
		"sandburg",
		"sang",
		"santa",
		"sarah",
		"sat",
		"satisfaction",
		"satisfactory",
		"satisfied",
		"saturday",
		"sauce",
		"savage",
		"save",
		"saved",
		"saving",
		"savings",
		"saw",
		"say",
		"saying",
		"says",
		"sba",
		"scale",
		"scarcely",
		"scared",
		"scattered",
		"scene",
		"scenes",
		"schedule",
		"scheduled",
		"scheme",
		"scholars",
		"scholarship",
		"school",
		"schools",
		"science",
		"sciences",
		"scientific",
		"scientists",
		"scope",
		"score",
		"scotty",
		"screen",
		"screw",
		"sea",
		"search",
		"searching",
		"season",
		"seat",
		"seated",
		"second",
		"secondary",
		"seconds",
		"secret",
		"secretary",
		"secrets",
		"section",
		"sections",
		"secure",
		"security",
		"see",
		"seed",
		"seeds",
		"seeing",
		"seek",
		"seeking",
		"seem",
		"seemed",
		"seems",
		"seen",
		"sees",
		"seized",
		"seldom",
		"select",
		"selected",
		"selection",
		"self",
		"sell",
		"selling",
		"sen",
		"senate",
		"senator",
		"send",
		"sending",
		"senior",
		"sense",
		"sensitive",
		"sensitivity",
		"sent",
		"sentence",
		"sentiment",
		"separate",
		"separated",
		"sept",
		"september",
		"sequence",
		"sergeant",
		"series",
		"serious",
		"seriously",
		"servants",
		"serve",
		"served",
		"serves",
		"service",
		"services",
		"serving",
		"session",
		"sessions",
		"set",
		"sets",
		"setting",
		"settle",
		"settled",
		"settlement",
		"seven",
		"seventeen",
		"seventh",
		"several",
		"severe",
		"sewage",
		"sex",
		"sexual",
		"shade",
		"shadow",
		"shadows",
		"shakespeare",
		"shaking",
		"shall",
		"shame",
		"shape",
		"shapes",
		"share",
		"shared",
		"shares",
		"sharing",
		"sharp",
		"sharpe",
		"sharply",
		"shayne",
		"she",
		"shear",
		"shed",
		"sheep",
		"sheet",
		"sheets",
		"shell",
		"shelter",
		"shelters",
		"sheriff",
		"sherman",
		"shes",
		"shift",
		"shining",
		"ship",
		"shipping",
		"ships",
		"shirt",
		"shock",
		"shoes",
		"shook",
		"shoot",
		"shooting",
		"shop",
		"shopping",
		"shore",
		"short",
		"shortly",
		"shorts",
		"shot",
		"shots",
		"should",
		"shoulder",
		"shoulders",
		"shouldnt",
		"shouted",
		"shouting",
		"show",
		"showed",
		"showing",
		"shown",
		"shows",
		"shu",
		"shut",
		"sick",
		"side",
		"sides",
		"sidewalk",
		"sighed",
		"sight",
		"sign",
		"signal",
		"signals",
		"signed",
		"significance",
		"significant",
		"signs",
		"silence",
		"silent",
		"silver",
		"similar",
		"similarly",
		"simple",
		"simply",
		"simultaneously",
		"sin",
		"since",
		"sing",
		"singing",
		"single",
		"sink",
		"sir",
		"sister",
		"sit",
		"site",
		"sitter",
		"sitting",
		"situation",
		"situations",
		"six",
		"sixteen",
		"sixth",
		"sixties",
		"sixty",
		"size",
		"skill",
		"skilled",
		"skills",
		"skin",
		"skirt",
		"sky",
		"skyros",
		"skywave",
		"slave",
		"slavery",
		"slaves",
		"sleep",
		"sleeping",
		"slender",
		"slept",
		"slid",
		"slide",
		"slight",
		"slightly",
		"slim",
		"slipped",
		"slow",
		"slowly",
		"small",
		"smaller",
		"smart",
		"smell",
		"smile",
		"smiled",
		"smiling",
		"smith",
		"smoke",
		"smooth",
		"snake",
		"snakes",
		"snapped",
		"snow",
		"so",
		"soap",
		"socalled",
		"social",
		"socialism",
		"socialist",
		"societies",
		"society",
		"soft",
		"softly",
		"soil",
		"sold",
		"soldier",
		"soldiers",
		"solely",
		"solid",
		"solution",
		"solutions",
		"solve",
		"solved",
		"some",
		"somebody",
		"somehow",
		"someone",
		"something",
		"sometimes",
		"somewhat",
		"somewhere",
		"son",
		"song",
		"songs",
		"sons",
		"soon",
		"sophisticated",
		"sorry",
		"sort",
		"sought",
		"soul",
		"souls",
		"sound",
		"sounded",
		"sounds",
		"source",
		"sources",
		"south",
		"southeast",
		"southern",
		"southerners",
		"sovereign",
		"sovereignty",
		"soviet",
		"space",
		"span",
		"spanish",
		"spare",
		"speak",
		"speaker",
		"speaking",
		"special",
		"specialists",
		"species",
		"specific",
		"specifically",
		"specified",
		"specimen",
		"spectacular",
		"speech",
		"speeches",
		"speed",
		"spencer",
		"spend",
		"spending",
		"spent",
		"sphere",
		"spirit",
		"spirits",
		"spiritual",
		"spite",
		"splendid",
		"split",
		"spoke",
		"spoken",
		"sponsor",
		"sponsored",
		"sports",
		"spot",
		"spots",
		"spread",
		"spring",
		"springs",
		"square",
		"st",
		"stable",
		"stadium",
		"staff",
		"stage",
		"stages",
		"stained",
		"staining",
		"stairs",
		"stake",
		"stand",
		"standard",
		"standards",
		"standing",
		"stands",
		"stanley",
		"star",
		"stared",
		"staring",
		"stars",
		"start",
		"started",
		"starting",
		"startled",
		"starts",
		"state",
		"stated",
		"statement",
		"statements",
		"states",
		"station",
		"stations",
		"statistics",
		"status",
		"stay",
		"stayed",
		"steadily",
		"steady",
		"steel",
		"steele",
		"stem",
		"stems",
		"step",
		"stepped",
		"steps",
		"stern",
		"stick",
		"sticks",
		"stiff",
		"still",
		"stock",
		"stockholders",
		"stomach",
		"stone",
		"stood",
		"stop",
		"stopped",
		"storage",
		"store",
		"stored",
		"stores",
		"stories",
		"storm",
		"story",
		"straight",
		"strain",
		"strange",
		"stranger",
		"strategic",
		"strategy",
		"stream",
		"street",
		"streets",
		"strength",
		"stress",
		"stressed",
		"stresses",
		"stretch",
		"stretched",
		"strictly",
		"strike",
		"strikes",
		"striking",
		"string",
		"strip",
		"stroke",
		"strong",
		"stronger",
		"strongest",
		"strongly",
		"struck",
		"structural",
		"structure",
		"structures",
		"struggle",
		"struggling",
		"stuck",
		"student",
		"students",
		"studied",
		"studies",
		"studio",
		"study",
		"studying",
		"stuff",
		"stumbled",
		"stupid",
		"style",
		"styles",
		"subject",
		"subjected",
		"subjects",
		"submarine",
		"submarines",
		"submitted",
		"subsequent",
		"substance",
		"substances",
		"substantial",
		"substantially",
		"substitute",
		"substrate",
		"subtle",
		"suburban",
		"succeeded",
		"success",
		"successes",
		"successful",
		"successfully",
		"succession",
		"such",
		"sudden",
		"suddenly",
		"suffer",
		"suffered",
		"suffering",
		"sufficient",
		"sufficiently",
		"sugar",
		"suggest",
		"suggested",
		"suggestion",
		"suggestions",
		"suggests",
		"suit",
		"suitable",
		"suitcase",
		"suite",
		"suited",
		"suits",
		"sum",
		"summary",
		"summer",
		"sun",
		"sunday",
		"superior",
		"supervision",
		"supper",
		"supplement",
		"supplied",
		"supplies",
		"supply",
		"support",
		"supported",
		"supporting",
		"suppose",
		"supposed",
		"supreme",
		"sure",
		"surely",
		"surface",
		"surfaces",
		"surplus",
		"surprise",
		"surprised",
		"surprising",
		"surrender",
		"surrounded",
		"surrounding",
		"survey",
		"survival",
		"survive",
		"susan",
		"suspect",
		"suspected",
		"suspended",
		"suspicion",
		"sweat",
		"sweet",
		"swept",
		"swift",
		"swimming",
		"swing",
		"switch",
		"switches",
		"swung",
		"symbol",
		"symbolic",
		"symbols",
		"sympathetic",
		"sympathy",
		"symphony",
		"system",
		"systems",
		"table",
		"tables",
		"tactics",
		"tail",
		"take",
		"taken",
		"takes",
		"taking",
		"tale",
		"talent",
		"talents",
		"tales",
		"talk",
		"talked",
		"talking",
		"tall",
		"tangent",
		"tangible",
		"tape",
		"target",
		"targets",
		"task",
		"tasks",
		"taste",
		"taught",
		"tax",
		"taxes",
		"taxpayers",
		"taylor",
		"tea",
		"teach",
		"teacher",
		"teachers",
		"teaching",
		"team",
		"teams",
		"tears",
		"technical",
		"technique",
		"techniques",
		"technology",
		"teeth",
		"telegraph",
		"telephone",
		"television",
		"tell",
		"telling",
		"tells",
		"temperature",
		"temperatures",
		"temple",
		"temporarily",
		"temporary",
		"ten",
		"tend",
		"tended",
		"tendency",
		"tends",
		"tennessee",
		"tension",
		"tent",
		"term",
		"terms",
		"terrible",
		"territory",
		"terror",
		"test",
		"testament",
		"tested",
		"testimony",
		"testing",
		"tests",
		"texas",
		"text",
		"textile",
		"than",
		"thank",
		"thanks",
		"that",
		"thats",
		"the",
		"theater",
		"theatre",
		"their",
		"theirs",
		"them",
		"theme",
		"themselves",
		"then",
		"theological",
		"theology",
		"theoretical",
		"theories",
		"theory",
		"there",
		"thereafter",
		"thereby",
		"therefore",
		"theres",
		"theresa",
		"thermal",
		"these",
		"they",
		"theyd",
		"theyll",
		"theyre",
		"thick",
		"thickness",
		"thin",
		"thing",
		"things",
		"think",
		"thinking",
		"thinks",
		"third",
		"thirty",
		"this",
		"thomas",
		"thompson",
		"thorough",
		"thoroughly",
		"those",
		"though",
		"thought",
		"thoughts",
		"thousand",
		"thousands",
		"threat",
		"threatened",
		"threatening",
		"three",
		"threw",
		"throat",
		"through",
		"throughout",
		"throw",
		"thrown",
		"thrust",
		"thursday",
		"thus",
		"thyroid",
		"tie",
		"tied",
		"tight",
		"tilghman",
		"till",
		"tim",
		"time",
		"times",
		"tiny",
		"tip",
		"tire",
		"tired",
		"tissue",
		"title",
		"to",
		"toast",
		"today",
		"todays",
		"toes",
		"together",
		"told",
		"tom",
		"tomorrow",
		"tone",
		"tones",
		"tongue",
		"tonight",
		"tons",
		"too",
		"took",
		"tool",
		"tools",
		"tooth",
		"top",
		"torn",
		"tossed",
		"total",
		"totally",
		"touch",
		"touched",
		"tough",
		"tour",
		"tournament",
		"toward",
		"towards",
		"town",
		"towns",
		"trace",
		"track",
		"tractor",
		"trade",
		"traders",
		"trading",
		"tradition",
		"traditional",
		"traditions",
		"traffic",
		"tragedy",
		"tragic",
		"trail",
		"train",
		"trained",
		"training",
		"transfer",
		"transferred",
		"transformation",
		"transformed",
		"transition",
		"transportation",
		"trap",
		"travel",
		"traveled",
		"treasury",
		"treat",
		"treated",
		"treatment",
		"treaty",
		"tree",
		"trees",
		"trembling",
		"tremendous",
		"trend",
		"trends",
		"trial",
		"trials",
		"tribute",
		"tried",
		"trim",
		"trip",
		"trips",
		"triumph",
		"troops",
		"trouble",
		"troubled",
		"troubles",
		"truck",
		"trucks",
		"true",
		"truly",
		"trust",
		"trustees",
		"truth",
		"try",
		"trying",
		"tsunami",
		"tube",
		"tubes",
		"tuesday",
		"turn",
		"turned",
		"turning",
		"turns",
		"tv",
		"twelve",
		"twentieth",
		"twenty",
		"twentyfive",
		"twice",
		"two",
		"type",
		"types",
		"typical",
		"ugly",
		"ultimate",
		"ultimately",
		"un",
		"unable",
		"uncertain",
		"uncle",
		"unconscious",
		"under",
		"underground",
		"underlying",
		"understand",
		"understanding",
		"understood",
		"undoubtedly",
		"uneasy",
		"unexpected",
		"unfortunate",
		"unfortunately",
		"unhappy",
		"uniform",
		"union",
		"unions",
		"unique",
		"unit",
		"united",
		"units",
		"unity",
		"universal",
		"universe",
		"universities",
		"university",
		"unknown",
		"unless",
		"unlike",
		"unlikely",
		"until",
		"unusual",
		"up",
		"upon",
		"upper",
		"upstairs",
		"upward",
		"urban",
		"urethane",
		"urge",
		"urged",
		"urgent",
		"us",
		"use",
		"used",
		"useful",
		"uses",
		"using",
		"usual",
		"usually",
		"utility",
		"utopia",
		"utopian",
		"utterly",
		"vacation",
		"vacuum",
		"vague",
		"valid",
		"valley",
		"valuable",
		"value",
		"values",
		"van",
		"variable",
		"variables",
		"variation",
		"variations",
		"varied",
		"variety",
		"various",
		"vary",
		"varying",
		"vast",
		"vehicle",
		"vehicles",
		"vein",
		"velocity",
		"venture",
		"verbal",
		"vermont",
		"vernon",
		"verse",
		"version",
		"very",
		"veteran",
		"via",
		"vice",
		"victim",
		"victims",
		"victor",
		"victory",
		"vienna",
		"view",
		"viewed",
		"views",
		"vigorous",
		"village",
		"vincent",
		"violence",
		"violent",
		"virgin",
		"virginia",
		"virtually",
		"virtue",
		"visible",
		"vision",
		"visit",
		"visited",
		"visiting",
		"visitors",
		"visual",
		"vital",
		"vivid",
		"vocational",
		"voice",
		"voices",
		"volume",
		"volumes",
		"voluntary",
		"volunteers",
		"vote",
		"voted",
		"voters",
		"votes",
		"voting",
		"vs",
		"wage",
		"wages",
		"wagner",
		"wagon",
		"wait",
		"waited",
		"waiting",
		"wake",
		"walk",
		"walked",
		"walking",
		"wall",
		"walls",
		"wally",
		"walter",
		"want",
		"wanted",
		"wants",
		"war",
		"ward",
		"warfare",
		"warm",
		"warmth",
		"warned",
		"warning",
		"warrant",
		"warren",
		"wars",
		"warwick",
		"was",
		"wash",
		"washed",
		"washing",
		"washington",
		"wasnt",
		"waste",
		"watch",
		"watched",
		"watching",
		"water",
		"waters",
		"watson",
		"wave",
		"waves",
		"way",
		"ways",
		"we",
		"weak",
		"weakness",
		"wealth",
		"weapon",
		"weapons",
		"wear",
		"wearing",
		"weather",
		"wed",
		"wedding",
		"wednesday",
		"week",
		"weekend",
		"weekly",
		"weeks",
		"weight",
		"welcome",
		"welfare",
		"well",
		"went",
		"were",
		"werent",
		"west",
		"western",
		"westminster",
		"wet",
		"weve",
		"what",
		"whatever",
		"whats",
		"wheel",
		"wheels",
		"when",
		"whenever",
		"where",
		"whereas",
		"whereby",
		"wherever",
		"whether",
		"which",
		"while",
		"whip",
		"whisky",
		"whispered",
		"white",
		"who",
		"whole",
		"wholly",
		"whom",
		"whose",
		"why",
		"wide",
		"widely",
		"widespread",
		"widow",
		"wife",
		"wild",
		"wildlife",
		"wildly",
		"will",
		"william",
		"williams",
		"willing",
		"wilson",
		"win",
		"wind",
		"window",
		"windows",
		"winds",
		"wine",
		"wines",
		"wings",
		"winning",
		"winston",
		"winter",
		"wiped",
		"wire",
		"wisdom",
		"wise",
		"wish",
		"wished",
		"wishes",
		"wit",
		"with",
		"within",
		"without",
		"witness",
		"witnesses",
		"wives",
		"woman",
		"womans",
		"women",
		"womens",
		"won",
		"wonder",
		"wondered",
		"wonderful",
		"wondering",
		"wont",
		"wood",
		"wooden",
		"woodruff",
		"woods",
		"word",
		"words",
		"wore",
		"work",
		"worked",
		"worker",
		"workers",
		"working",
		"works",
		"workshop",
		"world",
		"worlds",
		"worn",
		"worried",
		"worries",
		"worry",
		"worse",
		"worship",
		"worst",
		"worth",
		"worthy",
		"would",
		"wouldnt",
		"wound",
		"wounded",
		"wright",
		"write",
		"writer",
		"writers",
		"writes",
		"writing",
		"written",
		"wrong",
		"wrote",
		"yankees",
		"yard",
		"yards",
		"yeah",
		"year",
		"yearold",
		"years",
		"yelled",
		"yellow",
		"yes",
		"yesterday",
		"yet",
		"yield",
		"york",
		"you",
		"youd",
		"youll",
		"young",
		"younger",
		"youngsters",
		"your",
		"youre",
		"yours",
		"yourself",
		"youth",
		"youve",
		"zen",
		"zero"*/
		};
	
	/* top 100 common words, with frequencies (from the Brown corpus, http://www.edict.com.hk/lexiconindex/frequencylists/words2000.htm) */
	public static String[] corpusTop100 = {
		"the",
		"of",
		"and",
		"to",
		"a",
		"in",
		"that",
		"is",
		"was",
		"he",
		"for",
		"it",
		"with",
		"as",
		"his",
		"on",
		"be",
		"at",
		"by",
		"i",
		"this",
		"had",
		"not",
		"are",
		"but",
		"from",
		"or",
		"have",
		"an",
		"they",
		"which",
		"one",
		"you",
		"were",
		"her",
		"all",
		"she",
		"there",
		"would",
		"their",
		"we",
		"him",
		"been",
		"has",
		"when",
		"who",
		"will",
		"more",
		"no",
		"if",
		"out",
		"so",
		"said",
		"what",
		"up",
		"its",
		"about",
		"into",
		"than",
		"them",
		"can",
		"only",
		"other",
		"new",
		"some",
		"time",
		"could",
		"these",
		"two",
		"may",
		"then",
		"do",
		"first",
		"any",
		"my",
		"now",
		"such",
		"like",
		"our",
		"over",
		"man",
		"me",
		"even",
		"most",
		"made",
		"after",
		"also",
		"did",
		"many",
		"before",
		"must",
		"through",
		"back",
		"years",
		"where",
		"much",
		"your",
		"way",
		"well",
		"down"		
	};
	// occurrence counts for each of the corpusTop100
	public static int[] corpusTop100Total = {
		69970,
		36410,
		28854,
		26154,
		23363,
		21345,
		10594,
		10102,
		9815,
		9542,
		9489,
		8760,
		7290,
		7251,
		6996,
		6742,
		6376,
		5377,
		5307,
		5180,
		5146,
		5131,
		4610,
		4394,
		4381,
		4370,
		4207,
		3942,
		3748,
		3619,
		3561,
		3297,
		3286,
		3284,
		3037,
		3001,
		2859,
		2725,
		2715,
		2670,
		2653,
		2619,
		2473,
		2439,
		2331,
		2252,
		2244,
		2216,
		2203,
		2199,
		2096,
		1985,
		1961,
		1908,
		1895,
		1858,
		1815,
		1791,
		1790,
		1789,
		1772,
		1747,
		1702,
		1635,
		1617,
		1601,
		1599,
		1573,
		1412,
		1400,
		1377,
		1362,
		1361,
		1345,
		1319,
		1314,
		1303,
		1290,
		1252,
		1237,
		1210,
		1183,
		1171,
		1160,
		1125,
		1070,
		1069,
		1044,
		1030,
		1016,
		1013,
		969,
		967,
		958,
		938,
		937,
		923,
		909,
		897,
		895
	};
	public static int corpusTop100TotalSum = 0; // used to track the sum of all occurrences.  
	
	/* all zodiac words from his writings, including dupes */
	public static String[] zodiacCorpus;
	/* top 100 zodiac words from his writings, including dupes */
	public static String[] zodiacCorpusTop100;
	public static String zodiacCorpusFile = "./letters/allwords-raw-nocipher.txt";
	public static String zodiacCorpusTop100File = "./letters/allwords-raw-top100-expected.txt";
	
	public static String[] zodiacWords = {
		"a",
		"abnomily",
		"abot",
		"about",
		"accidents",
		"across",
		"acting",
		"activity",
		"ad",
		"adapted",
		"additional",
		"address",
		"adhesive",
		"adjusted",
		"ads",
		"advertisement",
		"afraid",
		"after",
		"afterlife",
		"afternoon",
		"again",
		"aim",
		"airplane",
		"alive",
		"all",
		"alley",
		"alleys",
		"allways",
		"alone",
		"along",
		"also",
		"always",
		"am",
		"ammo",
		"ammonium",
		"an",
		"anamal",
		"and",
		"anger",
		"angry",
		"anilating",
		"ann",
		"announce",
		"anonymously",
		"another",
		"answer",
		"ant",
		"any",
		"anyone",
		"anyway",
		"apart",
		"aprox",
		"are",
		"area",
		"aredead",
		"army",
		"arose",
		"around",
		"arthur",
		"as",
		"ask",
		"asked",
		"asking",
		"ass",
		"asses",
		"at",
		"attention",
		"attn",
		"aug",
		"autographs",
		"averly",
		"avery",
		"awake",
		"away",
		"awfully",
		"baby",
		"babysits",
		"back",
		"backwards",
		"bad",
		"badlands",
		"bag",
		"bags",
		"ball",
		"ban",
		"banjo",
		"barrel",
		"basement",
		"bat",
		"bates",
		"battered",
		"battery",
		"bay",
		"bayonet",
		"be",
		"beam",
		"beautiful",
		"because",
		"become",
		"beef",
		"been",
		"before",
		"began",
		"behind",
		"being",
		"belli",
		"best",
		"better",
		"betty",
		"beware",
		"big",
		"billiard",
		"billowy",
		"black",
		"blank",
		"blanks",
		"blast",
		"block",
		"blocks",
		"blond",
		"blood",
		"bloodsoak",
		"bluber",
		"blue",
		"bluff",
		"blurb",
		"bomb",
		"boo",
		"booboos",
		"book",
		"booth",
		"boots",
		"bore",
		"bought",
		"boughten",
		"bouncing",
		"boy",
		"brand",
		"breast",
		"broke",
		"brown",
		"brunett",
		"brush",
		"bryan",
		"bu",
		"bulb",
		"bullet",
		"bullshit",
		"burn",
		"burned",
		"burning",
		"bury",
		"bus",
		"buss",
		"busses",
		"bussy",
		"but",
		"buton",
		"butons",
		"buttons",
		"by",
		"bye",
		"cab",
		"caen",
		"cages",
		"calif",
		"call",
		"called",
		"calvin",
		"came",
		"can",
		"cancel",
		"cannot",
		"capable",
		"car",
		"cardboard",
		"cars",
		"catch",
		"caught",
		"cc",
		"cecelia",
		"ceiling",
		"cell",
		"cement",
		"cene",
		"cent",
		"center",
		"centuries",
		"cerous",
		"change",
		"chapter",
		"check",
		"checks",
		"cheer",
		"cherry",
		"chief",
		"children",
		"chocked",
		"christmas",
		"christmass",
		"chronicle",
		"cicles",
		"cid",
		"cipher",
		"circle",
		"citizen",
		"city",
		"clean",
		"clever",
		"clews",
		"clock",
		"closeing",
		"clowns",
		"coated",
		"coats",
		"code",
		"collect",
		"collecting",
		"columbus",
		"column",
		"come",
		"comidy",
		"commic",
		"committ",
		"complet",
		"complete",
		"complied",
		"comply",
		"concern",
		"concerning",
		"concerns",
		"conditions",
		"confession",
		"conscience",
		"considerably",
		"consists",
		"consternation",
		"consternt",
		"contains",
		"continually",
		"continues",
		"contrary",
		"control",
		"controol",
		"cop",
		"copper",
		"cops",
		"corner",
		"could",
		"count",
		"country",
		"county",
		"coupled",
		"coupple",
		"coupples",
		"cover",
		"coverage",
		"crack",
		"cracked",
		"crackproof",
		"credit",
		"crime",
		"crooked",
		"cruse",
		"cruzeing",
		"cry",
		"cues",
		"cut",
		"cutting",
		"cyipher",
		"daily",
		"damn",
		"dangertue",
		"darck",
		"dark",
		"darkened",
		"darlene",
		"date",
		"dates",
		"daughters",
		"david",
		"dead",
		"dear",
		"death",
		"deep",
		"delicious",
		"deplorable",
		"deposit",
		"des",
		"descise",
		"describe",
		"described",
		"description",
		"deserve",
		"detail",
		"details",
		"developer",
		"diablo",
		"did",
		"die",
		"died",
		"different",
		"dificult",
		"dig",
		"directed",
		"disappeared",
		"disorder",
		"distributor",
		"do",
		"doesnt",
		"dogs",
		"doing",
		"dont",
		"doo",
		"doomed",
		"door",
		"dot",
		"double",
		"down",
		"dozen",
		"dragon",
		"draining",
		"draw",
		"dress",
		"dressed",
		"drew",
		"dripping",
		"driven",
		"driver",
		"drivers",
		"drove",
		"drownding",
		"dud",
		"dump",
		"dungen",
		"during",
		"each",
		"east",
		"easy",
		"eat",
		"eats",
		"ebeorietemethhpitithe",
		"echo",
		"editor",
		"efect",
		"efective",
		"either",
		"electric",
		"elimination",
		"elizabeth",
		"else",
		"elses",
		"end",
		"ended",
		"engine",
		"enjoy",
		"enough",
		"enterprise",
		"entirle",
		"envelope",
		"epasode",
		"etc",
		"even",
		"evening",
		"events",
		"ever",
		"evere",
		"every",
		"everyone",
		"everything",
		"evidenced",
		"examiner",
		"except",
		"exorcist",
		"experence",
		"expression",
		"extreamly",
		"f",
		"face",
		"fact",
		"facts",
		"fake",
		"fall",
		"faraday",
		"fart",
		"fat",
		"featuring",
		"fed",
		"feel",
		"feet",
		"fellows",
		"felt",
		"female",
		"ferrin",
		"fertilizer",
		"few",
		"fiddle",
		"figgure",
		"filling",
		"find",
		"finding",
		"fingerprints",
		"fingertip",
		"fingertips",
		"finish",
		"finished",
		"fire",
		"fired",
		"fireing",
		"firm",
		"first",
		"fk",
		"flabby",
		"flash",
		"flicting",
		"floor",
		"foe",
		"followed",
		"following",
		"for",
		"forest",
		"forrest",
		"fought",
		"found",
		"four",
		"fran",
		"francisco",
		"friend",
		"from",
		"front",
		"frunt",
		"fry",
		"ft",
		"full",
		"fun",
		"funny",
		"future",
		"gal",
		"game",
		"gave",
		"geary",
		"get",
		"getting",
		"ghia",
		"gilbert",
		"girl",
		"girls",
		"give",
		"given",
		"gives",
		"glorification",
		"glory",
		"glove",
		"gloves",
		"go",
		"going",
		"good",
		"goof",
		"gorged",
		"got",
		"grabbed",
		"grave",
		"gravel",
		"great",
		"groups",
		"grown",
		"guards",
		"guess",
		"gummed",
		"gun",
		"guy",
		"had",
		"half",
		"hand",
		"hands",
		"handwritten",
		"hang",
		"happen",
		"happy",
		"hard",
		"hartnell",
		"has",
		"hate",
		"have",
		"having",
		"he",
		"head",
		"headquarters",
		"heads",
		"hear",
		"heat",
		"heights",
		"hell",
		"hellhole",
		"help",
		"her",
		"herald",
		"herb",
		"here",
		"herman",
		"hey",
		"high",
		"hill",
		"hills",
		"him",
		"himself",
		"his",
		"hit",
		"hold",
		"holding",
		"hole",
		"holes",
		"holly",
		"home",
		"homicide",
		"hope",
		"horizon",
		"horrible",
		"hose",
		"how",
		"howers",
		"hummerist",
		"hung",
		"i",
		"identity",
		"idiout",
		"if",
		"ignored",
		"im",
		"implied",
		"implore",
		"impriest",
		"in",
		"inches",
		"initials",
		"insane",
		"inside",
		"insist",
		"instead",
		"interesting",
		"inthusiastic",
		"into",
		"irritating",
		"is",
		"isdead",
		"isnt",
		"it",
		"its",
		"ive",
		"jensen",
		"joaquin",
		"job",
		"johns",
		"jolly",
		"judicial",
		"july",
		"just",
		"justifiable",
		"kathleen",
		"keep",
		"kharmann",
		"kicked",
		"kiddies",
		"kids",
		"kill",
		"killed",
		"killedher",
		"killedhim",
		"killer",
		"killing",
		"killings",
		"kind",
		"kissed",
		"kit",
		"knee",
		"knife",
		"know",
		"lack",
		"lady",
		"lake",
		"lamb",
		"last",
		"laugh",
		"laughs",
		"lay",
		"leaf",
		"leaped",
		"leave",
		"leaving",
		"left",
		"legs",
		"let",
		"letter",
		"liberation",
		"library",
		"lies",
		"life",
		"lift",
		"light",
		"like",
		"lips",
		"list",
		"listen",
		"lit",
		"little",
		"living",
		"ll",
		"lonely",
		"long",
		"longer",
		"look",
		"looking",
		"loose",
		"lot",
		"lou",
		"luger",
		"lyeing",
		"machine",
		"made",
		"mageau",
		"mail",
		"mailed",
		"make",
		"making",
		"man",
		"manner",
		"manpower",
		"map",
		"maple",
		"marco",
		"marked",
		"market",
		"mask",
		"mason",
		"massive",
		"masterpiece",
		"material",
		"matte",
		"matter",
		"may",
		"maybe",
		"me",
		"meaning",
		"meannie",
		"meannies",
		"meanwhile",
		"mech",
		"melvin",
		"melvins",
		"men",
		"mery",
		"messy",
		"michael",
		"middle",
		"might",
		"mikado",
		"mildly",
		"mile",
		"miles",
		"min",
		"mind",
		"mine",
		"minutes",
		"mirror",
		"miss",
		"missed",
		"mission",
		"mm",
		"modesto",
		"moment",
		"money",
		"months",
		"more",
		"morning",
		"most",
		"motor",
		"motorcicles",
		"mount",
		"mouth",
		"move",
		"movie",
		"mr",
		"much",
		"murder",
		"murderer",
		"murders",
		"must",
		"my",
		"myself",
		"nails",
		"name",
		"nasty",
		"near",
		"neck",
		"need",
		"needling",
		"needs",
		"negro",
		"neither",
		"never",
		"nevermind",
		"new",
		"news",
		"newspaper",
		"next",
		"nice",
		"night",
		"nights",
		"nine",
		"nineth",
		"nitrate",
		"no",
		"noise",
		"none",
		"norse",
		"north",
		"not",
		"note",
		"notice",
		"now",
		"noze",
		"nucences",
		"oct",
		"of",
		"off",
		"offenders",
		"offered",
		"offs",
		"oh",
		"oil",
		"old",
		"on",
		"once",
		"one",
		"ones",
		"only",
		"open",
		"openly",
		"or",
		"order",
		"orginast",
		"origionaly",
		"other",
		"others",
		"out",
		"oute",
		"outfits",
		"over",
		"own",
		"p",
		"pace",
		"page",
		"pages",
		"pain",
		"pane",
		"panes",
		"pants",
		"paper",
		"paradice",
		"park",
		"parked",
		"parking",
		"parkway",
		"part",
		"parts",
		"passed",
		"patterned",
		"paul",
		"pay",
		"peek",
		"peekaboo",
		"peeled",
		"pen",
		"pencel",
		"people",
		"pepermint",
		"permits",
		"persons",
		"pestulentual",
		"phantom",
		"phomphit",
		"phone",
		"photoelectric",
		"phraises",
		"piano",
		"pick",
		"pictures",
		"piece",
		"pig",
		"pigs",
		"pine",
		"pines",
		"place",
		"placed",
		"platt",
		"play",
		"players",
		"please",
		"pleass",
		"plunged",
		"point",
		"pointblank",
		"police",
		"polish",
		"poor",
		"posibly",
		"positivily",
		"pow",
		"power",
		"presidio",
		"press",
		"price",
		"print",
		"prior",
		"private",
		"promiced",
		"proof",
		"properly",
		"prove",
		"provences",
		"prowl",
		"ps",
		"psychological",
		"public",
		"published",
		"pulled",
		"punish",
		"punished",
		"put",
		"questions",
		"quietly",
		"quite",
		"race",
		"raceing",
		"races",
		"radians",
		"rage",
		"rain",
		"rampage",
		"rather",
		"re",
		"reach",
		"read",
		"ready",
		"really",
		"reason",
		"reborn",
		"recent",
		"red",
		"refer",
		"reflector",
		"remain",
		"renault",
		"report",
		"reports",
		"requires",
		"rest",
		"rh",
		"ride",
		"rife",
		"right",
		"rile",
		"ring",
		"riverside",
		"road",
		"roat",
		"robberies",
		"rocks",
		"roger",
		"rolled",
		"rope",
		"routine",
		"rub",
		"rubber",
		"rubed",
		"run",
		"runnig",
		"running",
		"rush",
		"s",
		"safe",
		"said",
		"salt",
		"same",
		"san",
		"sat",
		"saterical",
		"save",
		"saw",
		"say",
		"saying",
		"schedule",
		"school",
		"scream",
		"screaming",
		"searched",
		"searching",
		"seat",
		"see",
		"seeing",
		"seen",
		"self",
		"selling",
		"selves",
		"sensibilities",
		"sent",
		"separation",
		"sept",
		"seranader",
		"serious",
		"set",
		"seven",
		"sf",
		"sfpd",
		"shabbly",
		"shake",
		"shaking",
		"shall",
		"shapely",
		"she",
		"shepard",
		"shirt",
		"shit",
		"shoe",
		"shoes",
		"shook",
		"shoot",
		"shot",
		"shots",
		"should",
		"show",
		"shrink",
		"shure",
		"shut",
		"sick",
		"side",
		"sides",
		"sight",
		"sights",
		"signed",
		"silowets",
		"since",
		"singurly",
		"sirs",
		"sisters",
		"sitting",
		"skin",
		"sla",
		"slaughter",
		"slaves",
		"slay",
		"sloi",
		"slower",
		"slowly",
		"small",
		"smarter",
		"snd",
		"so",
		"society",
		"som",
		"some",
		"someday",
		"someone",
		"something",
		"sorry",
		"sound",
		"south",
		"speaking",
		"spell",
		"spilling",
		"splinters",
		"spoiling",
		"spot",
		"spray",
		"springs",
		"spurting",
		"square",
		"squealing",
		"squirm",
		"squirmed",
		"srounded",
		"st",
		"stab",
		"stabbed",
		"stained",
		"stalking",
		"stamps",
		"start",
		"starting",
		"state",
		"stated",
		"station",
		"stine",
		"stop",
		"store",
		"stored",
		"stove",
		"strange",
		"stray",
		"street",
		"streets",
		"strike",
		"struggle",
		"stumbling",
		"stupid",
		"such",
		"suggest",
		"suicides",
		"sullivan",
		"summer",
		"sun",
		"super",
		"superior",
		"supply",
		"suspicious",
		"swamped",
		"switch",
		"symbionese",
		"sympathy",
		"system",
		"tag",
		"take",
		"talk",
		"talked",
		"tape",
		"taped",
		"targets",
		"task",
		"taste",
		"taxi",
		"teenagers",
		"tell",
		"telling",
		"ten",
		"tenth",
		"teritory",
		"tests",
		"thae",
		"than",
		"thank",
		"thashing",
		"that",
		"thats",
		"the",
		"their",
		"them",
		"then",
		"there",
		"theres",
		"these",
		"they",
		"theyd",
		"thing",
		"thingmebob",
		"things",
		"think",
		"thinking",
		"third",
		"thirteenth",
		"this",
		"thos",
		"those",
		"though",
		"three",
		"thrilling",
		"throat",
		"through",
		"thumbs",
		"thus",
		"tie",
		"till",
		"time",
		"times",
		"tip",
		"tire",
		"tired",
		"tires",
		"tissues",
		"titwillo",
		"to",
		"told",
		"tone",
		"too",
		"tools",
		"top",
		"torture",
		"toschi",
		"town",
		"trace",
		"transparent",
		"trees",
		"trigger",
		"trucks",
		"truley",
		"truly",
		"try",
		"trying",
		"tubes",
		"tut",
		"twich",
		"twiched",
		"twisted",
		"two",
		"type",
		"uncertain",
		"uncompromising",
		"under",
		"underground",
		"unhappy",
		"union",
		"unnoticible",
		"unspoiling",
		"untill",
		"unwilling",
		"up",
		"upon",
		"use",
		"used",
		"useing",
		"vallejo",
		"ventalate",
		"very",
		"victim",
		"victims",
		"victom",
		"violence",
		"violently",
		"volkswagen",
		"wachamacallit",
		"wait",
		"waited",
		"waiting",
		"walking",
		"walks",
		"wall",
		"wallet",
		"wandering",
		"want",
		"warm",
		"warning",
		"was",
		"washington",
		"watch",
		"water",
		"wave",
		"waveing",
		"way",
		"we",
		"wear",
		"wearing",
		"week",
		"well",
		"went",
		"were",
		"west",
		"western",
		"what",
		"whatshisname",
		"when",
		"whence",
		"where",
		"whether",
		"which",
		"while",
		"white",
		"who",
		"whole",
		"whom",
		"whrite",
		"why",
		"wild",
		"will",
		"willing",
		"willingly",
		"window",
		"wipe",
		"wiped",
		"wipeing",
		"wire",
		"wise",
		"wish",
		"wishes",
		"with",
		"wives",
		"woeman",
		"wonder",
		"wondering",
		"wont",
		"word",
		"work",
		"would",
		"wouldnt",
		"wound",
		"write",
		"writing",
		"x",
		"xmass",
		"xxx",
		"year",
		"years",
		"yes",
		"yet",
		"you",
		"youll",
		"young",
		"your",
		"yours",
		"zodiac"
	};

	/* test the top words as if it were a fixed plugger */
  public static String[] zodiacTopWords = {
  	"killing","people","because","itis","isthe","something","collecting","more","than","most","kill","better","best","die","will","slaves","fun","after","paradice","gives","thrill","man","getting","girl","stop","down","name","part","with","wild"
  };  
	/* common zodiac words and word pairings. */
	public static String[] zodiacTopWordsSMEG = {
		/* common words.  in general, these are words that occur more than once in the zodiac corpus.*/
		"across",
		"always",
		"anyone",
		"barrel",
		"before",
		"bought",
		"diablo",
		"double",
		"except",
		"having",
		"inches",
		"lonely",
		"parked",
		"pulled",
		"report",
		"scream",
		"stamps",
		"things",
		"though",
		"throat",
		"victom",
		"victim",
		"center",
		"doesnt",
		"longer",
		"melvin",
		"public",
		"should",
		"untill",
		"murder",
		"around",
		"killed",
		"little",
		"please",
		"slaves",
		"cipher",
		"others",
		"school",
		"editor",
		"rather",
		"missed",
		"police",
		"people",
		"zodiac",
		"slave",
		"catch",
		"cheer",
		"clean",
		"count",
		"crack",
		"dress",
		"ended",
		"enjoy",
		"every",
		"fired",
		"flash",
		"found",
		"hills",
		"laugh",
		"loose",
		"maple",
		"marco",
		"mount",
		"movie",
		"phone",
		"price",
		"quite",
		"ready",
		"right",
		"seven",
		"shure",
		"sight",
		"small",
		"sorry",
		"thats",
		"under",
		"water",
		"where",
		"while",
		"whole",
		"yours",
		"after",
		"blast",
		"death",
		"first",
		"going",
		"leave",
		"maybe",
		"might",
		"north",
		"other",
		"paper",
		"parts",
		"prove",
		"shoot",
		"state",
		"times",
		"asked",
		"black",
		"frunt",
		"hands",
		"happy",
		"knife",
		"nasty",
		"night",
		"print",
		"theyd",
		"which",
		"light",
		"could",
		"their",
		"think",
		"never",
		"thing",
		"there",
		"would",
		"about",
		"shall",
		"ammo",
		"book",
		"came",
		"cars",
		"come",
		"dark",
		"date",
		"dead",
		"each",
		"easy",
		"else",
		"even",
		"ever",
		"fake",
		"feet",
		"felt",
		"find",
		"fire",
		"fran",
		"gave",
		"give",
		"hand",
		"hell",
		"high",
		"kids",
		"knee",
		"left",
		"move",
		"need",
		"news",
		"ones",
		"open",
		"paul",
		"pick",
		"play",
		"road",
		"same",
		"seat",
		"seen",
		"sent",
		"sept",
		"sfpd",
		"sick",
		"stop",
		"told",
		"town",
		"warm",
		"also",
		"area",
		"best",
		"city",
		"code",
		"head",
		"hope",
		"keep",
		"kind",
		"life",
		"look",
		"most",
		"name",
		"next",
		"part",
		"west",
		"work",
		"year",
		"away",
		"blue",
		"help",
		"here",
		"july",
		"kill",
		"make",
		"much",
		"must",
		"page",
		"take",
		"want",
		"wont",
		"cops",
		"dear",
		"girl",
		"into",
		"know",
		"said",
		"shot",
		"wear",
		"well",
		"went",
		"dont",
		"good",
		"none",
		"only",
		"park",
		"tell",
		"what",
		"been",
		"down",
		"list",
		"nice",
		"over",
		"very",
		"bomb",
		"just",
		"more",
		"from",
		"time",
		"were",
		"last",
		"back",
		"like",
		"some",
		"when",
		"then",
		"your",
		"they",
		"them",
		"will",
		"with",
		"that",
		"have",
		"this",
		"aim",
		"ask",
		"aug",
		"bat",
		"bay",
		"cab",
		"dig",
		"etc",
		"fry",
		"has",
		"hey",
		"oct",
		"put",
		"say",
		"too",
		"top",
		"use",
		"why",
		"yet",
		"boy",
		"end",
		"few",
		"let",
		"lot",
		"min",
		"run",
		"saw",
		"two",
		"yes",
		"any",
		"bus",
		"cut",
		"die",
		"fun",
		"him",
		"how",
		"man",
		"pig",
		"red",
		"set",
		"tut",
		"ive",
		"new",
		"cop",
		"got",
		"gun",
		"his",
		"off",
		"san",
		"get",
		"had",
		"now",
		"see",
		"way",
		"can",
		"car",
		"did",
		"are",
		"one",
		"out",
		"she",
		"but",
		"all",
		"her",
		"who",
		"not",
		"for",
		"was",
		"and",
		"you",
		"the",
		"address",
		"detail",
		"evening",
		"finding",
		"machine",
		"plunged",
		"sitting",
		"someone",
		"whether",
		"wouldnt",
		"control",
		"waiting",
		"walking",
		"wearing",
		"streets",
		"killing",
		"because",
		"buttons",
		"vallejo",
		"speaking",
		"children",
		//"titwillo",
		//"presidio",
		"peekaboo",
		"paradice","paradise",
		"killings",
		"examiner",
		"violence",
		//"thinking",
		"riverside",
		"chronicle",
		"something",
		"francisco",
		"beautiful",
		"attention",
		//"wondering",
		//"willingly",
		//"wandering",
		//"violently",
		"violent",
		"christmass", "christmas",
		"washington",
		"collecting",
		//"enterprise",
		//"volkswagen",
		//"unspoiling",
		//"thirteenth",
		//"thingmebob",
		//"symbionese",
		"suspicious",
		//"unnoticible",
		//"underground",
		//"transparent",
		//"motorcicles",
		//"masterpiece",
		//"justifiable",
		//"interesting",
		//"handwritten",
		//"elimination",
		//"distributor",
		//"whatshisname",
		//"pestulentual",
		//"inthusiastic",
		//"headquarters",
		//"fingerprints",
		//"considerably",
		//"glorification",
		//"wachamacallit",
		//"sensibilities",
		//"psychological",
		//"photoelectric",
		//"consternation",
		//"advertisement",
		//"uncompromising",
		/* common word pairings */
		"inthe",
		"iam",
		"ishall",
		"ihave",
		"isthe",
		"ofthe",
		"thezodiac",
		"bemissed",
		"zodiacspeaking",
		"thisis",
		"wheni",
		"tothe",
		"itwas",
		"ifyou",
		"iwas",
		"thepolice",
		"ofthem",
		"itis",
		"iwill",
		"witha",
		"thati",
		"onthe",
		"willnot",
		"thembe",
		"theway",
		"noneof",
		"mei",
		"idid",
		"havebeen",
		"donot",
		"didnot",
		"andthe",
		"youdo",
		"wasa",
		"speakingi",
		"ivegot",
		"fromthe",
		"forthe"	
	};
	
	public static String[] zodiacWordsCipherOnly = {
		/* 408 char cipher */
		"a",
		"afterlife",
		"all",
		"anamal",
		"animal",
		"because",
		"become",
		"best",
		"better",
		"collecting",
		"dangerous",
		"dangertue",
		"down",
		"ebeorietemethhpiti",
		"even",
		"experence",
		"experience",
		"foe",
		"forest",
		"forrest",
		"fun",
		"game",
		"getting",
		"girl",
		"give",
		"gives",
		"have",
		"i",
		"in",
		"is",
		"it",
		"kill",
		"killed",
		"killing",
		"like",
		"man",
		"me",
		"more",
		"most",
		"much",
		"my",
		"name",
		"not",
		"of",
		"off",
		"or",
		"paradice",
		"paradise",
		"part",
		"people",
		"rocks",
		"slaves",
		"sloi",
		"slow",
		"snd",
		"and",
		"so",
		"something",
		"stop",
		"thae",
		"than",
		"that",
		"the",
		"thrilling",
		"to",
		"try",
		"when",
		"wild",
		"will",
		"with",
		"you",
		"your",
		"zodiac",
		/* confession */
		"confession"
	};
	
	/* interesting zodiac-esque words that were common in letter/notes/first cipher. */
	public static String[] zodiacWordsInteresting = 
	{
		"accident",
		"afterlife",
		"autograph",
		"basement",
		"because",
		"black",
		"blast",
		"bomb",
		"button",
		"buttons",
		"children",
		"christmas",
		"christmass",
		"chronicle",
		"cipher",
		"collect",
		"cops",
		"daughter",
		"death",
		"delicious",
		"disappear",
		"editor",
		"envelope",
		"evidence",
		"francisco",
		"hands",
		"happy",
		"july",
		"killed",
		"killing",
		"knife",
		"light",
		"little",
		"missed",
		"murder",
		"murderer",
		"nasty",
		"newspaper",
		"never",
		"night",
		"offender",
		"others",
		"paper",
		"paradice",
		"paradise",
		"parts",
		"people",
		"please",
		"police",
		"prove",
		"public",
		"question",
		"rather",
		"riverside",
		"robberies",
		"school",
		"scream",
		"screaming",
		"shoot",
		"should",
		"slaughter",
		"slaves",
		"something",
		"speaking",
		"splinter",
		"spilling",
		"spurting",
		"squealing",
		"squirm",
		"squirmed",
		"stalking",
		"streets",		
		"struggle",
		"suicide",
		"teenager",
		"thing",
		"throat",
		"vallejo",
		"violent",
		"waiting",
		"walking",
		"washington",
		"wearing",
		"willing",
		"would",
		"zodiac"
		};
	
	public static String[] zodiacWordsPaired = {
		"afew",        /* "a few" */
		"alot",        /* "a lot" */
		"buti",        /* "but i" */
		"domy",        /* "do my" */
		"fora",        /* "for a" */
		"gota",        /* "got a" */
		"idid",        /* "i did" */
		"isaw",        /* "i saw" */
		"iwas",        /* "i was" */
		"inmy",        /* "in my" */
		"itis",        /* "it is" */
		"ofmy",        /* "of my" */
		"onmy",        /* "on my" */
		"thes",        /* "the s" */
		"tome",        /* "to me" */
		"upto",        /* "up to" */
		"wasa",        /* "was a" */
		"agood",        /* "a good" */
		"amthe",        /* "am the" */
		"atthe",        /* "at the" */
		"bethe",        /* "be the" */
		"bythe",        /* "by the" */
		"donot",        /* "do not" */
		"forme",        /* "for me" */
		"ihave",        /* "i have" */
		"ihope",        /* "i hope" */
		"isaid",        /* "i said" */
		"iwant",        /* "i want" */
		"iwill",        /* "i will" */
		"ifyou",        /* "if you" */
		"inthe",        /* "in the" */
		"isthe",        /* "is the" */
		"itwas",        /* "it was" */
		"mycar",        /* "my car" */
		"ofthe",        /* "of the" */
		"onthe",        /* "on the" */
		"thati",        /* "that i" */
		"theni",        /* "then i" */
		"todie",        /* "to die" */
		"tosee",        /* "to see" */
		"tothe",        /* "to the" */
		"toyou",        /* "to you" */
		"wheni",        /* "when i" */
		"witha",        /* "with a" */
		"youdo",        /* "you do" */
		"allthe",        /* "all the" */
		"andthe",        /* "and the" */
		"boywas",        /* "boy was" */
		"didnot",        /* "did not" */
		"forthe",        /* "for the" */
		"helpme",        /* "help me" */
		"icould",        /* "i could" */
		"ishall",        /* "i shall" */
		"iwould",        /* "i would" */
		"inthis",        /* "in this" */
		"inyour",        /* "in your" */
		"ivegot",        /* "ive got" */
		"manwho",        /* "man who" */
		"noneof",        /* "none of" */
		"ofjuly",        /* "of july" */
		"ofthem",        /* "of them" */
		"onyour",        /* "on your" */
		"partof",        /* "part of" */
		"thatmy",        /* "that my" */
		"theone",        /* "the one" */
		"theway",        /* "the way" */
		"thembe",        /* "them be" */
		"thisis",        /* "this is" */
		"tohave",        /* "to have" */
		"tuttut",        /* "tut tut" */
		"willbe",        /* "will be" */
		"alittle",        /* "a little" */
		"downthe",        /* "down the" */
		"fromthe",        /* "from the" */
		"hopeyou",        /* "hope you" */
		"mything",        /* "my thing" */
		"neverbe",        /* "never be" */
		"notwear",        /* "not wear" */
		"shewill",        /* "she will" */
		"slavesi",        /* "slaves i" */
		"tellyou",        /* "tell you" */
		"thebomb",        /* "the bomb" */
		"thelast",        /* "the last" */
		"thelist",        /* "the list" */
		"themost",        /* "the most" */
		"thepark",        /* "the park" */
		"theyare",        /* "they are" */
		"toprove",        /* "to prove" */
		"willnot",        /* "will not" */
		"withthe",        /* "with the" */
		"youhave",        /* "you have" */
		"youknow",        /* "you know" */
		"youwill",        /* "you will" */
		"bemissed",        /* "be missed" */
		"centerof",        /* "center of" */
		"havebeen",        /* "have been" */
		"myslaves",        /* "my slaves" */
		"ofslaves",        /* "of slaves" */
		"peoplein",        /* "people in" */
		"somenice",        /* "some nice" */
		"therewas",        /* "there was" */
		"theywere",        /* "they were" */
		"wearsome",        /* "wear some" */
		"abouttime",        /* "about time" */
		"allpeople",        /* "all people" */
		"aroundthe",        /* "around the" */
		"missedand",        /* "missed and" */
		"peoplewho",        /* "people who" */
		"shallhave",        /* "shall have" */
		"speakingi",        /* "speaking i" */
		"thecenter",        /* "the center" */
		"thepolice",        /* "the police" */
		"thezodiac",        /* "the zodiac" */
		"theydnone",        /* "theyd none" */
		"deareditor",        /* "dear editor" */
		"havekilled",        /* "have killed" */
		"littlelist",        /* "little list" */
		"pleasehelp",        /* "please help" */
		"thevallejo",        /* "the vallejo" */
		"thiscipher",        /* "this cipher" */
		"waitingfor",        /* "waiting for" */
		"wouldnever",        /* "would never" */
		"nicebuttons",        /* "nice buttons" */
		"collectingof",        /* "collecting of" */
		"sanfrancisco",        /* "san francisco" */
		"zodiacspeaking"        /* "zodiac speaking" */
	};
	
	public static String[] zodiacTop166Digraphs = { // these are sorted by freq of occurrence in all zodiac correspondences
		"th",
		"he",
		"in",
		"er",
		"ou",
		"ll",
		"on",
		"ng",
		"an",
		"ha",
		"is",
		"to",
		"re",
		"ve",
		"it",
		"en",
		"le",
		"at",
		"ar",
		"st", // 20
		"as",
		"ed",
		"hi",
		"or",
		"il",
		"es",
		"me",
		"li",
		"nd",
		"al",
		"ne",
		"ea",
		"nt",
		"se",
		"wa",
		"of",
		"ut",
		"be",
		"te",
		"sh",
		"wi",
		"yo",
		"ti",
		"ho",
		"co",
		"no",
		"ri",
		"ot",
		"ce",
		"ic",
		"pe",
		"de",
		"di",
		"av",
		"un",
		"wh",
		"ro",
		"om",
		"ch",
		"ac",
		"el",
		"ki",
		"ca",
		"ra",
		"et",
		"lo",
		"la",
		"ma",
		"ol",
		"oo",
		"ee",
		"am",
		"ul",
		"bo",
		"us",
		"so",
		"ke",
		"do",
		"my",
		"pa",
		"ow",
		"bu",
		"id",
		"mi",
		"ni",
		"pl",
		"ur",
		"fo",
		"ad",
		"op",
		"we",
		"ss",
		"ly",
		"ge",
		"bl",
		"ir",
		"ab",
		"ck",
		"si",
		"gh",
		"if",
		"ld",
		"ig",
		"ay",
		"em",
		"im",
		"ba",
		"ry",
		"ta",
		"mo",
		"rt",
		"tt",
		"ns",
		"ey",
		"ec",
		"ai",
		"rs",
		"ts",
		"fe",
		"wo",
		"tr",
		"pr",
		"io",
		"ci",
		"po",
		"od",
		"ht",
		"by",
		"ev",
		"ak",
		"up",
		"iv",
		"ia",
		"fi",
		"sa",
		"ie",
		"au",
		"ap",
		"fr",
		"nc",
		"sp",
		"ei",
		"ct",
		"ru",
		"ov",
		"vi",
		"go",
		"dr",
		"sc",
		"os",
		"na",
		"ug",
		"cr",
		"pi",
		"ag",
		"rk",
		"rd",
		"gi",
		"ep",
		"eo",
		"hr",
		"wn",
		"ps",
		"ip",
		"da",
		"ik"		
	};
	
	/** interesting one-letter words.  we want to exclude solutions that force one-letter words that AREN'T in this list. */
	public static String[] zodiacWordsOneLetter = { "a", "i", "o" };
	/** interesting two-letter words.  we want to exclude solutions that force two-letter words that AREN'T in this list. */
	public static String[] zodiacWordsTwoLetter = { "ad","am","an","as","at","be","by","do","go","he","if","im","in","is","it","me","mr","my","no","of","oh","on","or","ps","re","sf","so","st","to","up","we" };
	/** a hash of prefixes for all one, two, three, and four letter words */
	public static THashSet<String> zodiacWordsSmallPrefixes;
	
	
	public static final String[] brute4Plugger = new String[] {
		"ilikekillingpeople",
		"likekillingpeoplebecause",
		"killingpeoplebecauseitis",
		"peoplebecauseitisso",
		"becauseitissomuch",
		"itissomuchfun",
		"somuchfunitis",
		"muchfunitismore",
		"funitismorefun",
		"itismorefunthan",
		"morefunthankilling",
		"funthankillingwild",
		"thankillingwildgame",
		"killingwildgamein",
		"wildgameinthe",
		"gameintheforrest",
		"intheforrestbecause",
		"theforrestbecauseman",
		"forrestbecausemanisthe",
		"becausemanisthemost",
		"manisthemostdangertue",
		"isthemostdangertueanamal",
		"mostdangertueanamalof",
		"dangertueanamalofall",
		"anamalofallto",
		"ofalltokill",
		"alltokillsomething",
		"tokillsomethinggives",
		"killsomethinggivesme",
		"somethinggivesmethe",
		"givesmethemost",
		"methemostthrilling",
		"themostthrillingexperence",
		"mostthrillingexperenceitis",
		"thrillingexperenceitiseven",
		"experenceitisevenbetter",
		"itisevenbetterthan",
		"evenbetterthangetting",
		"betterthangettingyour",
		"thangettingyourrocks",
		"gettingyourrocksoff",
		"yourrocksoffwith",
		"rocksoffwitha",
		"offwithagirl",
		"withagirlthe",
		"agirlthebest",
		"girlthebestpart",
		"thebestpartof",
		"bestpartofitis",
		"partofitisthae",
		"ofitisthaewhen",
		"itisthaewheni",
		"thaewhenidie",
		"whenidiei",
		"idieiwill",
		"dieiwillbe",
		"iwillbereborn",
		"willberebornin",
		"bereborninparadice",
		"reborninparadicesnd",
		"inparadicesndall",
		"paradicesndallthe",
		"sndallthei",
		"alltheihave",
		"theihavekilled",
		"ihavekilledwill",
		"havekilledwillbecome",
		"killedwillbecomemy",
		"willbecomemyslaves",
		"becomemyslavesi",
		"myslavesiwill",
		"slavesiwillnot",
		"iwillnotgive",
		"willnotgiveyou",
		"notgiveyoumy",
		"giveyoumyname",
		"youmynamebecause",
		"mynamebecauseyou",
		"namebecauseyouwill",
		"becauseyouwilltry",
		"youwilltryto",
		"willtrytosloi",
		"trytosloidown",
		"tosloidownor",
		"sloidownorstop",
		"downorstopmy",
		"orstopmycollecting",
		"stopmycollectingof",
		"mycollectingofslaves",
		"collectingofslavesfoe",
		"ofslavesfoemy",
		"slavesfoemyafterlife"		
	};
	
	public static THashMap<String, Float>[] zodiacNGramFrequencies = null;
	public static THashSet[] zodiacNGramKeySet = null;

	/** map of ngrams to map of proceeding ngrams to occurrence frequencies relative to set of all ngrams associated with the preceding ngram. */ 
	public static THashMap<String, THashMap<String, Float>>[] zodiacNGramOrderFrequencies = null;

	
	static public String getContents(File aFile) {
		return getContents(aFile, true);
	}
	
	static public String getContents(File aFile, boolean removeNewlines) {
    //...checks on aFile are elided
    StringBuffer contents = new StringBuffer();

    //declared here only to make visible to finally clause
    BufferedReader input = null;
    try {
      //use buffering, reading one line at a time
      //FileReader always assumes default encoding is OK!
      input = new BufferedReader( new FileReader(aFile) );
      String line = null; //not declared within while loop
      /*
      * readLine is a bit quirky :
      * it returns the content of a line MINUS the newline.
      * it returns null only for the END of the stream.
      * it returns an empty String if two newlines appear in a row.
      */
      while (( line = input.readLine()) != null){
        contents.append(line);
        if (!removeNewlines) contents.append(System.getProperty("line.separator"));
      }
    }
    catch (FileNotFoundException ex) {
      ex.printStackTrace();
    }
    catch (IOException ex){
      ex.printStackTrace();
    }
    finally {
      try {
        if (input!= null) {
          //flush and close both "input" and its underlying FileReader
          input.close();
        }
      }
      catch (IOException ex) {
        ex.printStackTrace();
      }
    }
    return contents.toString();
  }

	/* init the big list of all zodiac words from his letters (including dupes).  size should be 3800. */
	static public synchronized void initZodiacCorpus() {
    String d = getContents(new File(zodiacCorpusFile), false);
    zodiacCorpus = d.split(System.getProperty("line.separator"));
    System.out.println("zodiac corpus has been initialized, size is " + zodiacCorpus.length);
	}

	/* init the list of zodiac words from his letters (including dupes), limited to the top-100 frequently occurring words.*/
	static public synchronized void initZodiacCorpusTop100() {
    String d = getContents(new File(zodiacCorpusTop100File), false);
    zodiacCorpusTop100 = d.split(System.getProperty("line.separator"));
    System.out.println("zodiac corpus top100 has been initialized, size is " + zodiacCorpusTop100.length);
	}
	
	
	/* get a random word from the zodiac corpus.  dupe words in the corpus coerce common words to be returned more often than words appearing less often in the corpus. */
	static public String getZodiacCorpusWord() {
		if (zodiacCorpus == null ) initZodiacCorpus();
		return zodiacCorpus[CipherGene.rand().nextInt(zodiacCorpus.length)];
	}

	/** init all dictionaries */
	static public synchronized void initDictionaries() {

		dictionaries = new THashMap<String,THashSet<String>>();
		/* init the big English dictionary */
		String d = getContents(new File(dictFile), false);
    String[] words = d.split(System.getProperty("line.separator"));
    THashSet<String> dict = dictionaries.get(D_BIG);
    dict = new THashSet<String>();
    for (int i=0; i<words.length; i++) dict.add(words[i].toLowerCase().replaceAll("'", ""));
    dictionaries.put(D_BIG,dict); 
    dict = new THashSet<String>();
    /* init all the other stuff while we're at it */
    for (int i=0; i<corpusTop100.length; i++) dict.add(corpusTop100[i]);
    dictionaries.put(D_TOP_100,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<commonWords1000.length; i++) dict.add(commonWords1000[i]); 
    dictionaries.put(D_COMMON_1000,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<commonWords5000.length; i++) dict.add(commonWords5000[i]); 
    dictionaries.put(D_COMMON_5000,dict);
    dict = new THashSet<String>();
    for (int i=0; i<zodiacTopWordsSMEG.length; i++) dict.add(zodiacTopWordsSMEG[i]); 
    dictionaries.put(D_TOP_WORDS_SMEG,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<zodiacWordsPaired.length; i++) dict.add(zodiacWordsPaired[i]); 
    dictionaries.put(D_PAIRED,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<zodiacWords.length; i++) dict.add(zodiacWords[i].toLowerCase().replaceAll("'", "")); 
    dictionaries.put(D_ZODIAC,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<zodiacWordsInteresting.length; i++) dict.add(zodiacWordsInteresting[i].toLowerCase().replaceAll("'", "")); 
    dictionaries.put(D_INTERESTING,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<zodiacWordsOneLetter.length; i++) dict.add(zodiacWordsOneLetter[i].toLowerCase().replaceAll("'", ""));
    addWildcardsToDictionary(dict);
    dictionaries.put(D_ONE_LETTER,dict); 
    dict = new THashSet<String>();
    for (int i=0; i<zodiacWordsTwoLetter.length; i++) dict.add(zodiacWordsTwoLetter[i].toLowerCase().replaceAll("'", "")); 
    addWildcardsToDictionary(dict);
    dictionaries.put(D_TWO_LETTER,dict); 
		d = getContents(new File(dict3LetterFile), false);
    words = d.split(System.getProperty("line.separator"));
    dict = new THashSet<String>();
    for (int i=0; i<words.length; i++) dict.add(words[i].toLowerCase().replaceAll("'", ""));
    addWildcardsToDictionary(dict);
    dictionaries.put(D_THREE_LETTER,dict); 
    
		d = getContents(new File(dict4LetterFile), false);
    words = d.split(System.getProperty("line.separator"));
    dict = new THashSet<String>();
    for (int i=0; i<words.length; i++) dict.add(words[i].toLowerCase().replaceAll("'", ""));
    addWildcardsToDictionary(dict);
    dictionaries.put(D_FOUR_LETTER,dict); 

    
    /* now let's populate the small words prefixes hash */
    zodiacWordsSmallPrefixes = new THashSet<String>();
    THashSet<String> prefixes;
    prefixes = CipherWordGene.makePrefixesHash(dictionaries.get(D_ONE_LETTER));
    zodiacWordsSmallPrefixes.addAll(prefixes);
    prefixes = CipherWordGene.makePrefixesHash(dictionaries.get(D_TWO_LETTER));
    zodiacWordsSmallPrefixes.addAll(prefixes);
    prefixes = CipherWordGene.makePrefixesHash(dictionaries.get(D_THREE_LETTER));
    zodiacWordsSmallPrefixes.addAll(prefixes);
    prefixes = CipherWordGene.makePrefixesHash(dictionaries.get(D_FOUR_LETTER));
    zodiacWordsSmallPrefixes.addAll(prefixes);
    
    System.out.println("- prefix hash for [1,2,3,4]-char words initialized with size " + zodiacWordsSmallPrefixes.size());
    
    Iterator<String> keys = dictionaries.keySet().iterator();
    String key;
    while (keys.hasNext()) {
    	key = keys.next();
    	System.out.println("dictionary [" + key + "] initialized with size " + dictionaries.get(key).size());
    }
    System.out.println("dictionaries have been initialized.");

  }
	
	/** adds all possible wildcard combinations to the given dictionary (this is inefficient for large dictionaries) */
	public static void addWildcardsToDictionary(THashSet<String> dict) {
		THashSet<String> wildcards = new THashSet<String>();
		Iterator<String> it = dict.iterator();
		String word;
		while (it.hasNext()) {
			word = it.next();
			wildcards.addAll(CipherWordGene.getWildPermutations(word));
		}
		dict.addAll(wildcards);
		/*it = dict.iterator();
		while (it.hasNext()) {
			word = it.next();
			System.out.println("word " + word);
		}	*/	
	}
	
	/* init the "interesting word" dictionary */
	/*
	static private synchronized void initDictionaryZodiacPriv() {
    dictionaryZodiac = new THashSet<String>();
    for (int i=0; i<zodiacWords.length; i++) dictionaryZodiac.add(zodiacWords[i].toLowerCase().replaceAll("'", ""));
    System.out.println("dictionary has been initialized. " + dictionaryZodiac.size());
  }*/
	/* init the "interesting word" dictionary */
	/*static public synchronized void initDictionaryInteresting() {
    dictionaryInteresting = new THashSet<String>();
    for (int i=0; i<zodiacWordsInteresting.length; i++) dictionaryInteresting.add(zodiacWordsInteresting[i].toLowerCase().replaceAll("'", ""));
    System.out.println("dictionary has been initialized. " + dictionaryInteresting.size());
  }*/
	
	/** given a string, returns an THashMap of words of length n that were found in the string.  words are mapped to their found indices. 
	 * 
	 * @param text the input text to search for words in
	 * @param whichDictionary the key referring to the dictionary to search in
	 * @param n the word length to look for
	 * @param removeFound if true, words are removed as they are found, to avoid finding words that overlap or are completed contained.
	 * @return an array of words.  length of array is equal to length of input string.  words are placed only at indices
	 * corresponding to where the words were located in the input string. 
	 */
	public static THashMap<String, ArrayList<Integer>> getWords(StringBuffer text, int n, String whichDictionary, boolean removeFound) {
		THashMap<String, ArrayList<Integer>> results = new THashMap<String, ArrayList<Integer>>();
		String word;
		
		ArrayList<Integer> value;
		for (int i=0; i<text.length()-n+1; i++) {
			word = text.substring(i,i+n);
			if (isWord(word, whichDictionary)) { // found word is mapped to index of its occurrences.
				if (removeFound) text.delete(i, i+word.length());
				value = results.get(word);
				if (value == null) value = new ArrayList<Integer>();
				value.add(new Integer(i));
				results.put(word, value);
			}
		}
		return results;
	}
	
	/** count the words (including dupes) returned by the THashMap generated from getWords.
	 * 
	 * @param index the THashMap 
	 * @return count of how many words (including dupes) are included in the THashMap index.
	 */
	public static int countAllWordsFromIndex(THashMap<String, ArrayList<Integer>> index) {
		int result = 0;
		Iterator<ArrayList<Integer>> it = index.values().iterator();
		ArrayList list;
		while (it.hasNext()) {
			list = it.next();
			result += list.size();
		}
		return result;
	}
	
	/** return distinct list of words found in given THashMap index */
	public static List<String> getDistinctWordsFromIndex(THashMap<String, ArrayList<Integer>> index) {
		return new ArrayList<String>(index.keySet());
	}
	

	/** count the words (not including dupes) returned by the THashMap generated from getWords.
	 * 
	 * @param index the THashMap 
	 * @return count of how many words (not including dupes) are included in the THashMap index.
	 */
	public static int countDistinctWordsFromIndex(THashMap<String, ArrayList<Integer>> index) {
		return index.keySet().size();
	}
	

	public static void checkDictionary() {
		if (dictionaries == null) initDictionaries();
	}

	/*
	public static boolean isWord(String word, THashSet dictionary) {
		checkDictionary();
		return dictionary.contains(word);
	}*/

	
	public static boolean isWord(String word, String whichDictionary) {
		checkDictionary();
		return (dictionaries.get(whichDictionary) != null && dictionaries.get(whichDictionary).contains(word));
	}
	
	public static boolean isInterestingWordShit(String word) {
		/*if (dictionaryInteresting == null) initDictionaryInteresting();
		return dictionaryInteresting.contains(word);*/
		return false;
	}
	
	public static THashMap measureNgraphs(int n) {
		File file = new File("./all-books-oneline.txt");
		String contents = getContents(file);
		System.out.println("read file with string len " + contents.length());
		return measureNgraphs(contents, n);
	}

	public static THashMap measureNgraphs(String contents, int n) {
		THashMap counts = new THashMap();
		Integer count;
		String key;
		int total = 0;
		char[] c = new char[n];
		for (int i=0; i<contents.length()-n-1; i++) {
			for (int j=0; j<n; j++) {
				c[j] = contents.charAt(i+j);
			}
			key = new String(c);
			if (counts.get(key) == null) {
				counts.put(key, new Integer(0));
			}
			count = (Integer) counts.get(key);
			count = new Integer(count.intValue()+1);
			counts.put(key, count);
			total++;
		}
		//int total = contents.length()-1;
		THashMap frequencies = new THashMap();
		
		Iterator keys = counts.keySet().iterator();
		int tally;
		//double feh = 0;
		while (keys.hasNext()) {
			key = (String)keys.next();
			tally = ((Integer)counts.get(key)).intValue();
	//		feh += (double)tally/total;
			frequencies.put(key, new Double((double)tally/total));
			//System.out.println("digraph " + key + ", frequency " + Zodiac.nformat2(((double)tally/total)));
		}
//		System.out.println("total keys " + counts.keySet().size());
//		System.out.println("total feh " + feh);
		return frequencies;
		
	}
	
	public static void makeNGramProfilesFromBooks(int n) {
		THashMap<String, Integer> counts = new THashMap<String, Integer>();
		File file = new File("./books/all.txt");
		StringBuffer contents = new StringBuffer(getContents(file,false).toLowerCase());
		StringBuffer newContents = new StringBuffer();
		for (int i=0; i<contents.length(); i++) {
			if (contents.charAt(i) >= 'a' && contents.charAt(i) <= 'z')
				newContents.append(contents.charAt(i));
			//if (i % 10000 == 0) System.out.println("scrubbed " + i);
		}
		String ngram;
		int value;
		for (int i=0; i<=newContents.length()-n; i++) {
			//if (i % 10000 == 0) System.out.println("ngrammed " + i);
			ngram = newContents.substring(i,i+n);
			if (counts.get(ngram) == null) value = 0;
			else value = counts.get(ngram);
			value++;
			counts.put(ngram, value);
		}
		Iterator<String> it = counts.keySet().iterator();
		float freq;
		DecimalFormat df = new DecimalFormat("0.################");
		while (it.hasNext()) {
			ngram = it.next();
			freq = ((float) counts.get(ngram) / newContents.length());
			System.out.println(ngram + "," + counts.get(ngram) + "," + df.format(freq));
		}
		
		
	}
	
	public static synchronized void computeNGramFrequenciesFromZodiacWords(float cutoff, boolean crossWordBoundaries) {
		zodiacNGramFrequencies = new THashMap[7];
		zodiacNGramKeySet = new THashSet[7];
		for (int len=1; len<=6; len++) {
			zodiacNGramFrequencies[len] = computeNGramFrequenciesFromZodiacWords(cutoff, len, crossWordBoundaries);
			System.out.println("NGram freq init for size " + len + ": " + zodiacNGramFrequencies[len].size() + " entries.");
		}
	}
	
	private static synchronized THashMap<String, Float> computeNGramFrequenciesFromZodiacWords(float cutoff, int n, boolean crossWordBoundaries) {
		THashMap frequencies = new THashMap();
		zodiacNGramKeySet[n] = new THashSet();
		StringBuffer word;
		String ngram;
		
		File file = new File("./letters/allwords-raw.txt");
		String contents = getContents(file,false);
		//System.out.println("contents len " + contents.length());
		//System.out.println("contents split " + contents.split(System.getProperty("line.separator")).length);
		//System.out.println(contents);
		String[] words = contents.split(System.getProperty("line.separator"));
		
		int numLetters = 0;
		for (int i=0; i<words.length; i++) numLetters += words[i].length();
		
		Float val;
		String chunk;
		int w;
		
		int charCount = 0;
		for (int i=0; i<words.length; i++) { // this should work any size of ngram
			word = new StringBuffer(words[i]);
			if (crossWordBoundaries && n > 1) { // if crossWordBoundaries, then include ngrams that occur at the boundary between this word and the following word.
				w = i+1;
				chunk = "";
				while (w<words.length && chunk.length() < n) {
					chunk += words[w]; 
					w++;
				}
				if (chunk.length() >= n)
					word.append(chunk.substring(0, n-1));
				else
					word.append(chunk);
			}
			for (int j=0; j<word.length()-(n-1); j++) {
				ngram = word.substring(j, j+n);
				
				if (frequencies.get(ngram) == null)
					frequencies.put(ngram, new Float(0.0));
				val = (Float)frequencies.get(ngram);
				val = new Float(val.floatValue()+1.0);
				charCount++;
				frequencies.put(ngram, val);
			}
			/*
			if (crossWordBoundaries && i>0) { // if crossWordBoundaries, then include ngrams that occur at word boundaries.
				ngram = word.substring(0, n); 
				word = new StringBuffer(words[i-1]);
				digraph = word.substring(word.length()-1,word.length()) + digraph;
				
				if (frequencies.get(digraph) == null)
					frequencies.put(digraph, new Float(0.0));
				val = (Float)frequencies.get(digraph);
				val = new Float(val.floatValue()+1.0);
				frequencies.put(digraph, val);				
			}*/
		}
		//System.out.println("charCount " + charCount + ", numLetters "+ numLetters);
		Iterator it = frequencies.keySet().iterator();
		THashMap<String, Float> newHash = new THashMap<String, Float>();
		float total = 0.0f;
		while (it.hasNext()) {
			ngram = (String) it.next();
			val = new Float(((Float) frequencies.get(ngram)).floatValue() / (float) numLetters);
			//System.out.println(ngram + ", old " + frequencies.get(ngram) + ", new " + val);
			if (val.floatValue() >= cutoff) {
				newHash.put(ngram, val);
				zodiacNGramKeySet[n].add(ngram);
			} 
			//System.out.println(ngram + "," + Zodiac.nformat(val.doubleValue()));
			//total+= val.floatValue();
		}
		
//		System.out.println("total " + total);
		return newHash;
	}
	

	public static void printDecoders() {
		initDictionaries();
		//File file = new File("/Users/doranchak/projects/work/java/zodiac/n-200s-uniq-decoders");
		File file = new File("/Users/doranchak/projects/work/java/zodiac/all-zero-conflict-decoders-to-date");
		String contents = getContents(file,false);
		String[] shit = contents.split(System.getProperty("line.separator"));
		CipherGene gene;
		int len;
		boolean match;
		
		String heading = "decoder,decoded,zodiacMatch";
		Iterator<String> it = dictionaries.keySet().iterator();
		String key;
		while (it.hasNext()) {
			key = it.next();
			for (int l=12; l>2; l--) {
				heading += ",w[" + key + "] L" + l + " count,w[" + key + "] L" + l + " unique count,w[" + key + "] L" + l;
			}			
		}
		
		System.out.println(heading);
		for (int i=0; i<shit.length; i++) {
			match = true;
			for (int j=0; j<shit[i].length(); j++) {
				if (shit[i].charAt(j) != '?' && shit[i].charAt(j) != Zodiac.solutions[1].charAt(j)) {
					match = false; 
					break;
				}
			}
			//if (match) System.out.println("perfect match: " + shit[i]);

			String line = "";

			gene = new CipherGene(shit[i]);
			gene.decode();
			gene.zodiacScore();
			
			line += gene.decoder + "," + gene.getDecoded() + "," + gene.zodiacMatch;
			//gene.fitnessDictionaryWords(2, 10, true, true, false, null);
			THashMap<String, ArrayList<Integer>> words;
			
			it = dictionaries.keySet().iterator();
			while (it.hasNext()) {
				key = it.next();
				StringBuffer d = new StringBuffer(gene.getDecoded());
				for (int l=12; l>2; l--) {
					words = ZodiacDictionary.getWords(d, l, key, true);
					line += "," + ZodiacDictionary.countAllWordsFromIndex(words);
					List<String> wordList = getDistinctWordsFromIndex(words);
					line += "," + wordList.size();
					line += ",";
					for (int j=0; j<wordList.size(); j++) 
						line += wordList.get(j) + " ";
					
				}
			}
			
			/*len=0;
			for (int j=0; j<gene.sentence.length; j++)
				if (gene.sentence[j] != null && !(gene.sentence[j].equals(""))) len+=gene.sentence[j].length();
			System.out.println(gene.decoder+","+gene.fitnessCoverageDictionaryScaled+","+len + "," +gene.zodiacMatch);*/
			//if (gene.zodiacMatch>0.68) 
			//	System.out.println(gene.coverageDictionaryScaled+" "+gene.sentence);
			System.out.println(line);
			
		}
	}
	
	/* make weighted random select from the top 100 words */
	public static String getRandomCorpusTop100Word() {
		if (corpusTop100TotalSum == 0) {
			for (int i=0; i < corpusTop100Total.length; i++) {
				corpusTop100TotalSum += corpusTop100Total[i];
			}
		}
		
		int which = CipherGene.rand().nextInt(corpusTop100TotalSum);
		int count = 0;
		for (int i=0; i < corpusTop100Total.length; i++) {
			count += corpusTop100Total[i];
			if (which <= count) return corpusTop100[i];
		}
		
		return corpusTop100[corpusTop100Total.length-1];
	}
	
	/** generate a word-constraint DB from the given word list.  based on the description in Michael Lucks' paper.
	 * The created structure is a 3D map:
	 * 	D(i,j,k)
	 * i is the word length
	 * j is the letter (from a to z)
	 * k is the letter's position in the word
	 * db.get(i).get(j).get(k) returns a hash set of words satisfying i,j, and k. 
	 **/
	public static void makeWordConstraintDatabase(String[] wordList) {
		System.out.println("Making word constraint database...");
		wordConstraintDatabase = new THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>>();
		wordConstraintPrefixDatabase = new THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>>();
		wordConstraintSuffixDatabase = new THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>>();
		wordLengthDatabase = new THashMap<Integer, THashSet<String>>();
		String word; 
		char j;
		int i;
		for (int a=0; a<wordList.length; a++) {
			word = wordList[a];
			if (word.length() > wordConstraintDatabaseMaxLength) wordConstraintDatabaseMaxLength = word.length();
			i = word.length();
			if (wordLengthDatabase.get(i) == null) 
				wordLengthDatabase.put(i, new THashSet<String>());
			wordLengthDatabase.get(i).add(word);
			for (int k=0; k<word.length(); k++) {
				j = word.charAt(k);
				addWordToConstraintDB(word, wordConstraintDatabase, i, j, k);
				for (int b=1; b<=i; b++) { 
					addWordToConstraintDB(word, wordConstraintPrefixDatabase, b, j, k);
				}
			}
			word = new StringBuffer(word).reverse().toString();
			for (int k=0; k<word.length(); k++) {
				j = word.charAt(k);
				for (int b=1; b<=i; b++) { 
					addWordToConstraintDB(new StringBuffer(word).reverse().toString(), wordConstraintSuffixDatabase, b, j, k);
				}
			}
		}

		Object[] dbs = new Object[] {
				wordConstraintDatabase, wordConstraintPrefixDatabase, wordConstraintSuffixDatabase				
		};
		int which = 0;
		for (Object o : dbs) {
			THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> h = (THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>>) o;
			int count1 = 0;
			int count2 = 0;
			for (Integer i1 : h.keySet()) {
				for (Character c : h.get(i1).keySet()) {
					for (Integer i2 : h.get(i1).get(c).keySet()) {
						count1++;
						for (String w : h.get(i1).get(c).get(i2)) {
							count2++;
						}
					}
				}
			}
			System.out.println("db " + which + " index size " + count1 + " word size " + count2);
			which++;
		}
	}
	
	/** make the isWordHash. */
	public static void makeIsWordHash() {
		if (wordConstraintDatabase == null) makeWordConstraintDatabase(CipherWordGene.wordPool); // default init
		//isWordHash = new THashMap<Integer, THashMap<String, Boolean>>();
		isWordHash = new Object[ISWORDHASH_MAX_LEN];
		for (int len=1; len<=ISWORDHASH_MAX_LEN; len++) {
			//isWordHash.put(len, getIsWordHashFor(len, CipherWordGene.WHICH_POOL));
			isWordHash[len-1] = getIsWordHashFor(len, CipherWordGene.WHICH_POOL);
		}
		
	}
	/** make the isWordHash for words of length len. */
	//public static THashMap<String, Boolean> getIsWordHashFor(int len, String whichPool) {
	public static Object getIsWordHashFor(int len, String whichPool) {
		Object result = null;
		Date start = new Date();
		try {
			//	 Read from disk using FileInputStream
			FileInputStream f_in = new 
				FileInputStream(ZODIAC_ROOT + "/isWordHash/" + whichPool + "-len" + len + ".data");

			//		 Read object using ObjectInputStream
			ObjectInputStream obj_in = 
				new ObjectInputStream (f_in);

			//		 Read an object
			Object obj = obj_in.readObject();

				result = obj;
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		/*if (result instanceof boolean[][]) {
			for (int i=0; i<27; i++)
				for (int j=0; j<27; j++)
					System.out.println(getCharForIndex(i)+","+getCharForIndex(j)+":" + ((boolean[][])result)[i][j]);
		}*/
		if (result != null) {
			System.out.println("loaded isWord hash of size " + isWordHashEntrySize(result) + " for len " + len + ", took " + (new Date().getTime() - start.getTime()) + " ms.");
			return result;
		}
		
		
		result = isWordHashEntryConstructor(len);
		
		
		StringBuffer chunk = new StringBuffer();
		
		boolean go = true;
		char ch;
		while (go) {
			if (chunk.length() == 0) {
				for (int i=0; i<len; i++) {
					chunk.append('?');
				}
			}
			else {
				for (int i=len-1; i>=0; i--) {
					ch = chunk.charAt(i);
					if (ch == 'z') {
						if (i==0)
							go = false;
						else {
							chunk.setCharAt(i, '?');
						}
					} else {
						chunk.setCharAt(i, ch == '?' ? 'a' : (char)(ch+1));
						if (i==0) 
						  System.out.println(chunk + "...");
						break;
					}
				}
			}
			if (go)
				isWordHashSet(result, chunk.toString(), isWord(chunk.toString(), chunk.toString(), false, false));
				//result.put(chunk.toString(), isWord(chunk.toString(), chunk.toString(), false, false));
				//shit = isWord(chunk.toString(), chunk.toString(), false, false);
		}
		
		/* we're done, so now safe to put into object array for immediate use by further isWord calls */
		isWordHash[len-1] = result;
		
		//for (String w : result.keySet()) System.out.println(w + ":" + result.get(w));
		System.out.println("saving isWord hash of size " + isWordHashEntrySize(result) + " for len " + len);

		//	 Write to disk with FileOutputStream
		try {
			FileOutputStream f_out = new 
				FileOutputStream(ZODIAC_ROOT + "/isWordHash/" + whichPool + "-len" + len + ".data");

			//		 Write object with ObjectOutputStream
			ObjectOutputStream obj_out = new
				ObjectOutputStream (f_out);

			//		 Write object out to disk
			obj_out.writeObject ( result );
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}
	
	/* get isWordHash array index for given char */
	public static int getIndexForChar(char c) {
		return c == '?' ? 0 : c - 'a' + 1;
	}
	/* get isWordHash char for given index */
	public static char getCharForIndex(int i) {
		return i == 0 ? '?' : (char)(i + 'a' - 1);
	}
	
	/* generic getter for isWordHash in array form.  gets the isWord value for the given string of plaintext. */
	public static boolean isWordHashGet(String plainText) {
		return isWordHashGet(isWordHash[plainText.length()-1], plainText);
	}
	public static boolean isWordHashGet(Object entry, String plainText) {
		if (plainText.length() == 1) {
			boolean[] hash = (boolean[])entry;
			return hash[getIndexForChar(plainText.charAt(0))];
		} else if (plainText.length() == 2) {
			boolean[][] hash = (boolean[][])entry;
			return hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))];
		} else if (plainText.length() == 3) {
			boolean[][][] hash = (boolean[][][])entry;
			return hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))][getIndexForChar(plainText.charAt(2))];
		} else if (plainText.length() == 4) {
			boolean[][][][] hash = (boolean[][][][])entry;
			return hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))][getIndexForChar(plainText.charAt(2))][getIndexForChar(plainText.charAt(3))];
		} else if (plainText.length() == 5) {
			boolean[][][][][] hash = (boolean[][][][][])entry;
			return hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))][getIndexForChar(plainText.charAt(2))][getIndexForChar(plainText.charAt(3))][getIndexForChar(plainText.charAt(4))];
		}
		throw new IllegalArgumentException("INVALID PLAINTEXT LENGTH FOR [" + plainText + "].");
	}
	
	/* generic setter for isWordHash in array form.  sets the isWord boolean value for the given plaintext. */
	public static void isWordHashSet(String plainText, boolean isWord) {
		isWordHashSet(isWordHash[plainText.length()-1], plainText, isWord);
	}
	public static void isWordHashSet(Object entry, String plainText, boolean isWord) {
		if (plainText.length() == 1) {
			boolean[] hash = (boolean[])entry;
			hash[getIndexForChar(plainText.charAt(0))] = isWord;
		} else if (plainText.length() == 2) {
			boolean[][] hash = (boolean[][])entry;
			hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))] = isWord;
		} else if (plainText.length() == 3) {
			boolean[][][] hash = (boolean[][][])entry;
			hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))][getIndexForChar(plainText.charAt(2))] = isWord;
		} else if (plainText.length() == 4) {
			boolean[][][][] hash = (boolean[][][][])entry;
			hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))][getIndexForChar(plainText.charAt(2))][getIndexForChar(plainText.charAt(3))] = isWord;
		} else if (plainText.length() == 5) {
			boolean[][][][][] hash = (boolean[][][][][])entry;
			hash[getIndexForChar(plainText.charAt(0))][getIndexForChar(plainText.charAt(1))][getIndexForChar(plainText.charAt(2))][getIndexForChar(plainText.charAt(3))][getIndexForChar(plainText.charAt(4))] = isWord;
		} else {
		throw new IllegalArgumentException("INVALID PLAINTEXT LENGTH FOR [" + plainText + "].");
		}
		
	}
	
	/* return the size of the given word hash entry */
	public static int isWordHashEntrySize(Object entry) {
		int size = -1;
		if (entry == null) return size;
		if (entry instanceof boolean[]) size = 27;
		else if (entry instanceof boolean[][]) size = 27*27;
		else if (entry instanceof boolean[][][]) size = 27*27*27;
		else if (entry instanceof boolean[][][][]) size = 27*27*27*27;
		else if (entry instanceof boolean[][][][][]) size = 27*27*27*27*27;
		else throw new IllegalArgumentException("entry is not a valid object type: [" + entry.getClass().getName() + "]");
		return size;
	}
	
	/* construct an isWordHash entry with the given length */
	public static Object isWordHashEntryConstructor(int len) {
		if (len == 1) return new boolean[27];
		if (len == 2) return new boolean[27][27];
		if (len == 3) return new boolean[27][27][27];
		if (len == 4) return new boolean[27][27][27][27];
		if (len == 5) return new boolean[27][27][27][27][27];
		throw new IllegalArgumentException(len + " is an invalid length.");
	}
	
	/** adds word to given 3D hash, initializing along the way if necessary.
	 * 
	 * @param word the word to add
	 * @param db the db to add it to
	 * @param i the word length
	 * @param j letter
	 * @param k position of letter
	 */
	public static void addWordToConstraintDB(String word, THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> db,
			int i, char j, int k) {
			
		if (db.get(i) == null)
			db.put(i, new THashMap<Character, THashMap<Integer, THashSet<String>>>());
		if (db.get(i).get(j) == null)
			db.get(i).put(j, new THashMap<Integer, THashSet<String>>());
		if (db.get(i).get(j).get(k) == null) 
			db.get(i).get(j).put(k, new THashSet<String>());
		db.get(i).get(j).get(k).add(word);
	}
	
	/** returns list of words satisfying the given constraints.
	 * 
	 * @param db the db to search
	 * @param i the word length
	 * @param j the letter
	 * @param k the position in which the letter occurs
	 * @return
	 */
	public static THashSet<String> getWordsConstrainedBy(THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> db, int i, char j, int k) {
		THashMap<Character, THashMap<Integer, THashSet<String>>> hash1 = db.get(i);
		if (hash1 != null) {
			THashMap<Integer, THashSet<String>> hash2 = hash1.get(j);
			if (hash2 != null) {
				return hash2.get(k);
			}
		}
		return null;
	}
	
	/** returns list of words satisfying the given constraints.
	 * 
	 * @param db the db to search
	 * @param cipherChunk ciphertext chunk for which to find words.  if null, then don't constrain by the cipherChunk.
	 * @param plaintextChunk partially or fully decoded chunk for which to find words  
	 * @return
	 */
	public static THashSet<String> getWordsConstrainedBy(THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> db, 
			String cipherChunk, String plaintextChunk) {

		int i = plaintextChunk.length();

		if (cipherChunk != null && cipherChunk.length() != plaintextChunk.length())
			throw new IllegalArgumentException("sorry, cipher and plaintext chunks must be equal in length");
		THashSet<String> results = new THashSet<String>();
		/* inspect cipher symbols for repeats */
		THashMap<Character, ArrayList<Integer>> symbolMap = new THashMap<Character, ArrayList<Integer>>(); /* maps a character to its list of occurrences */
		char letter;
		int k;
		
		boolean foundDupe = false;
		if (cipherChunk != null) {
			for (int a=0; a<cipherChunk.length(); a++) {
				letter = cipherChunk.charAt(a);
				if (letter != '?') {
					if (symbolMap.get(letter) == null)
						symbolMap.put(letter, new ArrayList<Integer>());
					else 
						foundDupe = true;
					symbolMap.get(letter).add(a);
					//System.out.println("added " + letter + " pos " + a);
				}
			}
		}
		//System.out.println("buh");
		boolean init = false;
		ArrayList<Integer> positions;
		THashSet<String> matchingWords;
		THashSet<String> matchingWordsAll;
		THashSet<String> tmp;
		char lower, upper;
		if (foundDupe) {
			//System.out.println("FOUND DUPE");
	 		for (Character c : symbolMap.keySet()) {
				positions = symbolMap.get(c);
				if (positions.size() > 1) {
					//for (int p : positions) System.out.println("letter " + c + " was in pos " + p);
					if (plaintextChunk.charAt(positions.get(0)) == '?') {
						lower = 'a'; upper = 'z';
					} else {
						lower = plaintextChunk.charAt(positions.get(0));
						upper = lower;
					}
					
					matchingWordsAll = new THashSet<String>();
					matchingWords = null;
					for (char j = lower; j<= upper; j++) {
						matchingWords = new THashSet<String>();
						for (int a = 0; a<positions.size(); a++) {
							k = positions.get(a);
							
							tmp = getWordsConstrainedBy(db, i, j, k);
							
							if (a==0) {
								if (tmp != null) matchingWords.addAll(tmp);
							}
							else {
								if (tmp == null) matchingWords.clear();
								else {
									//System.out.println("retining");
									matchingWords.retainAll(tmp);
								}
							}
						}
						//System.out.println(j);
						matchingWordsAll.addAll(matchingWords);
					}
					if (matchingWordsAll != null) {
						if (results.size() == 0)
							results.addAll(matchingWordsAll);
					  else {
							if (matchingWordsAll.size() > 0)
								results.retainAll(matchingWordsAll);
					  }
						
					}
				}
			}
		}
		
		//System.out.println(results.isEmpty());
		//for (String w : results)
			//System.out.println("w " + w);
		if (!plaintextChunk.matches(".*[a-z].*")) { // plaintext is all wildcards, so no constraints.
			//System.out.println("dupe " + foundDupe);
			if (foundDupe) return results; // we previously applied ciphertext constraints, so return what we already found.
			else return wordLengthDatabase.get(plaintextChunk.length()); // otherwise, any word of this length matches.
		}
		
		init = false;
		char j;
		/* inspect plaintext for the constraints to search by */
		for (k=0; k<plaintextChunk.length(); k++) {
			j = plaintextChunk.charAt(k);
			if (j != '?') {
				tmp = getWordsConstrainedBy(db, i, j, k);
				if (tmp == null) { results.clear(); return results; } // nothing found; thus, there will be no satisfaction of any further constraints.
				//System.out.println(i+","+j+","+k+":" + (tmp == null ? "null" : tmp.size()));
				if (!init) {
					if (results.isEmpty()) {
						if (tmp != null)
							results.addAll(tmp);
					} else { // ciphertext constraints may already have populated our results hash
						if (tmp != null)
							results.retainAll(tmp);
					}
					init = true;
				} else {
					if (tmp != null)
						results.retainAll(tmp); // intersection
					else
						results.clear(); // we did not find anything to intersect with. 
				}
				if (results.isEmpty()) return results; // abort when can no longer satisfy constraints 
			}
		}
		
		return results;
	}
	
	public static boolean isWord(String cipherText, String plainText, boolean doPrefix, boolean doSuffix) {
		return isWord(cipherText, plainText, doPrefix, doSuffix, new Counter(), null);
	}
	/** tests the given chunk to see if it can possibly be a combination of known words in the given constraint dictionary.
	 * Returns array of hashes of possible words; or null if none are found. 
	 * if doPrefix, then check if this word is a prefix, or a full word followed by a prefix.
	 * if doSuffix, then check if this word is a suffix, or a suffix followed by a full word.
	 * @param lenghts list of found words' lengths
	 * */
	//public static List<THashSet<String>> isWord(String cipherText, String plainText, boolean doPrefix, boolean doSuffix,
	//		Counter iterations) {
	public static boolean isWord(String cipherText, String plainText, boolean doPrefix, boolean doSuffix,
			Counter iterations, List<Integer> lengths) {
		//System.out.println("isWord " + plainText);
		iterations.count++;
		//if (cipherText.length() < 6) return null;
		if (wordConstraintDatabase == null) makeWordConstraintDatabase(CipherWordGene.wordPool); // default init
		if (isWordHash == null && USE_ISWORDHASH) makeIsWordHash();
		
		if (isWordHash != null && USE_ISWORDHASH && !doPrefix && !doSuffix) {
			Object hash = null;
			if (isWordHash.length >= cipherText.length())
					hash = isWordHash[cipherText.length()-1]; 
			if (hash != null) {
				boolean b = isWordHashGet(plainText);
				if (!b) { //  prune search if we already know this plainText cannot be a word, because it will still not be a word even when considering further constraints imposed by cipherText.
					//System.out.println("n " + plainText);
					return false;
				}
				else { 
					/* plainText is a valid word combination.  but need to check if cipherText imposes any further constraints. */
					THashMap<Character, Character> hc = new THashMap<Character, Character>(); // map cipher symbols to decodings 
					char plainC, cipherC;
					for (int i=0; i<plainText.length(); i++) {
						 plainC = plainText.charAt(i);
						 cipherC = cipherText.charAt(i);
						 if (plainC != '?') {
							 if (hc.get(cipherC) == null) {
								 hc.put(cipherC, plainC);
							 }
							 else if (hc.get(cipherC) != plainC) {
									//System.out.println("n! " + plainText);
								 return false; // we found a conflict imposed by the cipher text on the plain text.  thus, chunk cannot be feasible word combination here. 
							 }
						 }
					}
					//System.out.println("y " + plainText);
					//if (counts != null) counts[plainText.length()-1]++; don't do this, since the cache should reflect decisions mades on counts-by-length
					return true; // no cipher-imposed conflicts found.  thus, chunk is feasible word combination.
				} //else System.out.println("no hash for old " + plainText);
			} //else System.out.println("no hash for len " + cipherText.length());
		}
		
		/*if (lengths == null) {
			lengths = new ArrayList<Integer>();
		}*/
		
		if (doPrefix && doSuffix) throw new IllegalArgumentException("sorry, can't do suffix and prefix simultaneously.");
		
		String cipherTextR = null;
		String plainTextR = null;
		
		if (doSuffix) {
			cipherTextR = new StringBuffer(cipherText).reverse().toString();
			plainTextR = new StringBuffer(plainText).reverse().toString();
		}
		
		THashMap<Integer, THashMap<Character, THashMap<Integer, THashSet<String>>>> db;
		if (doPrefix) db = wordConstraintPrefixDatabase;
		else if (doSuffix) {
			db = wordConstraintSuffixDatabase;
		}
		else db = wordConstraintDatabase;
		
		THashSet<String> found1, found2, toAdd1, toAdd2;
		ArrayList<THashSet<String>> result;
	  //List<THashSet<String>> results1;
		//List<THashSet<String>> results2;
		boolean results1;
		boolean results2;
		/* case 1: the entire text is a single word */
		found1 = getWordsConstrainedBy(db, doSuffix ? cipherTextR : cipherText, doSuffix ? plainTextR : plainText);
		if (found1 != null && !found1.isEmpty()) {
			//result = new ArrayList<THashSet<String>>();
			//toAdd1 = new THashSet<String>();
			//toAdd1.addAll(found1);
			//result.add(toAdd1);
			//System.out.println("found word(s) in " + plainText);
			//return result;
			//if (lengths != null && !doPrefix && !doSuffix) { // don't count prefix/suffix word lengths, b/c we don't know the length of the actual word
			//	lengths.add(plainText.length());
			//}
			return true;
		}
		
		String p1, p2, c1, c2;
		/* case 2: check all possible n-word combinations in the chunk by recursing into each split point. */
		if (plainText.length() > 1) {
			for (int i=1; i<plainText.length(); i++) {
				c1 = cipherText.substring(0, i);
				c2 = cipherText.substring(i, cipherText.length());
				
				p1 = plainText.substring(0, i);
				p2 = plainText.substring(i, plainText.length());

				/*
				if (doSuffix) {
					c1 = new StringBuffer(c1).reverse().toString();
					p1 = new StringBuffer(p1).reverse().toString();
				}*/
				
				results1 = isWord(c1, p1, false, doSuffix, iterations, lengths);
				results2 = isWord(c2, p2, doPrefix, false, iterations, lengths);
				
				if (results1 && results2) {
					//System.out.println("found words: c1 " + c1 + " p1 " + p1);
					//System.out.println("found words: c2 " + c2 + " p2 " + p2);
					/* both chunks have word possibilities. */
					//System.out.println("found words in chunks " + p1 + "," + p2);
					/*for (THashSet<String> h : results1)
						for (String w : h)
							System.out.println(" - 1: found in " + h + ": " + w);
					for (THashSet<String> h : results2)
						for (String w : h)
							System.out.println(" - 2: found in " + h + ": " + w);
					*/
					//toAdd1 = new THashSet<String>();
					//toAdd2 = new THashSet<String>();
					
					//toAdd1.addAll(found1);
					//toAdd2.addAll(found2);

					//result = new ArrayList<THashSet<String>>();
					//result.addAll(results1);
					//result.addAll(results2);
					//return result;
					/*int total = 0;
					for (int index = 0; index<lengths.size(); index++) {
						if (lengths.get(index) == 1) total++;
						else total = 0;
						if (total > 2) {
							System.out.println("rejecting " + plainText);
							return false; // we don't allow more than two one-letter words in a row.
						}
					}*/
					return true;
				}
				//System.out.println("not found words: c1 " + c1 + " p1 " + p1);
				//System.out.println("not found words: c2 " + c2 + " p2 " + p2);
			}
		}
		
		//return null;
		return false;
	}
	
	public static void testWordConstraintDB2() {
		USE_ISWORDHASH = false;
		makeWordConstraintDatabase(CipherWordGene.wordPool);
		//System.out.println(isWord("wo","wo",false,false));
		//System.out.println(isWord("wo","wo",true,false));
		//System.out.println(isWord("wo","wo",false,true));
		
		THashSet<String> result;
		
		result = getWordsConstrainedBy(wordConstraintDatabase, "_ed##", "?c?ll");
		for (String w : result) {
			System.out.println(w);
		}
	}
	public static void testWordConstraintDB() {
		String words[] = ZodiacDictionary.getContents(new File("/Users/doranchak/projects/work/java/zodiac/letters/wordpool-600.txt"), false).split(System.getProperty("line.separator"));
		makeWordConstraintDatabase(words);
		
		THashSet<String> results = new THashSet<String>();
		results.addAll(getWordsConstrainedBy(wordConstraintDatabase, 4, 'e', 2));
		for (String word : results) {
			System.out.println("1 found " + word);
		}

		
		results.retainAll(getWordsConstrainedBy(wordConstraintDatabase, 4, 't', 0));
		for (String word : results) {
			System.out.println("2 found " + word);
		}


		
		results = getWordsConstrainedBy(wordConstraintDatabase, "ABCDEF", "??a???");
		for (String word : results) {
			System.out.println("3 found " + word);
		}

		results = getWordsConstrainedBy(wordConstraintDatabase, "ABCDEA", "??a???");
		for (String word : results) {
			System.out.println("3b found " + word);
		}
		results = getWordsConstrainedBy(wordConstraintDatabase, "teenagers", "?????????");
		for (String word : results) {
			System.out.println("4 found " + word);
		}
		
		results = getWordsConstrainedBy(wordConstraintDatabase, "been", "????");
		for (String word : results) {
			System.out.println("5 found " + word);
		}

		for (int i=0; i<words.length; i++) {
			String cipher = words[i];
			String plain = "";
			for (int k=0; k<cipher.length(); k++) plain += "?";
			//System.out.println("testing " + cipher + " " + plain);
			if (!getWordsConstrainedBy(wordConstraintDatabase, cipher, plain).contains(cipher))
				throw new RuntimeException("test failed for " + cipher);
		}
		
		/*CipherWordGene g = new CipherWordGene();
		for (int i=0; i<1000000; i++) {
			if (i%100000==0) System.out.println("testing " + i);
			String word = words[g.rand().nextInt(words.length)];
			
			StringBuffer cipher = new StringBuffer("");
			StringBuffer plain = new StringBuffer("");
			for (int j=0; j<word.length(); j++) {
				plain.append("?");
				cipher.append(((char)('A'+j)));
			}
			
			int r;
			for (int j=0; j<g.rand().nextInt(word.length()); j++) {
				r = g.rand().nextInt(word.length());
				cipher.setCharAt(r, word.charAt(r));
			}
			for (int j=0; j<g.rand().nextInt(word.length()); j++) {
				r = g.rand().nextInt(word.length());
				plain.setCharAt(r, word.charAt(r));
			}
			if (!getWordsConstrainedBy(wordConstraintDatabase, cipher.toString(), plain.toString()).contains(word))
				throw new RuntimeException("failed for " + word+","+cipher+","+plain);
		}*/
		
		
		String[] tests = new String[] {"t?tett","?t","tst?rt","?","?ttrstee","er?","t?tett","tsh?rt",
				"thi?sh?tk???s","?t?os","r?a","xaastss","xaixsst","chstipiii","z","zz","zzz","zzzz","zzzzz","zzzzzz","zzzzzzz","zzzzzzzz","zzzzzzzzz","zzzzzzzzzz"};
		
		boolean found;
		
		for (int i=0; i<tests.length; i++) {
			String cipher = "";
			for (int j=0; j<tests[i].length(); j++)
				cipher += ((char)('a'+j));
			Counter c = new Counter();
			found = isWord(cipher,tests[i],false,false,c,null);
			System.out.println(found + "; " + c.count + " iterations for " + tests[i]);
			
			/*if (found != null)
				for (THashSet<String> h : found) {
					System.out.println("[" + tests[i]+ "]: found " + h);
					for (String w : h) {
						System.out.println("- word " + w);
					}
				} else {
					System.out.println("[" + tests[i]+ "]: none found");
				}*/
		}
		
		
		/*
		results = new THashSet<String>();
		results.addAll(getWordsConstrainedBy(wordConstraintPrefixDatabase, 4, 'e', 2));
		for (String word : results) {
			System.out.println("prefix found " + word);
		}
		
		results = new THashSet<String>();
		results.addAll(getWordsConstrainedBy(wordConstraintSuffixDatabase, 4, 'e', 2));
		for (String word : results) {
			System.out.println("suffix found " + word);
		}
		
		found = isWord("weusio?","weusio?",true,false);
		*/
		/*if (found != null)
			for (THashSet<String> h : found) {
				System.out.println("found " + h);
				for (String w : h) {
					System.out.println("- word " + w);
				}
			} else {
				System.out.println("none found");
			}
		*/
		/*
		Date start;
		Date end;
		
		int TOTAL = 100;
		int MAX_COUNT = -1;
		int sum_count;
		Counter count;
		for (int len=1; len<10; len++) {
			sum_count = 0;
			String word; String cipher;
			start = new Date();
			for (int i=0; i<TOTAL; i++) {
				word = ""; cipher = "";
				for (int j=0; j<len; j++) {
					word += (char)('a' + CipherWordGene.rand().nextInt(26));
					cipher += (char)('a' + CipherWordGene.rand().nextInt(26));
				}
				count = new Counter();
				found = isWord(cipher, word, false, true, count, null);
				sum_count += count.count;
				if (count.count > MAX_COUNT) {
					MAX_COUNT = count.count;
					System.out.println(" - max count " + MAX_COUNT);
				}
			}
			end = new Date();
			
			System.out.println("len " + len + " took " + (end.getTime() - start.getTime()) + " ms (" + (end.getTime() - start.getTime() > 0 ? (1000*TOTAL/(end.getTime() - start.getTime())) : " MANY ") + " per second)");
			System.out.println(" - avg count: " + (sum_count / TOTAL));
		}
		
		

		THashSet<String> f;
		for (int len=1; len<10; len++) {
			String word; String cipher;
			start = new Date();
			for (int i=0; i<TOTAL; i++) {
				word = ""; cipher = "";
				for (int j=0; j<len; j++) {
					word += (char)('a' + CipherWordGene.rand().nextInt(26));
					cipher += (char)('a' + CipherWordGene.rand().nextInt(26));
				}
				f = getWordsConstrainedBy(wordConstraintDatabase, cipher, word);
			}
			end = new Date();
			
			System.out.println("len " + len + " took " + (end.getTime() - start.getTime()) + " ms (" + (end.getTime() - start.getTime() > 0 ? (1000*TOTAL/(end.getTime() - start.getTime())) : " MANY ") + " per second)");
		}

		for (int len=1; len<10; len++) {
			System.out.println("size of len " + len + " is " + wordLengthDatabase.get(len).size());
		}
			*/

		
	}
	
	public static void testTop100() {
		initZodiacCorpusTop100();
		int len = 0;
		int words = 0;
		int matches = 0;
		
		String word;
		String plugger = "";
		StringBuffer d = new StringBuffer(Zodiac.firstCipherDecoded);
		
		ArrayList<String> pool = new ArrayList<String>();
		for (int i=0; i<zodiacCorpusTop100.length; i++) pool.add(zodiacCorpusTop100[i]);
		
		for (int i=0; i<20; i++) {
			//word = zodiacCorpusTop100[Gene.rand().nextInt(zodiacCorpusTop100.length)];
			word = pool.get(CipherGene.rand().nextInt(pool.size()));
			/*for (int j=0; j<pool.size(); ) {
				if (pool.get(j).equals(word)) {
					pool.remove(j);
				} else j++;
			}
			for (int j=0; j<pool.size(); j++) {
				if (pool.get(j).equals(word)) {
					throw new RuntimeException("dammit");
				}
			}*/
			System.out.println(word);
			plugger += word + ",";
			if (d.indexOf(word) > -1) {
				matches++;
				d.replace(d.indexOf(word), d.indexOf(word)+word.length(), "_");
				System.out.println(d);
			}
			len += word.length();
			words++;
		}
		System.out.println(plugger + ", len " + len + ", matches " + matches + "/" + words);
	}
	
	public static void testShit() {
		StringBuffer test = new StringBuffer("thend");
		List<String> wordList = getDistinctWordsFromIndex(ZodiacDictionary.getWords(test, 5, D_COMMON_5000, true));
		for (int i=0; i<wordList.size(); i++) System.out.println(wordList.get(i));
		
		
		wordList = getDistinctWordsFromIndex(ZodiacDictionary.getWords(test, 3, D_COMMON_5000, true));
		for (int i=0; i<wordList.size(); i++) System.out.println(wordList.get(i));
		
	}
	
	public static void initFrequencies() {
		frequencies = new THashSet[6];
		
		for (int i=2; i<=5; i++) {
			frequencies[i] = new THashSet();
	    String d = getContents(new File("/Users/doranchak/projects/work/java/zodiac/books/freq-"+i+"grams-top90percent.txt"), false);
	    String[] lines = d.split(System.getProperty("line.separator"));
	    for (int j=0; j<lines.length; j++) {
	    	frequencies[i].add(lines[j].split(",")[0]);
	    }
			System.out.println("freq " + i + "gram init with size " + frequencies[i].size());
		}
		
	}
	public static int countBadNGrams(String text) {
		if (frequencies == null) initFrequencies();
		int result = 0;
		
		int start = 0; int end = 2;
		String chunk;
		while (start<text.length()) {
			if (end-start > 5 || end > text.length() || text.substring(start,end).contains("?")) {
				start++;
				end = start + 2;
			} else {
				chunk = text.substring(start,end);
				result += frequencies[chunk.length()].contains(chunk) ? 0 : 1;
				//if (!frequencies[chunk.length()].contains(chunk)) 
					//System.out.println("did not contain " + chunk);
				end++;
			}
		}
		
		return result;
	}
	
  public static double computeDecryptoTrigramScore(String plaintext) {
  	String upper = plaintext.toUpperCase();
		byte[] b = new byte[upper.length()];
		for (int i = 0; i < upper.length(); i++) {
			if (upper.charAt(i) == '?')
				b[i] = -2;
			else
				b[i] = englishLanguage.charToByte(upper.charAt(i));
		}
		String line = "";
		/*for (int i=0; i<b.length; i++) {
			line += b[i]+",";
		}*/
		//System.out.println(upper);
		//System.out.println(line);
		int ma = 27;
		int mb = 26;
		double score = 0;

		for (int i = 0; i < b.length; i++) {
			byte c = b[i];
			int mc;

			if (c == -1) // space?
				mc = 26;
			else if (c == -2) // unknown?
				mc = 27;
			else
				mc = c;

			if (mc == 27) {
				score += unknownLetterPenalty;
			}

			score += EnglishTrigrams.trigrams[ma][mb][mc];
			ma = mb;
			mb = mc;
		}

		score += EnglishTrigrams.trigrams[ma][mb][26]; // add a space at the end.

		return score;
	}

	
	public static void testDecryptoTrigrams() {
		String[] tests = new String[] {
				// known
				"ll become  my  slaves  i will  not  give  you my name  because youwill",
				"il??e?ill?ng?eo?lebecaus?i??ss?muc??uni???mo???u?t?a??ill?ngwil?g?me?n??e?o??es?becausema?is???mo?t?a?g???ue?namalo?all?o??llsome??ingg?vesme??em??t???ill??ge??????cei??sevenbe?te????ng???i?gyou??oc?so??w?t?agi?l???bes??a?????ti?????w?e???ie?willbe?ebo?n?n?a???ic????all?????ave?ille?w?llbecomemyslavesiwillnotgiveyoumynamebecauseyouwill??y??sloi?ow?o?????mycoll?ct?ngo?slaves?oemya??e?l??e?beo?ie??me????i??",
				"il??e?ill?ng?eo?lebecaus?i??ss?muc??uni???mo???u?t?a??ill?ngwil?g?me?n??e?o??es?becausema?is???mo?t?a?g???ue?namalo?all?o??llsome??ingg?vesme??em??t???ill??ge??????cei??sevenbe?te????ng???i?gyou??oc?so??w?t?agi?l???bes??a?????ti?????w?e???ie?willbe?ebo?n?n?a???ic????all?????ave?ille?w?ll become  my  slaves  i will  not  give  you my name  because youwill??y??sloi?ow?o?????mycoll?ct?ngo?slaves?oemya??e?l??e?beo?ie??me????i??",

				//"e tired ata area ones a stop tell ona iiaa sla time wipe atiasoe",
				
				"n? a some re wandering n? i give ?er we new ever a going ?wingnin",
				"ni??g???i?ge?sm??raroina?n??ig?eno??ne????ei???n?v?v??nn??geg?i?e?e??e??g?e??sa?arodnirei?ng???em?v?v?e???n??gdei?i?vn??e??n?ime????eee?egges??re??v???nn???er??????o????agesgar?vr????ee???n?ewin??eo?im??g?v?de??i???a?g??i?????vn?????g?g????s?gnn?ar?rai?g?e?v????o????iii?????ve??niig?g?n?asomerewanderingn?igive?erweneweveragoing?wingnin??w??a?mn?mg?e?????ewoenn?ov?gem?aiiegi?irewd??r????r?a?m?nr??e????????",
				"ni??g???i?ge?sm??raroina?n??ig?eno??ne????ei???n?v?v??nn??geg?i?e?e??e??g?e??sa?arodnirei?ng???em?v?v?e???n??gdei?i?vn??e??n?ime????eee?egges??re??v???nn???er??????o????agesgar?vr????ee???n?ewin??eo?im??g?v?de??i???a?g??i?????vn?????g?g????s?gnn?ar?rai?g?e?v????o????iii?????ve??niig?g?n? a some re wandering n? i give ?er we new ever a going ?wingnin??w??a?mn?mg?e?????ewoenn?ov?gem?aiiegi?irewd??r????r?a?m?nr??e????????",
				
				// 372
				"en a come me whether a hand  light he we new them a going ?winhade",
				"ad??g?tnd?lh?cm?nmaeoinh?a??rg?eno??ntt???ei???n?g?h??aen?lhhtd?h?e??t??g?e??ch?amotnreei?ag???em?g?h?h???n??lteini?hen?e??enrme???tthh?hggec??me??g???aen??he??????o?t??hghclam?ge????th???a?hwin??eo?rm??h?g?tht?d???a?g??i?????ga?????h?g???tc?haenam?eai?l?t?h???to????idd?????hh??addg?h?enacomemewhetherahandlighthewenewthemagoing?winhade??w??hnma?mh?e?????ewoeee?og?lhm?hdihgr?ieewt??e?n??m?a?m?am??e?????t??",
				"ad??g?tnd?lh?cm?nmaeoinh?a??rg?eno??ntt???ei???n?g?h??aen?lhhtd?h?e??t??g?e??ch?amotnreei?ag???em?g?h?h???n??lteini?hen?e??enrme???tthh?hggec??me??g???aen??he??????o?t??hghclam?ge????th???a?hwin??eo?rm??h?g?tht?d???a?g??i?????ga?????h?g???tc?haenam?eai?l?t?h???to????idd?????hh??addg?h?en a come me whether a hand  light he we new them a going ?winhade??w??hnma?mh?e?????ewoeee?og?lhm?hdihgr?ieewt??e?n??m?a?m?am??e?????t??",
				
				// 373
				"el wire me me  sent  is  i till  side  a tie  came  time  we  re a see iatile",
				"il??e?all?se?ie?lewireas?i??ss?mar??ata???mi???a?d?i??iel?setal?e?me?t??e?c??is?wernasime?is???me?d?i?e???ae?snmeli?iel?c??elseme??atee?tesmi??em??d???iel??ei??????rea??setiswe?di????te???i?eeia??cr?se??t?d?nea?l???wes??e?????di?????t?e???ai?tielwe?iwi?s?t?i???ar????ell?????ite?ille?t?elwirememesentisitillsideatiecametimewereaseeiatile??e??slei?et?c?????mercee?rd?see?sletes?iimen??i?l??e?wee?ie??me????a??",
				"il??e?all?se?ie?lewireas?i??ss?mar??ata???mi???a?d?i??iel?setal?e?me?t??e?c??is?wernasime?is???me?d?i?e???ae?snmeli?iel?c??elseme??atee?tesmi??em??d???iel??ei??????rea??setiswe?di????te???i?eeia??cr?se??t?d?nea?l???wes??e?????di?????t?e???ai?tielwe?iwi?s?t?i???ar????ell?????ite?ille?t?el wire me me  sent  is  i till  side  a tie  came  time  we  re a see iatile??e??slei?et?c?????mercee?rd?see?sletes?iimen??i?l??e?wee?ie??me????a??"
		};
		for (String test : tests)  
			System.out.println(computeDecryptoTrigramScore(test) + ":" + test);
		
	}
	
	/* shows that THashSet retainAll is faster than trying to do the same operation by hand */
	public static void testRetainAll() {
		int NUM = 100000;
		THashSet<Integer>[] hashes = new THashSet[NUM];
		for (int i=0; i<hashes.length; i++) {
			hashes[i] = new THashSet<Integer>();
			for (int j=0; j<100; j++) {
				hashes[i].add(CipherWordGene.rand().nextInt(1000));
			}
		}
		Date start = new Date();
		THashSet<Integer> h1, h2;
		for (int i=0; i<hashes.length; i+=2) {
			h1 = hashes[i];
			h2 = hashes[i+1];
			h1.retainAll(h2);
		}
		Date end = new Date();
		long diff = end.getTime() - start.getTime();
		System.out.println("took " + diff + " ms (" + (1000*(float)NUM/diff) + ")");
		
		THashSet<Integer> result;
		start = new Date();
		for (int i=0; i<hashes.length; i+=2) {
			result = new THashSet<Integer>();
			h1 = hashes[i];
			h2 = hashes[i+1];
			for (Integer k : h1)
				if (h2.contains(k))
					result.add(k);
			for (Integer k : h2)
				if (h1.contains(k))
					result.add(k);
			h1 = result;
		}
		end = new Date();
		diff = end.getTime() - start.getTime();
		System.out.println("took " + diff + " ms (" + (1000*(float)NUM/diff) + ")");
		
	}
	
	public static void main(String[] args) {
		//THashMap poo = measureNgraphs(4);
		//computeNGramFrequenciesFromZodiacWords(5, true);
		//makeNGramProfilesFromBooks(6);
		//System.out.println(countBadNGrams("il??s?all?ph?t??losotree?i??ne?net??e?a???ns???e?t?i??ill?phtal?h?nt????s????te?sotsenonr?ie???n??t?i?h???et?psnrls?ill????lln?nt??a?hh?esent??on??t???ill??ho??????tta??esetpso?to?????h???i?hese???t?n???t?t?sha?l???ste??r?????ti?????t?s???at?tillso?oss?p???i???at????rll?????iet?ills?t?llstt?noneelseonitillpsthaeoe?ene?inosstreetesetill??e??el?i??t???????net?ll?tt?ph??elresn?sones??o?l??o?st??io??nt????a??"));
		//System.out.println(countBadNGrams("il??e?ill?ng?eo?lebecaus?i??ss?muc??uni???mo???u?t?a??ill?ngwil?g?me?n??e????es?becausema?is???mo?t?a?g???ue?namalo?all????llsome??ingg?vesme??em??t???ill??ge??????cei??sevenbe?te????ng???i?g?ou???c?so??w?t?agi?l???bes??a?????ti?????w?e???ie?willbe?ebo?n?n?a???ic????all?????ave?ille?w?llbecomem?slavesiwillnotgive??um?namebecause?ouwill?????sloi?ow???????m?c?ll?ct?ngo?slaves?oem?a??e?l??e?beo?ie??me????i??"));
		//System.out.println(countBadNGrams("il????i?l??g???????e???s?i??s??t?????hi???ts?????t?a??il???gwil?g?t??h????????s????a?set??i????t??t?a?g???????at??s?al?????l?s?t???ihgg?v??t????t??t???il???ge????????i??s?v?????te????hg???i?gws??????s???w?t?agi?l??????????????ti?????w?????i??wil????e?s???h?a???i??????ll?????av??ill??w?l?????t?twslavesiwi?l?stgivew??twhat????????ws?will??w??s??i??w???????tw??ll??t??g??sl?v?s?setwa??e??????????i???t?????i??"));
		
		//System.out.println(countBadNGrams("il??e?oll??t????lebegans?i??sh?vng??nho???ve???n???a??ill??twol?t?ve?h??e?????s?beganseva?ih???v????a?t???ne??avale?all????lls?ve??ohtt?vehv???ev??????ill??te??????geo??sev??be??e????ht???i?tren???g?s???w???ato?l???beh??a??????i?????w?e???o??willbe?ebe???h?a???og????all?????ave?ille?w?llb?g?vevrslavesiwill?e?tover?nvrhavebeganherenwill??r??sl?i??w???????vrg?ll?g???t??slaves?eevra??e?l??e?be??ie??ve????o??"));
		//System.out.println(countBadNGrams("????e?????mt?????ebecaus????ss?tuc??ut????to???u?s?a???l??mt????t?te?t??e?????s?becauseta??s???t??s?a?t???ue?mata?o?al?????l?s?te???ttt?vest???et??s????l???te??????ce???sev?mbe?se????tt?????tsou???c?s?????s?at??????bes??a?????s????????e????????l?be?ebo?m?t?a????c????a???????ave????e???l?b?c?tetsslaves?????most?ves?utstatebecausesou???l??s??s?????????????tsc?ll?cs?mt??s?aves?oetsa??e????e?be???e??te???????"));

		//System.out.println(countBadNGrams("????i????????????ib?lit??????i?stl??te????s????t???n??????????????se?e??i???????bil?t??si??i???s????n?????te???si???n??????????se???e????iis???is???????????????????le????i???bi???????e???????s?t???l?????????????????bei??i??????????????i??????????bi??b????e?n????l????i???????n?e????i?????b?l?siss??????????????????s?tssensibilities?t??????s????????????????ssl????l????????i?i????ss????????i?be???i??se???????"));
		//File file = new File("./letters/allwords-raw.txt");
		//File file = new File("/cygdrive/I/projects/work-temporary/java/zodiac/decoders");
		//String contents = getContents(file,false);
		//String[] shit = contents.split(System.getProperty("line.separator"));
		//System.out.println("contents len " + contents.length());
		//System.out.println("contents split " + contents.split(System.getProperty("line.separator")).length);
		//System.out.println(contents);
		/*for (int i=0; i<shit.length-3; i++) {
			System.out.println(shit[i] + " " + shit[i+1] + " " + shit[i+2] + " " + shit[i+3]);
		}*/
		//System.out.println(ZodiacDictionary.zodiacTopWords.length);
		
		//printDecoders();
		//testShit();
		//testTop100();
		
		//System.out.println("???a?".matches(".*[a-z].*"));
		//testWordConstraintDB();
		testWordConstraintDB2();
		//testRetainAll();
		
		/*
		System.out.println(isWord("??u","??u",false,false));
		
		THashSet<String> results = getWordsConstrainedBy(wordConstraintDatabase, "??u","??u");
		System.out.println(results.size());
		for (String w : results)
			System.out.println("found " + w);
		*/
		/*for (int i=0; i<27; i++) {
			System.out.println(i+","+getCharForIndex(i));
		}
		System.out.println("?," + getIndexForChar('?'));
		for (char c='a'; c<='z'; c++) {
			System.out.println(c+","+getIndexForChar(c));
		}*/
		
		//makeIsWordHash();
		//testDecryptoTrigrams();
	}
	
	public static class Counter {
		public int count = 0;
	}
}
